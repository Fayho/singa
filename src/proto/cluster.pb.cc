// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cluster.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cluster.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lapis {

namespace {

const ::google::protobuf::Descriptor* Cluster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cluster_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cluster_2eproto() {
  protobuf_AddDesc_cluster_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cluster.proto");
  GOOGLE_CHECK(file != NULL);
  Cluster_descriptor_ = file->message_type(0);
  static const int Cluster_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, server_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, server_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, worker_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, worker_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, group_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, data_folder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, synchronous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, checkpoint_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, checkpoint_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, checkpoint_after_),
  };
  Cluster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cluster_descriptor_,
      Cluster::default_instance_,
      Cluster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cluster));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cluster_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cluster_descriptor_, &Cluster::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cluster_2eproto() {
  delete Cluster::default_instance_;
  delete Cluster_reflection_;
}

void protobuf_AddDesc_cluster_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcluster.proto\022\005lapis\"\370\001\n\007Cluster\022\024\n\014se"
    "rver_start\030\001 \002(\005\022\022\n\nserver_end\030\002 \002(\005\022\024\n\014"
    "worker_start\030\003 \002(\005\022\022\n\nworker_end\030\004 \002(\005\022\022"
    "\n\ngroup_size\030\005 \002(\005\022\023\n\013data_folder\030\006 \002(\t\022"
    "\032\n\013synchronous\030\007 \001(\010:\005false\022!\n\022checkpoin"
    "t_enabled\030\010 \001(\010:\005false\022\027\n\017checkpoint_fre"
    "q\030\t \001(\005\022\030\n\020checkpoint_after\030\n \001(\005", 273);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cluster.proto", &protobuf_RegisterTypes);
  Cluster::default_instance_ = new Cluster();
  Cluster::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cluster_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cluster_2eproto {
  StaticDescriptorInitializer_cluster_2eproto() {
    protobuf_AddDesc_cluster_2eproto();
  }
} static_descriptor_initializer_cluster_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Cluster::kServerStartFieldNumber;
const int Cluster::kServerEndFieldNumber;
const int Cluster::kWorkerStartFieldNumber;
const int Cluster::kWorkerEndFieldNumber;
const int Cluster::kGroupSizeFieldNumber;
const int Cluster::kDataFolderFieldNumber;
const int Cluster::kSynchronousFieldNumber;
const int Cluster::kCheckpointEnabledFieldNumber;
const int Cluster::kCheckpointFreqFieldNumber;
const int Cluster::kCheckpointAfterFieldNumber;
#endif  // !_MSC_VER

Cluster::Cluster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cluster::InitAsDefaultInstance() {
}

Cluster::Cluster(const Cluster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cluster::SharedCtor() {
  _cached_size_ = 0;
  server_start_ = 0;
  server_end_ = 0;
  worker_start_ = 0;
  worker_end_ = 0;
  group_size_ = 0;
  data_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  synchronous_ = false;
  checkpoint_enabled_ = false;
  checkpoint_freq_ = 0;
  checkpoint_after_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cluster::~Cluster() {
  SharedDtor();
}

void Cluster::SharedDtor() {
  if (data_folder_ != &::google::protobuf::internal::kEmptyString) {
    delete data_folder_;
  }
  if (this != default_instance_) {
  }
}

void Cluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cluster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cluster_descriptor_;
}

const Cluster& Cluster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cluster_2eproto();
  return *default_instance_;
}

Cluster* Cluster::default_instance_ = NULL;

Cluster* Cluster::New() const {
  return new Cluster;
}

void Cluster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_start_ = 0;
    server_end_ = 0;
    worker_start_ = 0;
    worker_end_ = 0;
    group_size_ = 0;
    if (has_data_folder()) {
      if (data_folder_ != &::google::protobuf::internal::kEmptyString) {
        data_folder_->clear();
      }
    }
    synchronous_ = false;
    checkpoint_enabled_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    checkpoint_freq_ = 0;
    checkpoint_after_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_start_)));
          set_has_server_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_end;
        break;
      }

      // required int32 server_end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_end_)));
          set_has_server_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_worker_start;
        break;
      }

      // required int32 worker_start = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worker_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worker_start_)));
          set_has_worker_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_worker_end;
        break;
      }

      // required int32 worker_end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worker_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worker_end_)));
          set_has_worker_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_group_size;
        break;
      }

      // required int32 group_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_size_)));
          set_has_group_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data_folder;
        break;
      }

      // required string data_folder = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_folder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_folder().data(), this->data_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_synchronous;
        break;
      }

      // optional bool synchronous = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_synchronous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &synchronous_)));
          set_has_synchronous();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_checkpoint_enabled;
        break;
      }

      // optional bool checkpoint_enabled = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkpoint_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &checkpoint_enabled_)));
          set_has_checkpoint_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_checkpoint_freq;
        break;
      }

      // optional int32 checkpoint_freq = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkpoint_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_freq_)));
          set_has_checkpoint_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_checkpoint_after;
        break;
      }

      // optional int32 checkpoint_after = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkpoint_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_after_)));
          set_has_checkpoint_after();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_start = 1;
  if (has_server_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_start(), output);
  }

  // required int32 server_end = 2;
  if (has_server_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_end(), output);
  }

  // required int32 worker_start = 3;
  if (has_worker_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->worker_start(), output);
  }

  // required int32 worker_end = 4;
  if (has_worker_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->worker_end(), output);
  }

  // required int32 group_size = 5;
  if (has_group_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->group_size(), output);
  }

  // required string data_folder = 6;
  if (has_data_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_folder().data(), this->data_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->data_folder(), output);
  }

  // optional bool synchronous = 7 [default = false];
  if (has_synchronous()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->synchronous(), output);
  }

  // optional bool checkpoint_enabled = 8 [default = false];
  if (has_checkpoint_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->checkpoint_enabled(), output);
  }

  // optional int32 checkpoint_freq = 9;
  if (has_checkpoint_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->checkpoint_freq(), output);
  }

  // optional int32 checkpoint_after = 10;
  if (has_checkpoint_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->checkpoint_after(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cluster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_start = 1;
  if (has_server_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_start(), target);
  }

  // required int32 server_end = 2;
  if (has_server_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_end(), target);
  }

  // required int32 worker_start = 3;
  if (has_worker_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->worker_start(), target);
  }

  // required int32 worker_end = 4;
  if (has_worker_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->worker_end(), target);
  }

  // required int32 group_size = 5;
  if (has_group_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->group_size(), target);
  }

  // required string data_folder = 6;
  if (has_data_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_folder().data(), this->data_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->data_folder(), target);
  }

  // optional bool synchronous = 7 [default = false];
  if (has_synchronous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->synchronous(), target);
  }

  // optional bool checkpoint_enabled = 8 [default = false];
  if (has_checkpoint_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->checkpoint_enabled(), target);
  }

  // optional int32 checkpoint_freq = 9;
  if (has_checkpoint_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->checkpoint_freq(), target);
  }

  // optional int32 checkpoint_after = 10;
  if (has_checkpoint_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->checkpoint_after(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cluster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_start = 1;
    if (has_server_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_start());
    }

    // required int32 server_end = 2;
    if (has_server_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_end());
    }

    // required int32 worker_start = 3;
    if (has_worker_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worker_start());
    }

    // required int32 worker_end = 4;
    if (has_worker_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worker_end());
    }

    // required int32 group_size = 5;
    if (has_group_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_size());
    }

    // required string data_folder = 6;
    if (has_data_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_folder());
    }

    // optional bool synchronous = 7 [default = false];
    if (has_synchronous()) {
      total_size += 1 + 1;
    }

    // optional bool checkpoint_enabled = 8 [default = false];
    if (has_checkpoint_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 checkpoint_freq = 9;
    if (has_checkpoint_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkpoint_freq());
    }

    // optional int32 checkpoint_after = 10;
    if (has_checkpoint_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkpoint_after());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cluster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cluster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cluster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cluster::MergeFrom(const Cluster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_start()) {
      set_server_start(from.server_start());
    }
    if (from.has_server_end()) {
      set_server_end(from.server_end());
    }
    if (from.has_worker_start()) {
      set_worker_start(from.worker_start());
    }
    if (from.has_worker_end()) {
      set_worker_end(from.worker_end());
    }
    if (from.has_group_size()) {
      set_group_size(from.group_size());
    }
    if (from.has_data_folder()) {
      set_data_folder(from.data_folder());
    }
    if (from.has_synchronous()) {
      set_synchronous(from.synchronous());
    }
    if (from.has_checkpoint_enabled()) {
      set_checkpoint_enabled(from.checkpoint_enabled());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_checkpoint_freq()) {
      set_checkpoint_freq(from.checkpoint_freq());
    }
    if (from.has_checkpoint_after()) {
      set_checkpoint_after(from.checkpoint_after());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cluster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cluster::CopyFrom(const Cluster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cluster::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Cluster::Swap(Cluster* other) {
  if (other != this) {
    std::swap(server_start_, other->server_start_);
    std::swap(server_end_, other->server_end_);
    std::swap(worker_start_, other->worker_start_);
    std::swap(worker_end_, other->worker_end_);
    std::swap(group_size_, other->group_size_);
    std::swap(data_folder_, other->data_folder_);
    std::swap(synchronous_, other->synchronous_);
    std::swap(checkpoint_enabled_, other->checkpoint_enabled_);
    std::swap(checkpoint_freq_, other->checkpoint_freq_);
    std::swap(checkpoint_after_, other->checkpoint_after_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cluster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cluster_descriptor_;
  metadata.reflection = Cluster_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lapis

// @@protoc_insertion_point(global_scope)
