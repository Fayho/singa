// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worker.proto

#ifndef PROTOBUF_worker_2eproto__INCLUDED
#define PROTOBUF_worker_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "model.pb.h"
// @@protoc_insertion_point(includes)

namespace singa {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_worker_2eproto();
void protobuf_AssignDesc_worker_2eproto();
void protobuf_ShutdownFile_worker_2eproto();

class RegisterWorkerRequest;
class ShardAssignment;
class ShardAssignmentRequest;
class ShardInfo;
class MethodStats;
class RequestBase;
class GetRequest;
class PutRequest;
class UpdateRequest;
class TableData;

// ===================================================================

class RegisterWorkerRequest : public ::google::protobuf::Message {
 public:
  RegisterWorkerRequest();
  virtual ~RegisterWorkerRequest();

  RegisterWorkerRequest(const RegisterWorkerRequest& from);

  inline RegisterWorkerRequest& operator=(const RegisterWorkerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterWorkerRequest& default_instance();

  void Swap(RegisterWorkerRequest* other);

  // implements Message ----------------------------------------------

  RegisterWorkerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterWorkerRequest& from);
  void MergeFrom(const RegisterWorkerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:singa.RegisterWorkerRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_worker_2eproto();
  friend void protobuf_AssignDesc_worker_2eproto();
  friend void protobuf_ShutdownFile_worker_2eproto();

  void InitAsDefaultInstance();
  static RegisterWorkerRequest* default_instance_;
};
// -------------------------------------------------------------------

class ShardAssignment : public ::google::protobuf::Message {
 public:
  ShardAssignment();
  virtual ~ShardAssignment();

  ShardAssignment(const ShardAssignment& from);

  inline ShardAssignment& operator=(const ShardAssignment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShardAssignment& default_instance();

  void Swap(ShardAssignment* other);

  // implements Message ----------------------------------------------

  ShardAssignment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShardAssignment& from);
  void MergeFrom(const ShardAssignment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 table = 1;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 1;
  inline ::google::protobuf::int32 table() const;
  inline void set_table(::google::protobuf::int32 value);

  // required int32 shard = 2;
  inline bool has_shard() const;
  inline void clear_shard();
  static const int kShardFieldNumber = 2;
  inline ::google::protobuf::int32 shard() const;
  inline void set_shard(::google::protobuf::int32 value);

  // required int32 new_worker = 4;
  inline bool has_new_worker() const;
  inline void clear_new_worker();
  static const int kNewWorkerFieldNumber = 4;
  inline ::google::protobuf::int32 new_worker() const;
  inline void set_new_worker(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:singa.ShardAssignment)
 private:
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_shard();
  inline void clear_has_shard();
  inline void set_has_new_worker();
  inline void clear_has_new_worker();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 table_;
  ::google::protobuf::int32 shard_;
  ::google::protobuf::int32 new_worker_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_worker_2eproto();
  friend void protobuf_AssignDesc_worker_2eproto();
  friend void protobuf_ShutdownFile_worker_2eproto();

  void InitAsDefaultInstance();
  static ShardAssignment* default_instance_;
};
// -------------------------------------------------------------------

class ShardAssignmentRequest : public ::google::protobuf::Message {
 public:
  ShardAssignmentRequest();
  virtual ~ShardAssignmentRequest();

  ShardAssignmentRequest(const ShardAssignmentRequest& from);

  inline ShardAssignmentRequest& operator=(const ShardAssignmentRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShardAssignmentRequest& default_instance();

  void Swap(ShardAssignmentRequest* other);

  // implements Message ----------------------------------------------

  ShardAssignmentRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShardAssignmentRequest& from);
  void MergeFrom(const ShardAssignmentRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .singa.ShardAssignment assign = 1;
  inline int assign_size() const;
  inline void clear_assign();
  static const int kAssignFieldNumber = 1;
  inline const ::singa::ShardAssignment& assign(int index) const;
  inline ::singa::ShardAssignment* mutable_assign(int index);
  inline ::singa::ShardAssignment* add_assign();
  inline const ::google::protobuf::RepeatedPtrField< ::singa::ShardAssignment >&
      assign() const;
  inline ::google::protobuf::RepeatedPtrField< ::singa::ShardAssignment >*
      mutable_assign();

  // @@protoc_insertion_point(class_scope:singa.ShardAssignmentRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::singa::ShardAssignment > assign_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_worker_2eproto();
  friend void protobuf_AssignDesc_worker_2eproto();
  friend void protobuf_ShutdownFile_worker_2eproto();

  void InitAsDefaultInstance();
  static ShardAssignmentRequest* default_instance_;
};
// -------------------------------------------------------------------

class ShardInfo : public ::google::protobuf::Message {
 public:
  ShardInfo();
  virtual ~ShardInfo();

  ShardInfo(const ShardInfo& from);

  inline ShardInfo& operator=(const ShardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShardInfo& default_instance();

  void Swap(ShardInfo* other);

  // implements Message ----------------------------------------------

  ShardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShardInfo& from);
  void MergeFrom(const ShardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 table = 1;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 1;
  inline ::google::protobuf::uint32 table() const;
  inline void set_table(::google::protobuf::uint32 value);

  // required uint32 shard = 2;
  inline bool has_shard() const;
  inline void clear_shard();
  static const int kShardFieldNumber = 2;
  inline ::google::protobuf::uint32 shard() const;
  inline void set_shard(::google::protobuf::uint32 value);

  // required uint64 entries = 3;
  inline bool has_entries() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 3;
  inline ::google::protobuf::uint64 entries() const;
  inline void set_entries(::google::protobuf::uint64 value);

  // required uint32 owner = 4;
  inline bool has_owner() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 4;
  inline ::google::protobuf::uint32 owner() const;
  inline void set_owner(::google::protobuf::uint32 value);

  // required int32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:singa.ShardInfo)
 private:
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_shard();
  inline void clear_has_shard();
  inline void set_has_entries();
  inline void clear_has_entries();
  inline void set_has_owner();
  inline void clear_has_owner();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 table_;
  ::google::protobuf::uint32 shard_;
  ::google::protobuf::uint64 entries_;
  ::google::protobuf::uint32 owner_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_worker_2eproto();
  friend void protobuf_AssignDesc_worker_2eproto();
  friend void protobuf_ShutdownFile_worker_2eproto();

  void InitAsDefaultInstance();
  static ShardInfo* default_instance_;
};
// -------------------------------------------------------------------

class MethodStats : public ::google::protobuf::Message {
 public:
  MethodStats();
  virtual ~MethodStats();

  MethodStats(const MethodStats& from);

  inline MethodStats& operator=(const MethodStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MethodStats& default_instance();

  void Swap(MethodStats* other);

  // implements Message ----------------------------------------------

  MethodStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MethodStats& from);
  void MergeFrom(const MethodStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double total_time = 1;
  inline bool has_total_time() const;
  inline void clear_total_time();
  static const int kTotalTimeFieldNumber = 1;
  inline double total_time() const;
  inline void set_total_time(double value);

  // required double shard_time = 2;
  inline bool has_shard_time() const;
  inline void clear_shard_time();
  static const int kShardTimeFieldNumber = 2;
  inline double shard_time() const;
  inline void set_shard_time(double value);

  // required int32 calls = 3;
  inline bool has_calls() const;
  inline void clear_calls();
  static const int kCallsFieldNumber = 3;
  inline ::google::protobuf::int32 calls() const;
  inline void set_calls(::google::protobuf::int32 value);

  // required int32 shard_calls = 4;
  inline bool has_shard_calls() const;
  inline void clear_shard_calls();
  static const int kShardCallsFieldNumber = 4;
  inline ::google::protobuf::int32 shard_calls() const;
  inline void set_shard_calls(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:singa.MethodStats)
 private:
  inline void set_has_total_time();
  inline void clear_has_total_time();
  inline void set_has_shard_time();
  inline void clear_has_shard_time();
  inline void set_has_calls();
  inline void clear_has_calls();
  inline void set_has_shard_calls();
  inline void clear_has_shard_calls();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double total_time_;
  double shard_time_;
  ::google::protobuf::int32 calls_;
  ::google::protobuf::int32 shard_calls_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_worker_2eproto();
  friend void protobuf_AssignDesc_worker_2eproto();
  friend void protobuf_ShutdownFile_worker_2eproto();

  void InitAsDefaultInstance();
  static MethodStats* default_instance_;
};
// -------------------------------------------------------------------

class RequestBase : public ::google::protobuf::Message {
 public:
  RequestBase();
  virtual ~RequestBase();

  RequestBase(const RequestBase& from);

  inline RequestBase& operator=(const RequestBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestBase& default_instance();

  void Swap(RequestBase* other);

  // implements Message ----------------------------------------------

  RequestBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestBase& from);
  void MergeFrom(const RequestBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 table = 1;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 1;
  inline ::google::protobuf::int32 table() const;
  inline void set_table(::google::protobuf::int32 value);

  // required int32 source = 2;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 2;
  inline ::google::protobuf::int32 source() const;
  inline void set_source(::google::protobuf::int32 value);

  // optional int32 shard = 3;
  inline bool has_shard() const;
  inline void clear_shard();
  static const int kShardFieldNumber = 3;
  inline ::google::protobuf::int32 shard() const;
  inline void set_shard(::google::protobuf::int32 value);

  // optional double start = 4;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 4;
  inline double start() const;
  inline void set_start(double value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(RequestBase)
  // @@protoc_insertion_point(class_scope:singa.RequestBase)
 private:
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_shard();
  inline void clear_has_shard();
  inline void set_has_start();
  inline void clear_has_start();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 table_;
  ::google::protobuf::int32 source_;
  double start_;
  ::google::protobuf::int32 shard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_worker_2eproto();
  friend void protobuf_AssignDesc_worker_2eproto();
  friend void protobuf_ShutdownFile_worker_2eproto();

  void InitAsDefaultInstance();
  static RequestBase* default_instance_;
};
// -------------------------------------------------------------------

class GetRequest : public ::google::protobuf::Message {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRequest& default_instance();

  void Swap(GetRequest* other);

  // implements Message ----------------------------------------------

  GetRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 shard = 1;
  inline bool has_shard() const;
  inline void clear_shard();
  static const int kShardFieldNumber = 1;
  inline ::google::protobuf::uint32 shard() const;
  inline void set_shard(::google::protobuf::uint32 value);

  // optional .singa.TKey key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::singa::TKey& key() const;
  inline ::singa::TKey* mutable_key();
  inline ::singa::TKey* release_key();
  inline void set_allocated_key(::singa::TKey* key);

  static const int kNameFieldNumber = 101;
  static ::google::protobuf::internal::ExtensionIdentifier< ::singa::RequestBase,
      ::google::protobuf::internal::MessageTypeTraits< ::singa::GetRequest >, 11, false >
    name;
  // @@protoc_insertion_point(class_scope:singa.GetRequest)
 private:
  inline void set_has_shard();
  inline void clear_has_shard();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::singa::TKey* key_;
  ::google::protobuf::uint32 shard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_worker_2eproto();
  friend void protobuf_AssignDesc_worker_2eproto();
  friend void protobuf_ShutdownFile_worker_2eproto();

  void InitAsDefaultInstance();
  static GetRequest* default_instance_;
};
// -------------------------------------------------------------------

class PutRequest : public ::google::protobuf::Message {
 public:
  PutRequest();
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutRequest& default_instance();

  void Swap(PutRequest* other);

  // implements Message ----------------------------------------------

  PutRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 shard = 1;
  inline bool has_shard() const;
  inline void clear_shard();
  static const int kShardFieldNumber = 1;
  inline ::google::protobuf::uint32 shard() const;
  inline void set_shard(::google::protobuf::uint32 value);

  // optional .singa.TableData data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::singa::TableData& data() const;
  inline ::singa::TableData* mutable_data();
  inline ::singa::TableData* release_data();
  inline void set_allocated_data(::singa::TableData* data);

  static const int kNameFieldNumber = 102;
  static ::google::protobuf::internal::ExtensionIdentifier< ::singa::RequestBase,
      ::google::protobuf::internal::MessageTypeTraits< ::singa::PutRequest >, 11, false >
    name;
  // @@protoc_insertion_point(class_scope:singa.PutRequest)
 private:
  inline void set_has_shard();
  inline void clear_has_shard();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::singa::TableData* data_;
  ::google::protobuf::uint32 shard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_worker_2eproto();
  friend void protobuf_AssignDesc_worker_2eproto();
  friend void protobuf_ShutdownFile_worker_2eproto();

  void InitAsDefaultInstance();
  static PutRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateRequest : public ::google::protobuf::Message {
 public:
  UpdateRequest();
  virtual ~UpdateRequest();

  UpdateRequest(const UpdateRequest& from);

  inline UpdateRequest& operator=(const UpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateRequest& default_instance();

  void Swap(UpdateRequest* other);

  // implements Message ----------------------------------------------

  UpdateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateRequest& from);
  void MergeFrom(const UpdateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 shard = 1;
  inline bool has_shard() const;
  inline void clear_shard();
  static const int kShardFieldNumber = 1;
  inline ::google::protobuf::uint32 shard() const;
  inline void set_shard(::google::protobuf::uint32 value);

  // optional .singa.TableData data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::singa::TableData& data() const;
  inline ::singa::TableData* mutable_data();
  inline ::singa::TableData* release_data();
  inline void set_allocated_data(::singa::TableData* data);

  static const int kNameFieldNumber = 103;
  static ::google::protobuf::internal::ExtensionIdentifier< ::singa::RequestBase,
      ::google::protobuf::internal::MessageTypeTraits< ::singa::UpdateRequest >, 11, false >
    name;
  // @@protoc_insertion_point(class_scope:singa.UpdateRequest)
 private:
  inline void set_has_shard();
  inline void clear_has_shard();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::singa::TableData* data_;
  ::google::protobuf::uint32 shard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_worker_2eproto();
  friend void protobuf_AssignDesc_worker_2eproto();
  friend void protobuf_ShutdownFile_worker_2eproto();

  void InitAsDefaultInstance();
  static UpdateRequest* default_instance_;
};
// -------------------------------------------------------------------

class TableData : public ::google::protobuf::Message {
 public:
  TableData();
  virtual ~TableData();

  TableData(const TableData& from);

  inline TableData& operator=(const TableData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableData& default_instance();

  void Swap(TableData* other);

  // implements Message ----------------------------------------------

  TableData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableData& from);
  void MergeFrom(const TableData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .singa.TKey key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::singa::TKey& key() const;
  inline ::singa::TKey* mutable_key();
  inline ::singa::TKey* release_key();
  inline void set_allocated_key(::singa::TKey* key);

  // optional .singa.TVal value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::singa::TVal& value() const;
  inline ::singa::TVal* mutable_value();
  inline ::singa::TVal* release_value();
  inline void set_allocated_value(::singa::TVal* value);

  // @@protoc_insertion_point(class_scope:singa.TableData)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::singa::TKey* key_;
  ::singa::TVal* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_worker_2eproto();
  friend void protobuf_AssignDesc_worker_2eproto();
  friend void protobuf_ShutdownFile_worker_2eproto();

  void InitAsDefaultInstance();
  static TableData* default_instance_;
};
// ===================================================================


// ===================================================================

// RegisterWorkerRequest

// required int32 id = 1;
inline bool RegisterWorkerRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterWorkerRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterWorkerRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterWorkerRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RegisterWorkerRequest::id() const {
  return id_;
}
inline void RegisterWorkerRequest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// ShardAssignment

// required int32 table = 1;
inline bool ShardAssignment::has_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShardAssignment::set_has_table() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShardAssignment::clear_has_table() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShardAssignment::clear_table() {
  table_ = 0;
  clear_has_table();
}
inline ::google::protobuf::int32 ShardAssignment::table() const {
  return table_;
}
inline void ShardAssignment::set_table(::google::protobuf::int32 value) {
  set_has_table();
  table_ = value;
}

// required int32 shard = 2;
inline bool ShardAssignment::has_shard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShardAssignment::set_has_shard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShardAssignment::clear_has_shard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShardAssignment::clear_shard() {
  shard_ = 0;
  clear_has_shard();
}
inline ::google::protobuf::int32 ShardAssignment::shard() const {
  return shard_;
}
inline void ShardAssignment::set_shard(::google::protobuf::int32 value) {
  set_has_shard();
  shard_ = value;
}

// required int32 new_worker = 4;
inline bool ShardAssignment::has_new_worker() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShardAssignment::set_has_new_worker() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShardAssignment::clear_has_new_worker() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShardAssignment::clear_new_worker() {
  new_worker_ = 0;
  clear_has_new_worker();
}
inline ::google::protobuf::int32 ShardAssignment::new_worker() const {
  return new_worker_;
}
inline void ShardAssignment::set_new_worker(::google::protobuf::int32 value) {
  set_has_new_worker();
  new_worker_ = value;
}

// -------------------------------------------------------------------

// ShardAssignmentRequest

// repeated .singa.ShardAssignment assign = 1;
inline int ShardAssignmentRequest::assign_size() const {
  return assign_.size();
}
inline void ShardAssignmentRequest::clear_assign() {
  assign_.Clear();
}
inline const ::singa::ShardAssignment& ShardAssignmentRequest::assign(int index) const {
  return assign_.Get(index);
}
inline ::singa::ShardAssignment* ShardAssignmentRequest::mutable_assign(int index) {
  return assign_.Mutable(index);
}
inline ::singa::ShardAssignment* ShardAssignmentRequest::add_assign() {
  return assign_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::singa::ShardAssignment >&
ShardAssignmentRequest::assign() const {
  return assign_;
}
inline ::google::protobuf::RepeatedPtrField< ::singa::ShardAssignment >*
ShardAssignmentRequest::mutable_assign() {
  return &assign_;
}

// -------------------------------------------------------------------

// ShardInfo

// required uint32 table = 1;
inline bool ShardInfo::has_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShardInfo::set_has_table() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShardInfo::clear_has_table() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShardInfo::clear_table() {
  table_ = 0u;
  clear_has_table();
}
inline ::google::protobuf::uint32 ShardInfo::table() const {
  return table_;
}
inline void ShardInfo::set_table(::google::protobuf::uint32 value) {
  set_has_table();
  table_ = value;
}

// required uint32 shard = 2;
inline bool ShardInfo::has_shard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShardInfo::set_has_shard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShardInfo::clear_has_shard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShardInfo::clear_shard() {
  shard_ = 0u;
  clear_has_shard();
}
inline ::google::protobuf::uint32 ShardInfo::shard() const {
  return shard_;
}
inline void ShardInfo::set_shard(::google::protobuf::uint32 value) {
  set_has_shard();
  shard_ = value;
}

// required uint64 entries = 3;
inline bool ShardInfo::has_entries() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShardInfo::set_has_entries() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShardInfo::clear_has_entries() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShardInfo::clear_entries() {
  entries_ = GOOGLE_ULONGLONG(0);
  clear_has_entries();
}
inline ::google::protobuf::uint64 ShardInfo::entries() const {
  return entries_;
}
inline void ShardInfo::set_entries(::google::protobuf::uint64 value) {
  set_has_entries();
  entries_ = value;
}

// required uint32 owner = 4;
inline bool ShardInfo::has_owner() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShardInfo::set_has_owner() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShardInfo::clear_has_owner() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShardInfo::clear_owner() {
  owner_ = 0u;
  clear_has_owner();
}
inline ::google::protobuf::uint32 ShardInfo::owner() const {
  return owner_;
}
inline void ShardInfo::set_owner(::google::protobuf::uint32 value) {
  set_has_owner();
  owner_ = value;
}

// required int32 type = 5;
inline bool ShardInfo::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShardInfo::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShardInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShardInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ShardInfo::type() const {
  return type_;
}
inline void ShardInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// MethodStats

// required double total_time = 1;
inline bool MethodStats::has_total_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MethodStats::set_has_total_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MethodStats::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MethodStats::clear_total_time() {
  total_time_ = 0;
  clear_has_total_time();
}
inline double MethodStats::total_time() const {
  return total_time_;
}
inline void MethodStats::set_total_time(double value) {
  set_has_total_time();
  total_time_ = value;
}

// required double shard_time = 2;
inline bool MethodStats::has_shard_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MethodStats::set_has_shard_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MethodStats::clear_has_shard_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MethodStats::clear_shard_time() {
  shard_time_ = 0;
  clear_has_shard_time();
}
inline double MethodStats::shard_time() const {
  return shard_time_;
}
inline void MethodStats::set_shard_time(double value) {
  set_has_shard_time();
  shard_time_ = value;
}

// required int32 calls = 3;
inline bool MethodStats::has_calls() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MethodStats::set_has_calls() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MethodStats::clear_has_calls() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MethodStats::clear_calls() {
  calls_ = 0;
  clear_has_calls();
}
inline ::google::protobuf::int32 MethodStats::calls() const {
  return calls_;
}
inline void MethodStats::set_calls(::google::protobuf::int32 value) {
  set_has_calls();
  calls_ = value;
}

// required int32 shard_calls = 4;
inline bool MethodStats::has_shard_calls() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MethodStats::set_has_shard_calls() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MethodStats::clear_has_shard_calls() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MethodStats::clear_shard_calls() {
  shard_calls_ = 0;
  clear_has_shard_calls();
}
inline ::google::protobuf::int32 MethodStats::shard_calls() const {
  return shard_calls_;
}
inline void MethodStats::set_shard_calls(::google::protobuf::int32 value) {
  set_has_shard_calls();
  shard_calls_ = value;
}

// -------------------------------------------------------------------

// RequestBase

// required int32 table = 1;
inline bool RequestBase::has_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestBase::set_has_table() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestBase::clear_has_table() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestBase::clear_table() {
  table_ = 0;
  clear_has_table();
}
inline ::google::protobuf::int32 RequestBase::table() const {
  return table_;
}
inline void RequestBase::set_table(::google::protobuf::int32 value) {
  set_has_table();
  table_ = value;
}

// required int32 source = 2;
inline bool RequestBase::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestBase::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestBase::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestBase::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::google::protobuf::int32 RequestBase::source() const {
  return source_;
}
inline void RequestBase::set_source(::google::protobuf::int32 value) {
  set_has_source();
  source_ = value;
}

// optional int32 shard = 3;
inline bool RequestBase::has_shard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestBase::set_has_shard() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestBase::clear_has_shard() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestBase::clear_shard() {
  shard_ = 0;
  clear_has_shard();
}
inline ::google::protobuf::int32 RequestBase::shard() const {
  return shard_;
}
inline void RequestBase::set_shard(::google::protobuf::int32 value) {
  set_has_shard();
  shard_ = value;
}

// optional double start = 4;
inline bool RequestBase::has_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestBase::set_has_start() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestBase::clear_has_start() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestBase::clear_start() {
  start_ = 0;
  clear_has_start();
}
inline double RequestBase::start() const {
  return start_;
}
inline void RequestBase::set_start(double value) {
  set_has_start();
  start_ = value;
}

// -------------------------------------------------------------------

// GetRequest

// optional uint32 shard = 1;
inline bool GetRequest::has_shard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRequest::set_has_shard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRequest::clear_has_shard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRequest::clear_shard() {
  shard_ = 0u;
  clear_has_shard();
}
inline ::google::protobuf::uint32 GetRequest::shard() const {
  return shard_;
}
inline void GetRequest::set_shard(::google::protobuf::uint32 value) {
  set_has_shard();
  shard_ = value;
}

// optional .singa.TKey key = 2;
inline bool GetRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetRequest::clear_key() {
  if (key_ != NULL) key_->::singa::TKey::Clear();
  clear_has_key();
}
inline const ::singa::TKey& GetRequest::key() const {
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::singa::TKey* GetRequest::mutable_key() {
  set_has_key();
  if (key_ == NULL) key_ = new ::singa::TKey;
  return key_;
}
inline ::singa::TKey* GetRequest::release_key() {
  clear_has_key();
  ::singa::TKey* temp = key_;
  key_ = NULL;
  return temp;
}
inline void GetRequest::set_allocated_key(::singa::TKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
}

// -------------------------------------------------------------------

// PutRequest

// optional uint32 shard = 1;
inline bool PutRequest::has_shard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PutRequest::set_has_shard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PutRequest::clear_has_shard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PutRequest::clear_shard() {
  shard_ = 0u;
  clear_has_shard();
}
inline ::google::protobuf::uint32 PutRequest::shard() const {
  return shard_;
}
inline void PutRequest::set_shard(::google::protobuf::uint32 value) {
  set_has_shard();
  shard_ = value;
}

// optional .singa.TableData data = 2;
inline bool PutRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PutRequest::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PutRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PutRequest::clear_data() {
  if (data_ != NULL) data_->::singa::TableData::Clear();
  clear_has_data();
}
inline const ::singa::TableData& PutRequest::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::singa::TableData* PutRequest::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::singa::TableData;
  return data_;
}
inline ::singa::TableData* PutRequest::release_data() {
  clear_has_data();
  ::singa::TableData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void PutRequest::set_allocated_data(::singa::TableData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// UpdateRequest

// optional uint32 shard = 1;
inline bool UpdateRequest::has_shard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateRequest::set_has_shard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateRequest::clear_has_shard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateRequest::clear_shard() {
  shard_ = 0u;
  clear_has_shard();
}
inline ::google::protobuf::uint32 UpdateRequest::shard() const {
  return shard_;
}
inline void UpdateRequest::set_shard(::google::protobuf::uint32 value) {
  set_has_shard();
  shard_ = value;
}

// optional .singa.TableData data = 2;
inline bool UpdateRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateRequest::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateRequest::clear_data() {
  if (data_ != NULL) data_->::singa::TableData::Clear();
  clear_has_data();
}
inline const ::singa::TableData& UpdateRequest::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::singa::TableData* UpdateRequest::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::singa::TableData;
  return data_;
}
inline ::singa::TableData* UpdateRequest::release_data() {
  clear_has_data();
  ::singa::TableData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void UpdateRequest::set_allocated_data(::singa::TableData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// TableData

// optional .singa.TKey key = 1;
inline bool TableData::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableData::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableData::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableData::clear_key() {
  if (key_ != NULL) key_->::singa::TKey::Clear();
  clear_has_key();
}
inline const ::singa::TKey& TableData::key() const {
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::singa::TKey* TableData::mutable_key() {
  set_has_key();
  if (key_ == NULL) key_ = new ::singa::TKey;
  return key_;
}
inline ::singa::TKey* TableData::release_key() {
  clear_has_key();
  ::singa::TKey* temp = key_;
  key_ = NULL;
  return temp;
}
inline void TableData::set_allocated_key(::singa::TKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
}

// optional .singa.TVal value = 2;
inline bool TableData::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableData::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableData::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableData::clear_value() {
  if (value_ != NULL) value_->::singa::TVal::Clear();
  clear_has_value();
}
inline const ::singa::TVal& TableData::value() const {
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::singa::TVal* TableData::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::singa::TVal;
  return value_;
}
inline ::singa::TVal* TableData::release_value() {
  clear_has_value();
  ::singa::TVal* temp = value_;
  value_ = NULL;
  return temp;
}
inline void TableData::set_allocated_value(::singa::TVal* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace singa

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_worker_2eproto__INCLUDED
