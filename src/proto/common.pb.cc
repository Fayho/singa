// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lapis {

namespace {

const ::google::protobuf::Descriptor* StringIntPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringIntPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringIntMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringIntMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntIntPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntIntPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntIntMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntIntMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataStorageConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataStorageConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParamStorageConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParamStorageConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* DistributedStorageConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DistributedStorageConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmptyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmptyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShortMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShortMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Arg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Arg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Args_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Args_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageTypes_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CompressionFormat_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  StringIntPair_descriptor_ = file->message_type(0);
  static const int StringIntPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringIntPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringIntPair, val_),
  };
  StringIntPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringIntPair_descriptor_,
      StringIntPair::default_instance_,
      StringIntPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringIntPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringIntPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringIntPair));
  StringIntMap_descriptor_ = file->message_type(1);
  static const int StringIntMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringIntMap, pair_),
  };
  StringIntMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringIntMap_descriptor_,
      StringIntMap::default_instance_,
      StringIntMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringIntMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringIntMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringIntMap));
  IntIntPair_descriptor_ = file->message_type(2);
  static const int IntIntPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntIntPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntIntPair, val_),
  };
  IntIntPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntIntPair_descriptor_,
      IntIntPair::default_instance_,
      IntIntPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntIntPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntIntPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntIntPair));
  IntIntMap_descriptor_ = file->message_type(3);
  static const int IntIntMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntIntMap, pair_),
  };
  IntIntMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntIntMap_descriptor_,
      IntIntMap::default_instance_,
      IntIntMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntIntMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntIntMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntIntMap));
  DataStorageConfig_descriptor_ = file->message_type(4);
  static const int DataStorageConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStorageConfig, train_stores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStorageConfig, val_stores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStorageConfig, test_stores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStorageConfig, tables_),
  };
  DataStorageConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataStorageConfig_descriptor_,
      DataStorageConfig::default_instance_,
      DataStorageConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStorageConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStorageConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataStorageConfig));
  ParamStorageConfig_descriptor_ = file->message_type(5);
  static const int ParamStorageConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamStorageConfig, param_stores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamStorageConfig, tables_),
  };
  ParamStorageConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParamStorageConfig_descriptor_,
      ParamStorageConfig::default_instance_,
      ParamStorageConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamStorageConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamStorageConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParamStorageConfig));
  DistributedStorageConfig_descriptor_ = file->message_type(6);
  static const int DistributedStorageConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistributedStorageConfig, dsconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistributedStorageConfig, psconfig_),
  };
  DistributedStorageConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DistributedStorageConfig_descriptor_,
      DistributedStorageConfig::default_instance_,
      DistributedStorageConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistributedStorageConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistributedStorageConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DistributedStorageConfig));
  EmptyMessage_descriptor_ = file->message_type(7);
  static const int EmptyMessage_offsets_[1] = {
  };
  EmptyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmptyMessage_descriptor_,
      EmptyMessage::default_instance_,
      EmptyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmptyMessage));
  ShortMsg_descriptor_ = file->message_type(8);
  static const int ShortMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMsg, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMsg, answer_),
  };
  ShortMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShortMsg_descriptor_,
      ShortMsg::default_instance_,
      ShortMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShortMsg));
  Arg_descriptor_ = file->message_type(9);
  static const int Arg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, value_),
  };
  Arg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Arg_descriptor_,
      Arg::default_instance_,
      Arg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Arg));
  Args_descriptor_ = file->message_type(10);
  static const int Args_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Args, param_),
  };
  Args_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Args_descriptor_,
      Args::default_instance_,
      Args_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Args, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Args, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Args));
  FileParams_descriptor_ = file->message_type(11);
  static const int FileParams_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileParams, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileParams, compression_),
  };
  FileParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileParams_descriptor_,
      FileParams::default_instance_,
      FileParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileParams));
  ConfigData_descriptor_ = file->message_type(12);
  static const int ConfigData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, num_workers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, worker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, master_id_),
  };
  ConfigData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigData_descriptor_,
      ConfigData::default_instance_,
      ConfigData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigData));
  MessageTypes_descriptor_ = file->enum_type(0);
  CompressionFormat_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringIntPair_descriptor_, &StringIntPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringIntMap_descriptor_, &StringIntMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntIntPair_descriptor_, &IntIntPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntIntMap_descriptor_, &IntIntMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataStorageConfig_descriptor_, &DataStorageConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParamStorageConfig_descriptor_, &ParamStorageConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DistributedStorageConfig_descriptor_, &DistributedStorageConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmptyMessage_descriptor_, &EmptyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShortMsg_descriptor_, &ShortMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Arg_descriptor_, &Arg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Args_descriptor_, &Args::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileParams_descriptor_, &FileParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigData_descriptor_, &ConfigData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  delete StringIntPair::default_instance_;
  delete StringIntPair_reflection_;
  delete StringIntMap::default_instance_;
  delete StringIntMap_reflection_;
  delete IntIntPair::default_instance_;
  delete IntIntPair_reflection_;
  delete IntIntMap::default_instance_;
  delete IntIntMap_reflection_;
  delete DataStorageConfig::default_instance_;
  delete DataStorageConfig_reflection_;
  delete ParamStorageConfig::default_instance_;
  delete ParamStorageConfig_reflection_;
  delete DistributedStorageConfig::default_instance_;
  delete DistributedStorageConfig_reflection_;
  delete EmptyMessage::default_instance_;
  delete EmptyMessage_reflection_;
  delete ShortMsg::default_instance_;
  delete ShortMsg_reflection_;
  delete Arg::default_instance_;
  delete Arg_reflection_;
  delete Args::default_instance_;
  delete Args_reflection_;
  delete FileParams::default_instance_;
  delete FileParams_reflection_;
  delete ConfigData::default_instance_;
  delete ConfigData_reflection_;
}

void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\022\005lapis\")\n\rStringIntPair\022\013"
    "\n\003key\030\001 \002(\t\022\013\n\003val\030\002 \002(\005\"2\n\014StringIntMap"
    "\022\"\n\004pair\030\001 \003(\0132\024.lapis.StringIntPair\"&\n\n"
    "IntIntPair\022\013\n\003key\030\001 \002(\005\022\013\n\003val\030\002 \002(\005\",\n\t"
    "IntIntMap\022\037\n\004pair\030\001 \003(\0132\021.lapis.IntIntPa"
    "ir\"\263\001\n\021DataStorageConfig\022)\n\014train_stores"
    "\030\001 \001(\0132\023.lapis.StringIntMap\022\'\n\nval_store"
    "s\030\002 \001(\0132\023.lapis.StringIntMap\022(\n\013test_sto"
    "res\030\003 \001(\0132\023.lapis.StringIntMap\022 \n\006tables"
    "\030\004 \001(\0132\020.lapis.IntIntMap\"a\n\022ParamStorage"
    "Config\022)\n\014param_stores\030\001 \001(\0132\023.lapis.Str"
    "ingIntMap\022 \n\006tables\030\002 \001(\0132\020.lapis.IntInt"
    "Map\"s\n\030DistributedStorageConfig\022*\n\010dscon"
    "fig\030\001 \001(\0132\030.lapis.DataStorageConfig\022+\n\010p"
    "sconfig\030\002 \001(\0132\031.lapis.ParamStorageConfig"
    "\"\016\n\014EmptyMessage\"(\n\010ShortMsg\022\014\n\004step\030\001 \001"
    "(\005\022\016\n\006answer\030\002 \001(\010\"!\n\003Arg\022\013\n\003key\030\001 \002(\014\022\r"
    "\n\005value\030\002 \002(\014\"!\n\004Args\022\031\n\005param\030\001 \003(\0132\n.l"
    "apis.Arg\">\n\nFileParams\022\030\n\004attr\030\001 \003(\0132\n.l"
    "apis.Arg\022\026\n\013compression\030\002 \001(\005:\0010\"G\n\nConf"
    "igData\022\023\n\013num_workers\030\001 \002(\005\022\021\n\tworker_id"
    "\030\002 \002(\005\022\021\n\tmaster_id\030\003 \002(\005*\352\004\n\014MessageTyp"
    "es\022\025\n\021MTYPE_PUT_REQUEST\020\001\022\025\n\021MTYPE_GET_R"
    "EQUEST\020\002\022\026\n\022MTYPE_GET_RESPONSE\020\003\022\031\n\025MTYP"
    "E_WORKER_SHUTDOWN\020\004\022\031\n\025MTYPE_REGISTER_WO"
    "RKER\020\005\022\026\n\022MTYPE_WORKER_FLUSH\020\006\022\033\n\027MTYPE_"
    "WORKER_FLUSH_DONE\020\007\022\032\n\026MTYPE_SHARD_ASSIG"
    "NMENT\020\010\022\037\n\033MTYPE_SHARD_ASSIGNMENT_DONE\020\t"
    "\022\026\n\022MTYPE_WORKER_APPLY\020\n\022\033\n\027MTYPE_WORKER"
    "_APPLY_DONE\020\013\022\024\n\020MTYPE_WORKER_END\020\014\022\032\n\026M"
    "TYPE_DATA_PUT_REQUEST\020\016\022!\n\035MTYPE_DATA_PU"
    "T_REQUEST_FINISH\020\017\022\037\n\033MTYPE_DATA_PUT_REQ"
    "UEST_DONE\020\020\022\026\n\022MTYPE_MODEL_CONFIG\020\021\022\024\n\020M"
    "TYPE_VALIDATION\020\022\022\025\n\021MTYPE_INSTRUCTION\020\023"
    "\022\025\n\021MTYPE_PERFORMANCE\020\024\022\030\n\024MTYPE_STORAGE"
    "_CONFIG\020\025\022\031\n\025MTYPE_BARRIER_REQUEST\020\026\022\027\n\023"
    "MTYPE_BARRIER_REPLY\020\027\022\027\n\023MTYPE_BARRIER_R"
    "EADY\020\030*0\n\021CompressionFormat\022\010\n\004NONE\020\000\022\007\n"
    "\003LZO\020\001\022\010\n\004ZLIB\020\002", 1536);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  StringIntPair::default_instance_ = new StringIntPair();
  StringIntMap::default_instance_ = new StringIntMap();
  IntIntPair::default_instance_ = new IntIntPair();
  IntIntMap::default_instance_ = new IntIntMap();
  DataStorageConfig::default_instance_ = new DataStorageConfig();
  ParamStorageConfig::default_instance_ = new ParamStorageConfig();
  DistributedStorageConfig::default_instance_ = new DistributedStorageConfig();
  EmptyMessage::default_instance_ = new EmptyMessage();
  ShortMsg::default_instance_ = new ShortMsg();
  Arg::default_instance_ = new Arg();
  Args::default_instance_ = new Args();
  FileParams::default_instance_ = new FileParams();
  ConfigData::default_instance_ = new ConfigData();
  StringIntPair::default_instance_->InitAsDefaultInstance();
  StringIntMap::default_instance_->InitAsDefaultInstance();
  IntIntPair::default_instance_->InitAsDefaultInstance();
  IntIntMap::default_instance_->InitAsDefaultInstance();
  DataStorageConfig::default_instance_->InitAsDefaultInstance();
  ParamStorageConfig::default_instance_->InitAsDefaultInstance();
  DistributedStorageConfig::default_instance_->InitAsDefaultInstance();
  EmptyMessage::default_instance_->InitAsDefaultInstance();
  ShortMsg::default_instance_->InitAsDefaultInstance();
  Arg::default_instance_->InitAsDefaultInstance();
  Args::default_instance_->InitAsDefaultInstance();
  FileParams::default_instance_->InitAsDefaultInstance();
  ConfigData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;

const ::google::protobuf::EnumDescriptor* MessageTypes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageTypes_descriptor_;
}
bool MessageTypes_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CompressionFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompressionFormat_descriptor_;
}
bool CompressionFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int StringIntPair::kKeyFieldNumber;
const int StringIntPair::kValFieldNumber;
#endif  // !_MSC_VER

StringIntPair::StringIntPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringIntPair::InitAsDefaultInstance() {
}

StringIntPair::StringIntPair(const StringIntPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringIntPair::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringIntPair::~StringIntPair() {
  SharedDtor();
}

void StringIntPair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void StringIntPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringIntPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringIntPair_descriptor_;
}

const StringIntPair& StringIntPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

StringIntPair* StringIntPair::default_instance_ = NULL;

StringIntPair* StringIntPair::New() const {
  return new StringIntPair;
}

void StringIntPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringIntPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }
      
      // required int32 val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringIntPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // required int32 val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->val(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringIntPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // required int32 val = 2;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->val(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringIntPair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // required int32 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringIntPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringIntPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringIntPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringIntPair::MergeFrom(const StringIntPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringIntPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringIntPair::CopyFrom(const StringIntPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringIntPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StringIntPair::Swap(StringIntPair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringIntPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringIntPair_descriptor_;
  metadata.reflection = StringIntPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringIntMap::kPairFieldNumber;
#endif  // !_MSC_VER

StringIntMap::StringIntMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringIntMap::InitAsDefaultInstance() {
}

StringIntMap::StringIntMap(const StringIntMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringIntMap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringIntMap::~StringIntMap() {
  SharedDtor();
}

void StringIntMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StringIntMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringIntMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringIntMap_descriptor_;
}

const StringIntMap& StringIntMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

StringIntMap* StringIntMap::default_instance_ = NULL;

StringIntMap* StringIntMap::New() const {
  return new StringIntMap;
}

void StringIntMap::Clear() {
  pair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringIntMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lapis.StringIntPair pair = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pair;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringIntMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lapis.StringIntPair pair = 1;
  for (int i = 0; i < this->pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pair(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringIntMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lapis.StringIntPair pair = 1;
  for (int i = 0; i < this->pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pair(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringIntMap::ByteSize() const {
  int total_size = 0;
  
  // repeated .lapis.StringIntPair pair = 1;
  total_size += 1 * this->pair_size();
  for (int i = 0; i < this->pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pair(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringIntMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringIntMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringIntMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringIntMap::MergeFrom(const StringIntMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  pair_.MergeFrom(from.pair_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringIntMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringIntMap::CopyFrom(const StringIntMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringIntMap::IsInitialized() const {
  
  for (int i = 0; i < pair_size(); i++) {
    if (!this->pair(i).IsInitialized()) return false;
  }
  return true;
}

void StringIntMap::Swap(StringIntMap* other) {
  if (other != this) {
    pair_.Swap(&other->pair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringIntMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringIntMap_descriptor_;
  metadata.reflection = StringIntMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntIntPair::kKeyFieldNumber;
const int IntIntPair::kValFieldNumber;
#endif  // !_MSC_VER

IntIntPair::IntIntPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IntIntPair::InitAsDefaultInstance() {
}

IntIntPair::IntIntPair(const IntIntPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IntIntPair::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntIntPair::~IntIntPair() {
  SharedDtor();
}

void IntIntPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntIntPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntIntPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntIntPair_descriptor_;
}

const IntIntPair& IntIntPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

IntIntPair* IntIntPair::default_instance_ = NULL;

IntIntPair* IntIntPair::New() const {
  return new IntIntPair;
}

void IntIntPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntIntPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }
      
      // required int32 val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntIntPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // required int32 val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->val(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntIntPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // required int32 val = 2;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->val(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntIntPair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
    // required int32 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntIntPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntIntPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntIntPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntIntPair::MergeFrom(const IntIntPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntIntPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntIntPair::CopyFrom(const IntIntPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntIntPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void IntIntPair::Swap(IntIntPair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntIntPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntIntPair_descriptor_;
  metadata.reflection = IntIntPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntIntMap::kPairFieldNumber;
#endif  // !_MSC_VER

IntIntMap::IntIntMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IntIntMap::InitAsDefaultInstance() {
}

IntIntMap::IntIntMap(const IntIntMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IntIntMap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntIntMap::~IntIntMap() {
  SharedDtor();
}

void IntIntMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntIntMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntIntMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntIntMap_descriptor_;
}

const IntIntMap& IntIntMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

IntIntMap* IntIntMap::default_instance_ = NULL;

IntIntMap* IntIntMap::New() const {
  return new IntIntMap;
}

void IntIntMap::Clear() {
  pair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntIntMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lapis.IntIntPair pair = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pair;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntIntMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lapis.IntIntPair pair = 1;
  for (int i = 0; i < this->pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pair(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntIntMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lapis.IntIntPair pair = 1;
  for (int i = 0; i < this->pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pair(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntIntMap::ByteSize() const {
  int total_size = 0;
  
  // repeated .lapis.IntIntPair pair = 1;
  total_size += 1 * this->pair_size();
  for (int i = 0; i < this->pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pair(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntIntMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntIntMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntIntMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntIntMap::MergeFrom(const IntIntMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  pair_.MergeFrom(from.pair_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntIntMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntIntMap::CopyFrom(const IntIntMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntIntMap::IsInitialized() const {
  
  for (int i = 0; i < pair_size(); i++) {
    if (!this->pair(i).IsInitialized()) return false;
  }
  return true;
}

void IntIntMap::Swap(IntIntMap* other) {
  if (other != this) {
    pair_.Swap(&other->pair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntIntMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntIntMap_descriptor_;
  metadata.reflection = IntIntMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataStorageConfig::kTrainStoresFieldNumber;
const int DataStorageConfig::kValStoresFieldNumber;
const int DataStorageConfig::kTestStoresFieldNumber;
const int DataStorageConfig::kTablesFieldNumber;
#endif  // !_MSC_VER

DataStorageConfig::DataStorageConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataStorageConfig::InitAsDefaultInstance() {
  train_stores_ = const_cast< ::lapis::StringIntMap*>(&::lapis::StringIntMap::default_instance());
  val_stores_ = const_cast< ::lapis::StringIntMap*>(&::lapis::StringIntMap::default_instance());
  test_stores_ = const_cast< ::lapis::StringIntMap*>(&::lapis::StringIntMap::default_instance());
  tables_ = const_cast< ::lapis::IntIntMap*>(&::lapis::IntIntMap::default_instance());
}

DataStorageConfig::DataStorageConfig(const DataStorageConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataStorageConfig::SharedCtor() {
  _cached_size_ = 0;
  train_stores_ = NULL;
  val_stores_ = NULL;
  test_stores_ = NULL;
  tables_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataStorageConfig::~DataStorageConfig() {
  SharedDtor();
}

void DataStorageConfig::SharedDtor() {
  if (this != default_instance_) {
    delete train_stores_;
    delete val_stores_;
    delete test_stores_;
    delete tables_;
  }
}

void DataStorageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataStorageConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataStorageConfig_descriptor_;
}

const DataStorageConfig& DataStorageConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

DataStorageConfig* DataStorageConfig::default_instance_ = NULL;

DataStorageConfig* DataStorageConfig::New() const {
  return new DataStorageConfig;
}

void DataStorageConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_train_stores()) {
      if (train_stores_ != NULL) train_stores_->::lapis::StringIntMap::Clear();
    }
    if (has_val_stores()) {
      if (val_stores_ != NULL) val_stores_->::lapis::StringIntMap::Clear();
    }
    if (has_test_stores()) {
      if (test_stores_ != NULL) test_stores_->::lapis::StringIntMap::Clear();
    }
    if (has_tables()) {
      if (tables_ != NULL) tables_->::lapis::IntIntMap::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataStorageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lapis.StringIntMap train_stores = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_train_stores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_val_stores;
        break;
      }
      
      // optional .lapis.StringIntMap val_stores = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val_stores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_val_stores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_test_stores;
        break;
      }
      
      // optional .lapis.StringIntMap test_stores = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test_stores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test_stores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tables;
        break;
      }
      
      // optional .lapis.IntIntMap tables = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataStorageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .lapis.StringIntMap train_stores = 1;
  if (has_train_stores()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->train_stores(), output);
  }
  
  // optional .lapis.StringIntMap val_stores = 2;
  if (has_val_stores()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->val_stores(), output);
  }
  
  // optional .lapis.StringIntMap test_stores = 3;
  if (has_test_stores()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->test_stores(), output);
  }
  
  // optional .lapis.IntIntMap tables = 4;
  if (has_tables()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tables(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataStorageConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .lapis.StringIntMap train_stores = 1;
  if (has_train_stores()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->train_stores(), target);
  }
  
  // optional .lapis.StringIntMap val_stores = 2;
  if (has_val_stores()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->val_stores(), target);
  }
  
  // optional .lapis.StringIntMap test_stores = 3;
  if (has_test_stores()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->test_stores(), target);
  }
  
  // optional .lapis.IntIntMap tables = 4;
  if (has_tables()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tables(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataStorageConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .lapis.StringIntMap train_stores = 1;
    if (has_train_stores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->train_stores());
    }
    
    // optional .lapis.StringIntMap val_stores = 2;
    if (has_val_stores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->val_stores());
    }
    
    // optional .lapis.StringIntMap test_stores = 3;
    if (has_test_stores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test_stores());
    }
    
    // optional .lapis.IntIntMap tables = 4;
    if (has_tables()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tables());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataStorageConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataStorageConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataStorageConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataStorageConfig::MergeFrom(const DataStorageConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_train_stores()) {
      mutable_train_stores()->::lapis::StringIntMap::MergeFrom(from.train_stores());
    }
    if (from.has_val_stores()) {
      mutable_val_stores()->::lapis::StringIntMap::MergeFrom(from.val_stores());
    }
    if (from.has_test_stores()) {
      mutable_test_stores()->::lapis::StringIntMap::MergeFrom(from.test_stores());
    }
    if (from.has_tables()) {
      mutable_tables()->::lapis::IntIntMap::MergeFrom(from.tables());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataStorageConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataStorageConfig::CopyFrom(const DataStorageConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStorageConfig::IsInitialized() const {
  
  if (has_train_stores()) {
    if (!this->train_stores().IsInitialized()) return false;
  }
  if (has_val_stores()) {
    if (!this->val_stores().IsInitialized()) return false;
  }
  if (has_test_stores()) {
    if (!this->test_stores().IsInitialized()) return false;
  }
  if (has_tables()) {
    if (!this->tables().IsInitialized()) return false;
  }
  return true;
}

void DataStorageConfig::Swap(DataStorageConfig* other) {
  if (other != this) {
    std::swap(train_stores_, other->train_stores_);
    std::swap(val_stores_, other->val_stores_);
    std::swap(test_stores_, other->test_stores_);
    std::swap(tables_, other->tables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataStorageConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataStorageConfig_descriptor_;
  metadata.reflection = DataStorageConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParamStorageConfig::kParamStoresFieldNumber;
const int ParamStorageConfig::kTablesFieldNumber;
#endif  // !_MSC_VER

ParamStorageConfig::ParamStorageConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParamStorageConfig::InitAsDefaultInstance() {
  param_stores_ = const_cast< ::lapis::StringIntMap*>(&::lapis::StringIntMap::default_instance());
  tables_ = const_cast< ::lapis::IntIntMap*>(&::lapis::IntIntMap::default_instance());
}

ParamStorageConfig::ParamStorageConfig(const ParamStorageConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParamStorageConfig::SharedCtor() {
  _cached_size_ = 0;
  param_stores_ = NULL;
  tables_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParamStorageConfig::~ParamStorageConfig() {
  SharedDtor();
}

void ParamStorageConfig::SharedDtor() {
  if (this != default_instance_) {
    delete param_stores_;
    delete tables_;
  }
}

void ParamStorageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamStorageConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParamStorageConfig_descriptor_;
}

const ParamStorageConfig& ParamStorageConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

ParamStorageConfig* ParamStorageConfig::default_instance_ = NULL;

ParamStorageConfig* ParamStorageConfig::New() const {
  return new ParamStorageConfig;
}

void ParamStorageConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_param_stores()) {
      if (param_stores_ != NULL) param_stores_->::lapis::StringIntMap::Clear();
    }
    if (has_tables()) {
      if (tables_ != NULL) tables_->::lapis::IntIntMap::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParamStorageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lapis.StringIntMap param_stores = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param_stores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tables;
        break;
      }
      
      // optional .lapis.IntIntMap tables = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParamStorageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .lapis.StringIntMap param_stores = 1;
  if (has_param_stores()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->param_stores(), output);
  }
  
  // optional .lapis.IntIntMap tables = 2;
  if (has_tables()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tables(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParamStorageConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .lapis.StringIntMap param_stores = 1;
  if (has_param_stores()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->param_stores(), target);
  }
  
  // optional .lapis.IntIntMap tables = 2;
  if (has_tables()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tables(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParamStorageConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .lapis.StringIntMap param_stores = 1;
    if (has_param_stores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param_stores());
    }
    
    // optional .lapis.IntIntMap tables = 2;
    if (has_tables()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tables());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamStorageConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParamStorageConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParamStorageConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParamStorageConfig::MergeFrom(const ParamStorageConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param_stores()) {
      mutable_param_stores()->::lapis::StringIntMap::MergeFrom(from.param_stores());
    }
    if (from.has_tables()) {
      mutable_tables()->::lapis::IntIntMap::MergeFrom(from.tables());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParamStorageConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamStorageConfig::CopyFrom(const ParamStorageConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamStorageConfig::IsInitialized() const {
  
  if (has_param_stores()) {
    if (!this->param_stores().IsInitialized()) return false;
  }
  if (has_tables()) {
    if (!this->tables().IsInitialized()) return false;
  }
  return true;
}

void ParamStorageConfig::Swap(ParamStorageConfig* other) {
  if (other != this) {
    std::swap(param_stores_, other->param_stores_);
    std::swap(tables_, other->tables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParamStorageConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParamStorageConfig_descriptor_;
  metadata.reflection = ParamStorageConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DistributedStorageConfig::kDsconfigFieldNumber;
const int DistributedStorageConfig::kPsconfigFieldNumber;
#endif  // !_MSC_VER

DistributedStorageConfig::DistributedStorageConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DistributedStorageConfig::InitAsDefaultInstance() {
  dsconfig_ = const_cast< ::lapis::DataStorageConfig*>(&::lapis::DataStorageConfig::default_instance());
  psconfig_ = const_cast< ::lapis::ParamStorageConfig*>(&::lapis::ParamStorageConfig::default_instance());
}

DistributedStorageConfig::DistributedStorageConfig(const DistributedStorageConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DistributedStorageConfig::SharedCtor() {
  _cached_size_ = 0;
  dsconfig_ = NULL;
  psconfig_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DistributedStorageConfig::~DistributedStorageConfig() {
  SharedDtor();
}

void DistributedStorageConfig::SharedDtor() {
  if (this != default_instance_) {
    delete dsconfig_;
    delete psconfig_;
  }
}

void DistributedStorageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DistributedStorageConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DistributedStorageConfig_descriptor_;
}

const DistributedStorageConfig& DistributedStorageConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

DistributedStorageConfig* DistributedStorageConfig::default_instance_ = NULL;

DistributedStorageConfig* DistributedStorageConfig::New() const {
  return new DistributedStorageConfig;
}

void DistributedStorageConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dsconfig()) {
      if (dsconfig_ != NULL) dsconfig_->::lapis::DataStorageConfig::Clear();
    }
    if (has_psconfig()) {
      if (psconfig_ != NULL) psconfig_->::lapis::ParamStorageConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DistributedStorageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lapis.DataStorageConfig dsconfig = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dsconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_psconfig;
        break;
      }
      
      // optional .lapis.ParamStorageConfig psconfig = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_psconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DistributedStorageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .lapis.DataStorageConfig dsconfig = 1;
  if (has_dsconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dsconfig(), output);
  }
  
  // optional .lapis.ParamStorageConfig psconfig = 2;
  if (has_psconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->psconfig(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DistributedStorageConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .lapis.DataStorageConfig dsconfig = 1;
  if (has_dsconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dsconfig(), target);
  }
  
  // optional .lapis.ParamStorageConfig psconfig = 2;
  if (has_psconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->psconfig(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DistributedStorageConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .lapis.DataStorageConfig dsconfig = 1;
    if (has_dsconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dsconfig());
    }
    
    // optional .lapis.ParamStorageConfig psconfig = 2;
    if (has_psconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->psconfig());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistributedStorageConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DistributedStorageConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DistributedStorageConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DistributedStorageConfig::MergeFrom(const DistributedStorageConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dsconfig()) {
      mutable_dsconfig()->::lapis::DataStorageConfig::MergeFrom(from.dsconfig());
    }
    if (from.has_psconfig()) {
      mutable_psconfig()->::lapis::ParamStorageConfig::MergeFrom(from.psconfig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DistributedStorageConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistributedStorageConfig::CopyFrom(const DistributedStorageConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistributedStorageConfig::IsInitialized() const {
  
  if (has_dsconfig()) {
    if (!this->dsconfig().IsInitialized()) return false;
  }
  if (has_psconfig()) {
    if (!this->psconfig().IsInitialized()) return false;
  }
  return true;
}

void DistributedStorageConfig::Swap(DistributedStorageConfig* other) {
  if (other != this) {
    std::swap(dsconfig_, other->dsconfig_);
    std::swap(psconfig_, other->psconfig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DistributedStorageConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DistributedStorageConfig_descriptor_;
  metadata.reflection = DistributedStorageConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EmptyMessage::EmptyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmptyMessage::InitAsDefaultInstance() {
}

EmptyMessage::EmptyMessage(const EmptyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmptyMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyMessage::~EmptyMessage() {
  SharedDtor();
}

void EmptyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmptyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyMessage_descriptor_;
}

const EmptyMessage& EmptyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

EmptyMessage* EmptyMessage::default_instance_ = NULL;

EmptyMessage* EmptyMessage::New() const {
  return new EmptyMessage;
}

void EmptyMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmptyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EmptyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmptyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmptyMessage::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmptyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmptyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmptyMessage::MergeFrom(const EmptyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmptyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyMessage::CopyFrom(const EmptyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMessage::IsInitialized() const {
  
  return true;
}

void EmptyMessage::Swap(EmptyMessage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmptyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyMessage_descriptor_;
  metadata.reflection = EmptyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShortMsg::kStepFieldNumber;
const int ShortMsg::kAnswerFieldNumber;
#endif  // !_MSC_VER

ShortMsg::ShortMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShortMsg::InitAsDefaultInstance() {
}

ShortMsg::ShortMsg(const ShortMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShortMsg::SharedCtor() {
  _cached_size_ = 0;
  step_ = 0;
  answer_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShortMsg::~ShortMsg() {
  SharedDtor();
}

void ShortMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShortMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShortMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShortMsg_descriptor_;
}

const ShortMsg& ShortMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

ShortMsg* ShortMsg::default_instance_ = NULL;

ShortMsg* ShortMsg::New() const {
  return new ShortMsg;
}

void ShortMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    step_ = 0;
    answer_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShortMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 step = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_answer;
        break;
      }
      
      // optional bool answer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answer_)));
          set_has_answer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShortMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 step = 1;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->step(), output);
  }
  
  // optional bool answer = 2;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->answer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShortMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 step = 1;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->step(), target);
  }
  
  // optional bool answer = 2;
  if (has_answer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->answer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShortMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 step = 1;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }
    
    // optional bool answer = 2;
    if (has_answer()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShortMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShortMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShortMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShortMsg::MergeFrom(const ShortMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_answer()) {
      set_answer(from.answer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShortMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShortMsg::CopyFrom(const ShortMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShortMsg::IsInitialized() const {
  
  return true;
}

void ShortMsg::Swap(ShortMsg* other) {
  if (other != this) {
    std::swap(step_, other->step_);
    std::swap(answer_, other->answer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShortMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShortMsg_descriptor_;
  metadata.reflection = ShortMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Arg::kKeyFieldNumber;
const int Arg::kValueFieldNumber;
#endif  // !_MSC_VER

Arg::Arg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Arg::InitAsDefaultInstance() {
}

Arg::Arg(const Arg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Arg::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Arg::~Arg() {
  SharedDtor();
}

void Arg::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Arg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Arg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Arg_descriptor_;
}

const Arg& Arg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

Arg* Arg::default_instance_ = NULL;

Arg* Arg::New() const {
  return new Arg;
}

void Arg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Arg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Arg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(), output);
  }
  
  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Arg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }
  
  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Arg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Arg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Arg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Arg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Arg::MergeFrom(const Arg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Arg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Arg::CopyFrom(const Arg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Arg::Swap(Arg* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Arg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Arg_descriptor_;
  metadata.reflection = Arg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Args::kParamFieldNumber;
#endif  // !_MSC_VER

Args::Args()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Args::InitAsDefaultInstance() {
}

Args::Args(const Args& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Args::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Args::~Args() {
  SharedDtor();
}

void Args::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Args::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Args::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Args_descriptor_;
}

const Args& Args::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

Args* Args::default_instance_ = NULL;

Args* Args::New() const {
  return new Args;
}

void Args::Clear() {
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Args::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lapis.Arg param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Args::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lapis.Arg param = 1;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->param(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Args::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lapis.Arg param = 1;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->param(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Args::ByteSize() const {
  int total_size = 0;
  
  // repeated .lapis.Arg param = 1;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Args::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Args* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Args*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Args::MergeFrom(const Args& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Args::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Args::CopyFrom(const Args& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Args::IsInitialized() const {
  
  for (int i = 0; i < param_size(); i++) {
    if (!this->param(i).IsInitialized()) return false;
  }
  return true;
}

void Args::Swap(Args* other) {
  if (other != this) {
    param_.Swap(&other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Args::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Args_descriptor_;
  metadata.reflection = Args_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileParams::kAttrFieldNumber;
const int FileParams::kCompressionFieldNumber;
#endif  // !_MSC_VER

FileParams::FileParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileParams::InitAsDefaultInstance() {
}

FileParams::FileParams(const FileParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileParams::SharedCtor() {
  _cached_size_ = 0;
  compression_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileParams::~FileParams() {
  SharedDtor();
}

void FileParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileParams_descriptor_;
}

const FileParams& FileParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

FileParams* FileParams::default_instance_ = NULL;

FileParams* FileParams::New() const {
  return new FileParams;
}

void FileParams::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    compression_ = 0;
  }
  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lapis.Arg attr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attr;
        if (input->ExpectTag(16)) goto parse_compression;
        break;
      }
      
      // optional int32 compression = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compression:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compression_)));
          set_has_compression();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lapis.Arg attr = 1;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attr(i), output);
  }
  
  // optional int32 compression = 2 [default = 0];
  if (has_compression()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->compression(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lapis.Arg attr = 1;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attr(i), target);
  }
  
  // optional int32 compression = 2 [default = 0];
  if (has_compression()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->compression(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileParams::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 compression = 2 [default = 0];
    if (has_compression()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compression());
    }
    
  }
  // repeated .lapis.Arg attr = 1;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileParams::MergeFrom(const FileParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_compression()) {
      set_compression(from.compression());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileParams::CopyFrom(const FileParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileParams::IsInitialized() const {
  
  for (int i = 0; i < attr_size(); i++) {
    if (!this->attr(i).IsInitialized()) return false;
  }
  return true;
}

void FileParams::Swap(FileParams* other) {
  if (other != this) {
    attr_.Swap(&other->attr_);
    std::swap(compression_, other->compression_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileParams_descriptor_;
  metadata.reflection = FileParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfigData::kNumWorkersFieldNumber;
const int ConfigData::kWorkerIdFieldNumber;
const int ConfigData::kMasterIdFieldNumber;
#endif  // !_MSC_VER

ConfigData::ConfigData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConfigData::InitAsDefaultInstance() {
}

ConfigData::ConfigData(const ConfigData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConfigData::SharedCtor() {
  _cached_size_ = 0;
  num_workers_ = 0;
  worker_id_ = 0;
  master_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigData::~ConfigData() {
  SharedDtor();
}

void ConfigData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConfigData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigData_descriptor_;
}

const ConfigData& ConfigData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

ConfigData* ConfigData::default_instance_ = NULL;

ConfigData* ConfigData::New() const {
  return new ConfigData;
}

void ConfigData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_workers_ = 0;
    worker_id_ = 0;
    master_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num_workers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_workers_)));
          set_has_num_workers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_worker_id;
        break;
      }
      
      // required int32 worker_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worker_id_)));
          set_has_worker_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_master_id;
        break;
      }
      
      // required int32 master_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_master_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &master_id_)));
          set_has_master_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfigData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num_workers = 1;
  if (has_num_workers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_workers(), output);
  }
  
  // required int32 worker_id = 2;
  if (has_worker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->worker_id(), output);
  }
  
  // required int32 master_id = 3;
  if (has_master_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->master_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConfigData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num_workers = 1;
  if (has_num_workers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_workers(), target);
  }
  
  // required int32 worker_id = 2;
  if (has_worker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->worker_id(), target);
  }
  
  // required int32 master_id = 3;
  if (has_master_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->master_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConfigData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num_workers = 1;
    if (has_num_workers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_workers());
    }
    
    // required int32 worker_id = 2;
    if (has_worker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worker_id());
    }
    
    // required int32 master_id = 3;
    if (has_master_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->master_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigData::MergeFrom(const ConfigData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_workers()) {
      set_num_workers(from.num_workers());
    }
    if (from.has_worker_id()) {
      set_worker_id(from.worker_id());
    }
    if (from.has_master_id()) {
      set_master_id(from.master_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigData::CopyFrom(const ConfigData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ConfigData::Swap(ConfigData* other) {
  if (other != this) {
    std::swap(num_workers_, other->num_workers_);
    std::swap(worker_id_, other->worker_id_);
    std::swap(master_id_, other->master_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigData_descriptor_;
  metadata.reflection = ConfigData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lapis

// @@protoc_insertion_point(global_scope)
