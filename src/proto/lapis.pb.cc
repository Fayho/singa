// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lapis.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lapis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lapis {

namespace {

const ::google::protobuf::Descriptor* SystemConfProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemConfProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lapis_2eproto() {
  protobuf_AddDesc_lapis_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lapis.proto");
  GOOGLE_CHECK(file != NULL);
  SystemConfProto_descriptor_ = file->message_type(0);
  static const int SystemConfProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemConfProto, coordinator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemConfProto, worker_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemConfProto, worker_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemConfProto, memory_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemConfProto, memory_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemConfProto, disk_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemConfProto, disk_end_),
  };
  SystemConfProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemConfProto_descriptor_,
      SystemConfProto::default_instance_,
      SystemConfProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemConfProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemConfProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemConfProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lapis_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemConfProto_descriptor_, &SystemConfProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lapis_2eproto() {
  delete SystemConfProto::default_instance_;
  delete SystemConfProto_reflection_;
}

void protobuf_AddDesc_lapis_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013lapis.proto\022\005lapis\"\240\001\n\017SystemConfProto"
    "\022\023\n\013coordinator\030\001 \002(\005\022\024\n\014worker_start\030\002 "
    "\002(\005\022\022\n\nworker_end\030\003 \002(\005\022\024\n\014memory_start\030"
    "\004 \001(\005\022\022\n\nmemory_end\030\005 \001(\005\022\022\n\ndisk_start\030"
    "\006 \001(\005\022\020\n\010disk_end\030\007 \001(\005", 183);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lapis.proto", &protobuf_RegisterTypes);
  SystemConfProto::default_instance_ = new SystemConfProto();
  SystemConfProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lapis_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lapis_2eproto {
  StaticDescriptorInitializer_lapis_2eproto() {
    protobuf_AddDesc_lapis_2eproto();
  }
} static_descriptor_initializer_lapis_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SystemConfProto::kCoordinatorFieldNumber;
const int SystemConfProto::kWorkerStartFieldNumber;
const int SystemConfProto::kWorkerEndFieldNumber;
const int SystemConfProto::kMemoryStartFieldNumber;
const int SystemConfProto::kMemoryEndFieldNumber;
const int SystemConfProto::kDiskStartFieldNumber;
const int SystemConfProto::kDiskEndFieldNumber;
#endif  // !_MSC_VER

SystemConfProto::SystemConfProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemConfProto::InitAsDefaultInstance() {
}

SystemConfProto::SystemConfProto(const SystemConfProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemConfProto::SharedCtor() {
  _cached_size_ = 0;
  coordinator_ = 0;
  worker_start_ = 0;
  worker_end_ = 0;
  memory_start_ = 0;
  memory_end_ = 0;
  disk_start_ = 0;
  disk_end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemConfProto::~SystemConfProto() {
  SharedDtor();
}

void SystemConfProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SystemConfProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemConfProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemConfProto_descriptor_;
}

const SystemConfProto& SystemConfProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lapis_2eproto();
  return *default_instance_;
}

SystemConfProto* SystemConfProto::default_instance_ = NULL;

SystemConfProto* SystemConfProto::New() const {
  return new SystemConfProto;
}

void SystemConfProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coordinator_ = 0;
    worker_start_ = 0;
    worker_end_ = 0;
    memory_start_ = 0;
    memory_end_ = 0;
    disk_start_ = 0;
    disk_end_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemConfProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 coordinator = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coordinator_)));
          set_has_coordinator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_worker_start;
        break;
      }

      // required int32 worker_start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worker_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worker_start_)));
          set_has_worker_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_worker_end;
        break;
      }

      // required int32 worker_end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worker_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worker_end_)));
          set_has_worker_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_memory_start;
        break;
      }

      // optional int32 memory_start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memory_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memory_start_)));
          set_has_memory_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_memory_end;
        break;
      }

      // optional int32 memory_end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memory_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memory_end_)));
          set_has_memory_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_disk_start;
        break;
      }

      // optional int32 disk_start = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disk_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disk_start_)));
          set_has_disk_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_disk_end;
        break;
      }

      // optional int32 disk_end = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disk_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disk_end_)));
          set_has_disk_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemConfProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 coordinator = 1;
  if (has_coordinator()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->coordinator(), output);
  }

  // required int32 worker_start = 2;
  if (has_worker_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->worker_start(), output);
  }

  // required int32 worker_end = 3;
  if (has_worker_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->worker_end(), output);
  }

  // optional int32 memory_start = 4;
  if (has_memory_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->memory_start(), output);
  }

  // optional int32 memory_end = 5;
  if (has_memory_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->memory_end(), output);
  }

  // optional int32 disk_start = 6;
  if (has_disk_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->disk_start(), output);
  }

  // optional int32 disk_end = 7;
  if (has_disk_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->disk_end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemConfProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 coordinator = 1;
  if (has_coordinator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->coordinator(), target);
  }

  // required int32 worker_start = 2;
  if (has_worker_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->worker_start(), target);
  }

  // required int32 worker_end = 3;
  if (has_worker_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->worker_end(), target);
  }

  // optional int32 memory_start = 4;
  if (has_memory_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->memory_start(), target);
  }

  // optional int32 memory_end = 5;
  if (has_memory_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->memory_end(), target);
  }

  // optional int32 disk_start = 6;
  if (has_disk_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->disk_start(), target);
  }

  // optional int32 disk_end = 7;
  if (has_disk_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->disk_end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemConfProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 coordinator = 1;
    if (has_coordinator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coordinator());
    }

    // required int32 worker_start = 2;
    if (has_worker_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worker_start());
    }

    // required int32 worker_end = 3;
    if (has_worker_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worker_end());
    }

    // optional int32 memory_start = 4;
    if (has_memory_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memory_start());
    }

    // optional int32 memory_end = 5;
    if (has_memory_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memory_end());
    }

    // optional int32 disk_start = 6;
    if (has_disk_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->disk_start());
    }

    // optional int32 disk_end = 7;
    if (has_disk_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->disk_end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemConfProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemConfProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemConfProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemConfProto::MergeFrom(const SystemConfProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coordinator()) {
      set_coordinator(from.coordinator());
    }
    if (from.has_worker_start()) {
      set_worker_start(from.worker_start());
    }
    if (from.has_worker_end()) {
      set_worker_end(from.worker_end());
    }
    if (from.has_memory_start()) {
      set_memory_start(from.memory_start());
    }
    if (from.has_memory_end()) {
      set_memory_end(from.memory_end());
    }
    if (from.has_disk_start()) {
      set_disk_start(from.disk_start());
    }
    if (from.has_disk_end()) {
      set_disk_end(from.disk_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemConfProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemConfProto::CopyFrom(const SystemConfProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemConfProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SystemConfProto::Swap(SystemConfProto* other) {
  if (other != this) {
    std::swap(coordinator_, other->coordinator_);
    std::swap(worker_start_, other->worker_start_);
    std::swap(worker_end_, other->worker_end_);
    std::swap(memory_start_, other->memory_start_);
    std::swap(memory_end_, other->memory_end_);
    std::swap(disk_start_, other->disk_start_);
    std::swap(disk_end_, other->disk_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemConfProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemConfProto_descriptor_;
  metadata.reflection = SystemConfProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lapis

// @@protoc_insertion_point(global_scope)
