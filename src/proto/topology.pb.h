// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: topology.proto

#ifndef PROTOBUF_topology_2eproto__INCLUDED
#define PROTOBUF_topology_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace singa {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_topology_2eproto();
void protobuf_AssignDesc_topology_2eproto();
void protobuf_ShutdownFile_topology_2eproto();

class Topology;

// ===================================================================

class Topology : public ::google::protobuf::Message {
 public:
  Topology();
  virtual ~Topology();

  Topology(const Topology& from);

  inline Topology& operator=(const Topology& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Topology& default_instance();

  void Swap(Topology* other);

  // implements Message ----------------------------------------------

  Topology* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Topology& from);
  void MergeFrom(const Topology& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 nservers = 2;
  inline bool has_nservers() const;
  inline void clear_nservers();
  static const int kNserversFieldNumber = 2;
  inline ::google::protobuf::int32 nservers() const;
  inline void set_nservers(::google::protobuf::int32 value);

  // required int32 nworker_groups = 3;
  inline bool has_nworker_groups() const;
  inline void clear_nworker_groups();
  static const int kNworkerGroupsFieldNumber = 3;
  inline ::google::protobuf::int32 nworker_groups() const;
  inline void set_nworker_groups(::google::protobuf::int32 value);

  // repeated int32 nserver_groups = 4;
  inline int nserver_groups_size() const;
  inline void clear_nserver_groups();
  static const int kNserverGroupsFieldNumber = 4;
  inline ::google::protobuf::int32 nserver_groups(int index) const;
  inline void set_nserver_groups(int index, ::google::protobuf::int32 value);
  inline void add_nserver_groups(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nserver_groups() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nserver_groups();

  // required int32 port = 6;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 6;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // required int32 server_threads = 7;
  inline bool has_server_threads() const;
  inline void clear_server_threads();
  static const int kServerThreadsFieldNumber = 7;
  inline ::google::protobuf::int32 server_threads() const;
  inline void set_server_threads(::google::protobuf::int32 value);

  // required int32 worker_threads = 8;
  inline bool has_worker_threads() const;
  inline void clear_worker_threads();
  static const int kWorkerThreadsFieldNumber = 8;
  inline ::google::protobuf::int32 worker_threads() const;
  inline void set_worker_threads(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:singa.Topology)
 private:
  inline void set_has_nservers();
  inline void clear_has_nservers();
  inline void set_has_nworker_groups();
  inline void clear_has_nworker_groups();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_server_threads();
  inline void clear_has_server_threads();
  inline void set_has_worker_threads();
  inline void clear_has_worker_threads();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 nservers_;
  ::google::protobuf::int32 nworker_groups_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nserver_groups_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 server_threads_;
  ::google::protobuf::int32 worker_threads_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_topology_2eproto();
  friend void protobuf_AssignDesc_topology_2eproto();
  friend void protobuf_ShutdownFile_topology_2eproto();

  void InitAsDefaultInstance();
  static Topology* default_instance_;
};
// ===================================================================


// ===================================================================

// Topology

// required int32 nservers = 2;
inline bool Topology::has_nservers() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Topology::set_has_nservers() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Topology::clear_has_nservers() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Topology::clear_nservers() {
  nservers_ = 0;
  clear_has_nservers();
}
inline ::google::protobuf::int32 Topology::nservers() const {
  return nservers_;
}
inline void Topology::set_nservers(::google::protobuf::int32 value) {
  set_has_nservers();
  nservers_ = value;
}

// required int32 nworker_groups = 3;
inline bool Topology::has_nworker_groups() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Topology::set_has_nworker_groups() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Topology::clear_has_nworker_groups() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Topology::clear_nworker_groups() {
  nworker_groups_ = 0;
  clear_has_nworker_groups();
}
inline ::google::protobuf::int32 Topology::nworker_groups() const {
  return nworker_groups_;
}
inline void Topology::set_nworker_groups(::google::protobuf::int32 value) {
  set_has_nworker_groups();
  nworker_groups_ = value;
}

// repeated int32 nserver_groups = 4;
inline int Topology::nserver_groups_size() const {
  return nserver_groups_.size();
}
inline void Topology::clear_nserver_groups() {
  nserver_groups_.Clear();
}
inline ::google::protobuf::int32 Topology::nserver_groups(int index) const {
  return nserver_groups_.Get(index);
}
inline void Topology::set_nserver_groups(int index, ::google::protobuf::int32 value) {
  nserver_groups_.Set(index, value);
}
inline void Topology::add_nserver_groups(::google::protobuf::int32 value) {
  nserver_groups_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Topology::nserver_groups() const {
  return nserver_groups_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Topology::mutable_nserver_groups() {
  return &nserver_groups_;
}

// required int32 port = 6;
inline bool Topology::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Topology::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Topology::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Topology::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Topology::port() const {
  return port_;
}
inline void Topology::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// required int32 server_threads = 7;
inline bool Topology::has_server_threads() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Topology::set_has_server_threads() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Topology::clear_has_server_threads() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Topology::clear_server_threads() {
  server_threads_ = 0;
  clear_has_server_threads();
}
inline ::google::protobuf::int32 Topology::server_threads() const {
  return server_threads_;
}
inline void Topology::set_server_threads(::google::protobuf::int32 value) {
  set_has_server_threads();
  server_threads_ = value;
}

// required int32 worker_threads = 8;
inline bool Topology::has_worker_threads() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Topology::set_has_worker_threads() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Topology::clear_has_worker_threads() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Topology::clear_worker_threads() {
  worker_threads_ = 0;
  clear_has_worker_threads();
}
inline ::google::protobuf::int32 Topology::worker_threads() const {
  return worker_threads_;
}
inline void Topology::set_worker_threads(::google::protobuf::int32 value) {
  set_has_worker_threads();
  worker_threads_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace singa

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_topology_2eproto__INCLUDED
