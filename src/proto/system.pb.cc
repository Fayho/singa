// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "system.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lapis {

namespace {

const ::google::protobuf::Descriptor* SystemProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_system_2eproto() {
  protobuf_AddDesc_system_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "system.proto");
  GOOGLE_CHECK(file != NULL);
  SystemProto_descriptor_ = file->message_type(0);
  static const int SystemProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemProto, table_server_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemProto, table_server_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemProto, standalone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemProto, synchronous_),
  };
  SystemProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemProto_descriptor_,
      SystemProto::default_instance_,
      SystemProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_system_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemProto_descriptor_, &SystemProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_system_2eproto() {
  delete SystemProto::default_instance_;
  delete SystemProto_reflection_;
}

void protobuf_AddDesc_system_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014system.proto\022\005lapis\"x\n\013SystemProto\022\032\n\022"
    "table_server_start\030\001 \001(\005\022\030\n\020table_server"
    "_end\030\002 \001(\005\022\030\n\nstandalone\030\003 \001(\010:\004true\022\031\n\013"
    "synchronous\030\004 \001(\010:\004true", 143);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "system.proto", &protobuf_RegisterTypes);
  SystemProto::default_instance_ = new SystemProto();
  SystemProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_system_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_system_2eproto {
  StaticDescriptorInitializer_system_2eproto() {
    protobuf_AddDesc_system_2eproto();
  }
} static_descriptor_initializer_system_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SystemProto::kTableServerStartFieldNumber;
const int SystemProto::kTableServerEndFieldNumber;
const int SystemProto::kStandaloneFieldNumber;
const int SystemProto::kSynchronousFieldNumber;
#endif  // !_MSC_VER

SystemProto::SystemProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.SystemProto)
}

void SystemProto::InitAsDefaultInstance() {
}

SystemProto::SystemProto(const SystemProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.SystemProto)
}

void SystemProto::SharedCtor() {
  _cached_size_ = 0;
  table_server_start_ = 0;
  table_server_end_ = 0;
  standalone_ = true;
  synchronous_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProto::~SystemProto() {
  // @@protoc_insertion_point(destructor:lapis.SystemProto)
  SharedDtor();
}

void SystemProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SystemProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemProto_descriptor_;
}

const SystemProto& SystemProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
  return *default_instance_;
}

SystemProto* SystemProto::default_instance_ = NULL;

SystemProto* SystemProto::New() const {
  return new SystemProto;
}

void SystemProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SystemProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(table_server_start_, table_server_end_);
    standalone_ = true;
    synchronous_ = true;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.SystemProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 table_server_start = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_server_start_)));
          set_has_table_server_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_table_server_end;
        break;
      }

      // optional int32 table_server_end = 2;
      case 2: {
        if (tag == 16) {
         parse_table_server_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_server_end_)));
          set_has_table_server_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_standalone;
        break;
      }

      // optional bool standalone = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_standalone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &standalone_)));
          set_has_standalone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_synchronous;
        break;
      }

      // optional bool synchronous = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_synchronous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &synchronous_)));
          set_has_synchronous();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.SystemProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.SystemProto)
  return false;
#undef DO_
}

void SystemProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.SystemProto)
  // optional int32 table_server_start = 1;
  if (has_table_server_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->table_server_start(), output);
  }

  // optional int32 table_server_end = 2;
  if (has_table_server_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->table_server_end(), output);
  }

  // optional bool standalone = 3 [default = true];
  if (has_standalone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->standalone(), output);
  }

  // optional bool synchronous = 4 [default = true];
  if (has_synchronous()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->synchronous(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.SystemProto)
}

::google::protobuf::uint8* SystemProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.SystemProto)
  // optional int32 table_server_start = 1;
  if (has_table_server_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->table_server_start(), target);
  }

  // optional int32 table_server_end = 2;
  if (has_table_server_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->table_server_end(), target);
  }

  // optional bool standalone = 3 [default = true];
  if (has_standalone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->standalone(), target);
  }

  // optional bool synchronous = 4 [default = true];
  if (has_synchronous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->synchronous(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.SystemProto)
  return target;
}

int SystemProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 table_server_start = 1;
    if (has_table_server_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_server_start());
    }

    // optional int32 table_server_end = 2;
    if (has_table_server_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_server_end());
    }

    // optional bool standalone = 3 [default = true];
    if (has_standalone()) {
      total_size += 1 + 1;
    }

    // optional bool synchronous = 4 [default = true];
    if (has_synchronous()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemProto::MergeFrom(const SystemProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_server_start()) {
      set_table_server_start(from.table_server_start());
    }
    if (from.has_table_server_end()) {
      set_table_server_end(from.table_server_end());
    }
    if (from.has_standalone()) {
      set_standalone(from.standalone());
    }
    if (from.has_synchronous()) {
      set_synchronous(from.synchronous());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemProto::CopyFrom(const SystemProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto::IsInitialized() const {

  return true;
}

void SystemProto::Swap(SystemProto* other) {
  if (other != this) {
    std::swap(table_server_start_, other->table_server_start_);
    std::swap(table_server_end_, other->table_server_end_);
    std::swap(standalone_, other->standalone_);
    std::swap(synchronous_, other->synchronous_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemProto_descriptor_;
  metadata.reflection = SystemProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lapis

// @@protoc_insertion_point(global_scope)
