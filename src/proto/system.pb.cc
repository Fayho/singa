// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "system.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lapis {

namespace {

const ::google::protobuf::Descriptor* GroupConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClusterConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_system_2eproto() {
  protobuf_AddDesc_system_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "system.proto");
  GOOGLE_CHECK(file != NULL);
  GroupConfig_descriptor_ = file->message_type(0);
  static const int GroupConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, leader_),
  };
  GroupConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupConfig_descriptor_,
      GroupConfig::default_instance_,
      GroupConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupConfig));
  ClusterConfig_descriptor_ = file->message_type(1);
  static const int ClusterConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, server_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, server_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, shard_folder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, hdfs_folder_),
  };
  ClusterConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClusterConfig_descriptor_,
      ClusterConfig::default_instance_,
      ClusterConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClusterConfig));
  SystemProto_descriptor_ = file->message_type(2);
  static const int SystemProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemProto, cluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemProto, standalone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemProto, synchronous_),
  };
  SystemProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemProto_descriptor_,
      SystemProto::default_instance_,
      SystemProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_system_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupConfig_descriptor_, &GroupConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClusterConfig_descriptor_, &ClusterConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemProto_descriptor_, &SystemProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_system_2eproto() {
  delete GroupConfig::default_instance_;
  delete GroupConfig_reflection_;
  delete ClusterConfig::default_instance_;
  delete ClusterConfig_reflection_;
  delete ClusterConfig::_default_shard_folder_;
  delete ClusterConfig::_default_hdfs_folder_;
  delete SystemProto::default_instance_;
  delete SystemProto_reflection_;
}

void protobuf_AddDesc_system_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014system.proto\022\005lapis\"9\n\013GroupConfig\022\r\n\005"
    "start\030\001 \001(\005\022\013\n\003end\030\002 \001(\005\022\016\n\006leader\030\003 \001(\005"
    "\"\256\001\n\rClusterConfig\022\024\n\014server_start\030\001 \001(\005"
    "\022\022\n\nserver_end\030\002 \001(\005\022!\n\005group\030\003 \003(\0132\022.la"
    "pis.GroupConfig\022*\n\014shard_folder\030\004 \001(\t:\024/"
    "data1/wangwei/lapis\022$\n\013hdfs_folder\030\005 \001(\t"
    ":\017/users/wangwei/\"i\n\013SystemProto\022%\n\007clus"
    "ter\030\001 \001(\0132\024.lapis.ClusterConfig\022\030\n\nstand"
    "alone\030\003 \001(\010:\004true\022\031\n\013synchronous\030\004 \001(\010:\004"
    "true", 364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "system.proto", &protobuf_RegisterTypes);
  GroupConfig::default_instance_ = new GroupConfig();
  ClusterConfig::_default_shard_folder_ =
      new ::std::string("/data1/wangwei/lapis", 20);
  ClusterConfig::_default_hdfs_folder_ =
      new ::std::string("/users/wangwei/", 15);
  ClusterConfig::default_instance_ = new ClusterConfig();
  SystemProto::default_instance_ = new SystemProto();
  GroupConfig::default_instance_->InitAsDefaultInstance();
  ClusterConfig::default_instance_->InitAsDefaultInstance();
  SystemProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_system_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_system_2eproto {
  StaticDescriptorInitializer_system_2eproto() {
    protobuf_AddDesc_system_2eproto();
  }
} static_descriptor_initializer_system_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GroupConfig::kStartFieldNumber;
const int GroupConfig::kEndFieldNumber;
const int GroupConfig::kLeaderFieldNumber;
#endif  // !_MSC_VER

GroupConfig::GroupConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupConfig::InitAsDefaultInstance() {
}

GroupConfig::GroupConfig(const GroupConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupConfig::SharedCtor() {
  _cached_size_ = 0;
  start_ = 0;
  end_ = 0;
  leader_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupConfig::~GroupConfig() {
  SharedDtor();
}

void GroupConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupConfig_descriptor_;
}

const GroupConfig& GroupConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
  return *default_instance_;
}

GroupConfig* GroupConfig::default_instance_ = NULL;

GroupConfig* GroupConfig::New() const {
  return new GroupConfig;
}

void GroupConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_ = 0;
    end_ = 0;
    leader_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }

      // optional int32 end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leader;
        break;
      }

      // optional int32 leader = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->start(), output);
  }

  // optional int32 end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end(), output);
  }

  // optional int32 leader = 3;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->start(), target);
  }

  // optional int32 end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end(), target);
  }

  // optional int32 leader = 3;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->leader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start());
    }

    // optional int32 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end());
    }

    // optional int32 leader = 3;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leader());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupConfig::MergeFrom(const GroupConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupConfig::CopyFrom(const GroupConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupConfig::IsInitialized() const {

  return true;
}

void GroupConfig::Swap(GroupConfig* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(leader_, other->leader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupConfig_descriptor_;
  metadata.reflection = GroupConfig_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ClusterConfig::_default_shard_folder_ = NULL;
::std::string* ClusterConfig::_default_hdfs_folder_ = NULL;
#ifndef _MSC_VER
const int ClusterConfig::kServerStartFieldNumber;
const int ClusterConfig::kServerEndFieldNumber;
const int ClusterConfig::kGroupFieldNumber;
const int ClusterConfig::kShardFolderFieldNumber;
const int ClusterConfig::kHdfsFolderFieldNumber;
#endif  // !_MSC_VER

ClusterConfig::ClusterConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClusterConfig::InitAsDefaultInstance() {
}

ClusterConfig::ClusterConfig(const ClusterConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClusterConfig::SharedCtor() {
  _cached_size_ = 0;
  server_start_ = 0;
  server_end_ = 0;
  shard_folder_ = const_cast< ::std::string*>(_default_shard_folder_);
  hdfs_folder_ = const_cast< ::std::string*>(_default_hdfs_folder_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClusterConfig::~ClusterConfig() {
  SharedDtor();
}

void ClusterConfig::SharedDtor() {
  if (shard_folder_ != _default_shard_folder_) {
    delete shard_folder_;
  }
  if (hdfs_folder_ != _default_hdfs_folder_) {
    delete hdfs_folder_;
  }
  if (this != default_instance_) {
  }
}

void ClusterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterConfig_descriptor_;
}

const ClusterConfig& ClusterConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
  return *default_instance_;
}

ClusterConfig* ClusterConfig::default_instance_ = NULL;

ClusterConfig* ClusterConfig::New() const {
  return new ClusterConfig;
}

void ClusterConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_start_ = 0;
    server_end_ = 0;
    if (has_shard_folder()) {
      if (shard_folder_ != _default_shard_folder_) {
        shard_folder_->assign(*_default_shard_folder_);
      }
    }
    if (has_hdfs_folder()) {
      if (hdfs_folder_ != _default_hdfs_folder_) {
        hdfs_folder_->assign(*_default_hdfs_folder_);
      }
    }
  }
  group_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClusterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 server_start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_start_)));
          set_has_server_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_end;
        break;
      }

      // optional int32 server_end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_end_)));
          set_has_server_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_group;
        break;
      }

      // repeated .lapis.GroupConfig group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_group;
        if (input->ExpectTag(34)) goto parse_shard_folder;
        break;
      }

      // optional string shard_folder = 4 [default = "/data1/wangwei/lapis"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shard_folder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shard_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shard_folder().data(), this->shard_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_hdfs_folder;
        break;
      }

      // optional string hdfs_folder = 5 [default = "/users/wangwei/"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hdfs_folder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hdfs_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hdfs_folder().data(), this->hdfs_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClusterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 server_start = 1;
  if (has_server_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_start(), output);
  }

  // optional int32 server_end = 2;
  if (has_server_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_end(), output);
  }

  // repeated .lapis.GroupConfig group = 3;
  for (int i = 0; i < this->group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->group(i), output);
  }

  // optional string shard_folder = 4 [default = "/data1/wangwei/lapis"];
  if (has_shard_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shard_folder().data(), this->shard_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->shard_folder(), output);
  }

  // optional string hdfs_folder = 5 [default = "/users/wangwei/"];
  if (has_hdfs_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hdfs_folder().data(), this->hdfs_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->hdfs_folder(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClusterConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 server_start = 1;
  if (has_server_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_start(), target);
  }

  // optional int32 server_end = 2;
  if (has_server_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_end(), target);
  }

  // repeated .lapis.GroupConfig group = 3;
  for (int i = 0; i < this->group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->group(i), target);
  }

  // optional string shard_folder = 4 [default = "/data1/wangwei/lapis"];
  if (has_shard_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shard_folder().data(), this->shard_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->shard_folder(), target);
  }

  // optional string hdfs_folder = 5 [default = "/users/wangwei/"];
  if (has_hdfs_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hdfs_folder().data(), this->hdfs_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->hdfs_folder(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClusterConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 server_start = 1;
    if (has_server_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_start());
    }

    // optional int32 server_end = 2;
    if (has_server_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_end());
    }

    // optional string shard_folder = 4 [default = "/data1/wangwei/lapis"];
    if (has_shard_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shard_folder());
    }

    // optional string hdfs_folder = 5 [default = "/users/wangwei/"];
    if (has_hdfs_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hdfs_folder());
    }

  }
  // repeated .lapis.GroupConfig group = 3;
  total_size += 1 * this->group_size();
  for (int i = 0; i < this->group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClusterConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClusterConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClusterConfig::MergeFrom(const ClusterConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_.MergeFrom(from.group_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_start()) {
      set_server_start(from.server_start());
    }
    if (from.has_server_end()) {
      set_server_end(from.server_end());
    }
    if (from.has_shard_folder()) {
      set_shard_folder(from.shard_folder());
    }
    if (from.has_hdfs_folder()) {
      set_hdfs_folder(from.hdfs_folder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClusterConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterConfig::CopyFrom(const ClusterConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterConfig::IsInitialized() const {

  return true;
}

void ClusterConfig::Swap(ClusterConfig* other) {
  if (other != this) {
    std::swap(server_start_, other->server_start_);
    std::swap(server_end_, other->server_end_);
    group_.Swap(&other->group_);
    std::swap(shard_folder_, other->shard_folder_);
    std::swap(hdfs_folder_, other->hdfs_folder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClusterConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterConfig_descriptor_;
  metadata.reflection = ClusterConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemProto::kClusterFieldNumber;
const int SystemProto::kStandaloneFieldNumber;
const int SystemProto::kSynchronousFieldNumber;
#endif  // !_MSC_VER

SystemProto::SystemProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemProto::InitAsDefaultInstance() {
  cluster_ = const_cast< ::lapis::ClusterConfig*>(&::lapis::ClusterConfig::default_instance());
}

SystemProto::SystemProto(const SystemProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemProto::SharedCtor() {
  _cached_size_ = 0;
  cluster_ = NULL;
  standalone_ = true;
  synchronous_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProto::~SystemProto() {
  SharedDtor();
}

void SystemProto::SharedDtor() {
  if (this != default_instance_) {
    delete cluster_;
  }
}

void SystemProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemProto_descriptor_;
}

const SystemProto& SystemProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_system_2eproto();
  return *default_instance_;
}

SystemProto* SystemProto::default_instance_ = NULL;

SystemProto* SystemProto::New() const {
  return new SystemProto;
}

void SystemProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cluster()) {
      if (cluster_ != NULL) cluster_->::lapis::ClusterConfig::Clear();
    }
    standalone_ = true;
    synchronous_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lapis.ClusterConfig cluster = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_standalone;
        break;
      }

      // optional bool standalone = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_standalone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &standalone_)));
          set_has_standalone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_synchronous;
        break;
      }

      // optional bool synchronous = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_synchronous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &synchronous_)));
          set_has_synchronous();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .lapis.ClusterConfig cluster = 1;
  if (has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cluster(), output);
  }

  // optional bool standalone = 3 [default = true];
  if (has_standalone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->standalone(), output);
  }

  // optional bool synchronous = 4 [default = true];
  if (has_synchronous()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->synchronous(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .lapis.ClusterConfig cluster = 1;
  if (has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cluster(), target);
  }

  // optional bool standalone = 3 [default = true];
  if (has_standalone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->standalone(), target);
  }

  // optional bool synchronous = 4 [default = true];
  if (has_synchronous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->synchronous(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .lapis.ClusterConfig cluster = 1;
    if (has_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cluster());
    }

    // optional bool standalone = 3 [default = true];
    if (has_standalone()) {
      total_size += 1 + 1;
    }

    // optional bool synchronous = 4 [default = true];
    if (has_synchronous()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemProto::MergeFrom(const SystemProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster()) {
      mutable_cluster()->::lapis::ClusterConfig::MergeFrom(from.cluster());
    }
    if (from.has_standalone()) {
      set_standalone(from.standalone());
    }
    if (from.has_synchronous()) {
      set_synchronous(from.synchronous());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemProto::CopyFrom(const SystemProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto::IsInitialized() const {

  return true;
}

void SystemProto::Swap(SystemProto* other) {
  if (other != this) {
    std::swap(cluster_, other->cluster_);
    std::swap(standalone_, other->standalone_);
    std::swap(synchronous_, other->synchronous_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemProto_descriptor_;
  metadata.reflection = SystemProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lapis

// @@protoc_insertion_point(global_scope)
