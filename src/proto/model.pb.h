// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#ifndef PROTOBUF_model_2eproto__INCLUDED
#define PROTOBUF_model_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace singa {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_model_2eproto();
void protobuf_AssignDesc_model_2eproto();
void protobuf_ShutdownFile_model_2eproto();

class ModelProto;
class NetProto;
class EdgeProto;
class DAryProto;
class ParamProto;
class LayerProto;
class TanhProto;
class SoftmaxLossProto;
class ConvolutionProto;
class DataProto;
class MnistProto;
class DropoutProto;
class InnerProductProto;
class LRNProto;
class PoolingProto;
class ReLUProto;
class PerformanceProto;
class SolverProto;
class Record;
class MnistRecord;
class ImageNetRecord;
class SGDProto;
class TKey;
class TVal;
class Tuple;
class SGDVal;
class AdaVal;
class MeanProto;

enum ParamProto_InitMethod {
  ParamProto_InitMethod_kConstant = 0,
  ParamProto_InitMethod_kGaussain = 1,
  ParamProto_InitMethod_kUniform = 2,
  ParamProto_InitMethod_kPretrained = 3,
  ParamProto_InitMethod_kGaussainSqrtFanIn = 4,
  ParamProto_InitMethod_kUniformSqrtFanIn = 5,
  ParamProto_InitMethod_kUniformSqrtFanInOut = 6
};
bool ParamProto_InitMethod_IsValid(int value);
const ParamProto_InitMethod ParamProto_InitMethod_InitMethod_MIN = ParamProto_InitMethod_kConstant;
const ParamProto_InitMethod ParamProto_InitMethod_InitMethod_MAX = ParamProto_InitMethod_kUniformSqrtFanInOut;
const int ParamProto_InitMethod_InitMethod_ARRAYSIZE = ParamProto_InitMethod_InitMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParamProto_InitMethod_descriptor();
inline const ::std::string& ParamProto_InitMethod_Name(ParamProto_InitMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParamProto_InitMethod_descriptor(), value);
}
inline bool ParamProto_InitMethod_Parse(
    const ::std::string& name, ParamProto_InitMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParamProto_InitMethod>(
    ParamProto_InitMethod_descriptor(), name, value);
}
enum LRNProto_NormRegion {
  LRNProto_NormRegion_ACROSS_CHANNELS = 0,
  LRNProto_NormRegion_WITHIN_CHANNEL = 1
};
bool LRNProto_NormRegion_IsValid(int value);
const LRNProto_NormRegion LRNProto_NormRegion_NormRegion_MIN = LRNProto_NormRegion_ACROSS_CHANNELS;
const LRNProto_NormRegion LRNProto_NormRegion_NormRegion_MAX = LRNProto_NormRegion_WITHIN_CHANNEL;
const int LRNProto_NormRegion_NormRegion_ARRAYSIZE = LRNProto_NormRegion_NormRegion_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNProto_NormRegion_descriptor();
inline const ::std::string& LRNProto_NormRegion_Name(LRNProto_NormRegion value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNProto_NormRegion_descriptor(), value);
}
inline bool LRNProto_NormRegion_Parse(
    const ::std::string& name, LRNProto_NormRegion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNProto_NormRegion>(
    LRNProto_NormRegion_descriptor(), name, value);
}
enum PoolingProto_PoolMethod {
  PoolingProto_PoolMethod_MAX = 0,
  PoolingProto_PoolMethod_AVE = 1
};
bool PoolingProto_PoolMethod_IsValid(int value);
const PoolingProto_PoolMethod PoolingProto_PoolMethod_PoolMethod_MIN = PoolingProto_PoolMethod_MAX;
const PoolingProto_PoolMethod PoolingProto_PoolMethod_PoolMethod_MAX = PoolingProto_PoolMethod_AVE;
const int PoolingProto_PoolMethod_PoolMethod_ARRAYSIZE = PoolingProto_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingProto_PoolMethod_descriptor();
inline const ::std::string& PoolingProto_PoolMethod_Name(PoolingProto_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingProto_PoolMethod_descriptor(), value);
}
inline bool PoolingProto_PoolMethod_Parse(
    const ::std::string& name, PoolingProto_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingProto_PoolMethod>(
    PoolingProto_PoolMethod_descriptor(), name, value);
}
enum SolverProto_GradCalcAlg {
  SolverProto_GradCalcAlg_kBackPropagation = 1,
  SolverProto_GradCalcAlg_kContrastiveDivergence = 2
};
bool SolverProto_GradCalcAlg_IsValid(int value);
const SolverProto_GradCalcAlg SolverProto_GradCalcAlg_GradCalcAlg_MIN = SolverProto_GradCalcAlg_kBackPropagation;
const SolverProto_GradCalcAlg SolverProto_GradCalcAlg_GradCalcAlg_MAX = SolverProto_GradCalcAlg_kContrastiveDivergence;
const int SolverProto_GradCalcAlg_GradCalcAlg_ARRAYSIZE = SolverProto_GradCalcAlg_GradCalcAlg_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverProto_GradCalcAlg_descriptor();
inline const ::std::string& SolverProto_GradCalcAlg_Name(SolverProto_GradCalcAlg value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverProto_GradCalcAlg_descriptor(), value);
}
inline bool SolverProto_GradCalcAlg_Parse(
    const ::std::string& name, SolverProto_GradCalcAlg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverProto_GradCalcAlg>(
    SolverProto_GradCalcAlg_descriptor(), name, value);
}
enum Record_Type {
  Record_Type_kImageNet = 0,
  Record_Type_kMnist = 1
};
bool Record_Type_IsValid(int value);
const Record_Type Record_Type_Type_MIN = Record_Type_kImageNet;
const Record_Type Record_Type_Type_MAX = Record_Type_kMnist;
const int Record_Type_Type_ARRAYSIZE = Record_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Record_Type_descriptor();
inline const ::std::string& Record_Type_Name(Record_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Record_Type_descriptor(), value);
}
inline bool Record_Type_Parse(
    const ::std::string& name, Record_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Record_Type>(
    Record_Type_descriptor(), name, value);
}
enum SGDProto_ChangeProto {
  SGDProto_ChangeProto_kFixed = 0,
  SGDProto_ChangeProto_kInverse_t = 1,
  SGDProto_ChangeProto_kInverse = 2,
  SGDProto_ChangeProto_kExponential = 3,
  SGDProto_ChangeProto_kLinear = 4,
  SGDProto_ChangeProto_kStep = 5
};
bool SGDProto_ChangeProto_IsValid(int value);
const SGDProto_ChangeProto SGDProto_ChangeProto_ChangeProto_MIN = SGDProto_ChangeProto_kFixed;
const SGDProto_ChangeProto SGDProto_ChangeProto_ChangeProto_MAX = SGDProto_ChangeProto_kStep;
const int SGDProto_ChangeProto_ChangeProto_ARRAYSIZE = SGDProto_ChangeProto_ChangeProto_MAX + 1;

const ::google::protobuf::EnumDescriptor* SGDProto_ChangeProto_descriptor();
inline const ::std::string& SGDProto_ChangeProto_Name(SGDProto_ChangeProto value) {
  return ::google::protobuf::internal::NameOfEnum(
    SGDProto_ChangeProto_descriptor(), value);
}
inline bool SGDProto_ChangeProto_Parse(
    const ::std::string& name, SGDProto_ChangeProto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SGDProto_ChangeProto>(
    SGDProto_ChangeProto_descriptor(), name, value);
}
enum Phase {
  kTrain = 0,
  kValidation = 1,
  kTest = 2
};
bool Phase_IsValid(int value);
const Phase Phase_MIN = kTrain;
const Phase Phase_MAX = kTest;
const int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* Phase_descriptor();
inline const ::std::string& Phase_Name(Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    Phase_descriptor(), value);
}
inline bool Phase_Parse(
    const ::std::string& name, Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
enum PartitionMode {
  kData = 0,
  kModel = 1,
  kHybrid = 2,
  kNone = 3
};
bool PartitionMode_IsValid(int value);
const PartitionMode PartitionMode_MIN = kData;
const PartitionMode PartitionMode_MAX = kNone;
const int PartitionMode_ARRAYSIZE = PartitionMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* PartitionMode_descriptor();
inline const ::std::string& PartitionMode_Name(PartitionMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    PartitionMode_descriptor(), value);
}
inline bool PartitionMode_Parse(
    const ::std::string& name, PartitionMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PartitionMode>(
    PartitionMode_descriptor(), name, value);
}
// ===================================================================

class ModelProto : public ::google::protobuf::Message {
 public:
  ModelProto();
  virtual ~ModelProto();

  ModelProto(const ModelProto& from);

  inline ModelProto& operator=(const ModelProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelProto& default_instance();

  void Swap(ModelProto* other);

  // implements Message ----------------------------------------------

  ModelProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelProto& from);
  void MergeFrom(const ModelProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .singa.NetProto net = 2;
  inline bool has_net() const;
  inline void clear_net();
  static const int kNetFieldNumber = 2;
  inline const ::singa::NetProto& net() const;
  inline ::singa::NetProto* mutable_net();
  inline ::singa::NetProto* release_net();
  inline void set_allocated_net(::singa::NetProto* net);

  // optional .singa.SolverProto solver = 3;
  inline bool has_solver() const;
  inline void clear_solver();
  static const int kSolverFieldNumber = 3;
  inline const ::singa::SolverProto& solver() const;
  inline ::singa::SolverProto* mutable_solver();
  inline ::singa::SolverProto* release_solver();
  inline void set_allocated_solver(::singa::SolverProto* solver);

  // @@protoc_insertion_point(class_scope:singa.ModelProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_net();
  inline void clear_has_net();
  inline void set_has_solver();
  inline void clear_has_solver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::singa::NetProto* net_;
  ::singa::SolverProto* solver_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static ModelProto* default_instance_;
};
// -------------------------------------------------------------------

class NetProto : public ::google::protobuf::Message {
 public:
  NetProto();
  virtual ~NetProto();

  NetProto(const NetProto& from);

  inline NetProto& operator=(const NetProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto& default_instance();

  void Swap(NetProto* other);

  // implements Message ----------------------------------------------

  NetProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto& from);
  void MergeFrom(const NetProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .singa.LayerProto layer = 1;
  inline int layer_size() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 1;
  inline const ::singa::LayerProto& layer(int index) const;
  inline ::singa::LayerProto* mutable_layer(int index);
  inline ::singa::LayerProto* add_layer();
  inline const ::google::protobuf::RepeatedPtrField< ::singa::LayerProto >&
      layer() const;
  inline ::google::protobuf::RepeatedPtrField< ::singa::LayerProto >*
      mutable_layer();

  // repeated .singa.EdgeProto edge = 2;
  inline int edge_size() const;
  inline void clear_edge();
  static const int kEdgeFieldNumber = 2;
  inline const ::singa::EdgeProto& edge(int index) const;
  inline ::singa::EdgeProto* mutable_edge(int index);
  inline ::singa::EdgeProto* add_edge();
  inline const ::google::protobuf::RepeatedPtrField< ::singa::EdgeProto >&
      edge() const;
  inline ::google::protobuf::RepeatedPtrField< ::singa::EdgeProto >*
      mutable_edge();

  // @@protoc_insertion_point(class_scope:singa.NetProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::singa::LayerProto > layer_;
  ::google::protobuf::RepeatedPtrField< ::singa::EdgeProto > edge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static NetProto* default_instance_;
};
// -------------------------------------------------------------------

class EdgeProto : public ::google::protobuf::Message {
 public:
  EdgeProto();
  virtual ~EdgeProto();

  EdgeProto(const EdgeProto& from);

  inline EdgeProto& operator=(const EdgeProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EdgeProto& default_instance();

  void Swap(EdgeProto* other);

  // implements Message ----------------------------------------------

  EdgeProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EdgeProto& from);
  void MergeFrom(const EdgeProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool directed = 1 [default = true];
  inline bool has_directed() const;
  inline void clear_directed();
  static const int kDirectedFieldNumber = 1;
  inline bool directed() const;
  inline void set_directed(bool value);

  // optional string layer1 = 2;
  inline bool has_layer1() const;
  inline void clear_layer1();
  static const int kLayer1FieldNumber = 2;
  inline const ::std::string& layer1() const;
  inline void set_layer1(const ::std::string& value);
  inline void set_layer1(const char* value);
  inline void set_layer1(const char* value, size_t size);
  inline ::std::string* mutable_layer1();
  inline ::std::string* release_layer1();
  inline void set_allocated_layer1(::std::string* layer1);

  // optional string layer2 = 3;
  inline bool has_layer2() const;
  inline void clear_layer2();
  static const int kLayer2FieldNumber = 3;
  inline const ::std::string& layer2() const;
  inline void set_layer2(const ::std::string& value);
  inline void set_layer2(const char* value);
  inline void set_layer2(const char* value, size_t size);
  inline ::std::string* mutable_layer2();
  inline ::std::string* release_layer2();
  inline void set_allocated_layer2(::std::string* layer2);

  // @@protoc_insertion_point(class_scope:singa.EdgeProto)
 private:
  inline void set_has_directed();
  inline void clear_has_directed();
  inline void set_has_layer1();
  inline void clear_has_layer1();
  inline void set_has_layer2();
  inline void clear_has_layer2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* layer1_;
  ::std::string* layer2_;
  bool directed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static EdgeProto* default_instance_;
};
// -------------------------------------------------------------------

class DAryProto : public ::google::protobuf::Message {
 public:
  DAryProto();
  virtual ~DAryProto();

  DAryProto(const DAryProto& from);

  inline DAryProto& operator=(const DAryProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DAryProto& default_instance();

  void Swap(DAryProto* other);

  // implements Message ----------------------------------------------

  DAryProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DAryProto& from);
  void MergeFrom(const DAryProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 partition_dim = 1 [default = -1];
  inline bool has_partition_dim() const;
  inline void clear_partition_dim();
  static const int kPartitionDimFieldNumber = 1;
  inline ::google::protobuf::int32 partition_dim() const;
  inline void set_partition_dim(::google::protobuf::int32 value);

  // repeated int32 shape = 2;
  inline int shape_size() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 2;
  inline ::google::protobuf::int32 shape(int index) const;
  inline void set_shape(int index, ::google::protobuf::int32 value);
  inline void add_shape(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shape() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shape();

  // repeated float value = 3 [packed = true];
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline float value(int index) const;
  inline void set_value(int index, float value);
  inline void add_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:singa.DAryProto)
 private:
  inline void set_has_partition_dim();
  inline void clear_has_partition_dim();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shape_;
  ::google::protobuf::RepeatedField< float > value_;
  mutable int _value_cached_byte_size_;
  ::google::protobuf::int32 partition_dim_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static DAryProto* default_instance_;
};
// -------------------------------------------------------------------

class ParamProto : public ::google::protobuf::Message {
 public:
  ParamProto();
  virtual ~ParamProto();

  ParamProto(const ParamProto& from);

  inline ParamProto& operator=(const ParamProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamProto& default_instance();

  void Swap(ParamProto* other);

  // implements Message ----------------------------------------------

  ParamProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParamProto& from);
  void MergeFrom(const ParamProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ParamProto_InitMethod InitMethod;
  static const InitMethod kConstant = ParamProto_InitMethod_kConstant;
  static const InitMethod kGaussain = ParamProto_InitMethod_kGaussain;
  static const InitMethod kUniform = ParamProto_InitMethod_kUniform;
  static const InitMethod kPretrained = ParamProto_InitMethod_kPretrained;
  static const InitMethod kGaussainSqrtFanIn = ParamProto_InitMethod_kGaussainSqrtFanIn;
  static const InitMethod kUniformSqrtFanIn = ParamProto_InitMethod_kUniformSqrtFanIn;
  static const InitMethod kUniformSqrtFanInOut = ParamProto_InitMethod_kUniformSqrtFanInOut;
  static inline bool InitMethod_IsValid(int value) {
    return ParamProto_InitMethod_IsValid(value);
  }
  static const InitMethod InitMethod_MIN =
    ParamProto_InitMethod_InitMethod_MIN;
  static const InitMethod InitMethod_MAX =
    ParamProto_InitMethod_InitMethod_MAX;
  static const int InitMethod_ARRAYSIZE =
    ParamProto_InitMethod_InitMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  InitMethod_descriptor() {
    return ParamProto_InitMethod_descriptor();
  }
  static inline const ::std::string& InitMethod_Name(InitMethod value) {
    return ParamProto_InitMethod_Name(value);
  }
  static inline bool InitMethod_Parse(const ::std::string& name,
      InitMethod* value) {
    return ParamProto_InitMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated int32 shape = 3;
  inline int shape_size() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 3;
  inline ::google::protobuf::int32 shape(int index) const;
  inline void set_shape(int index, ::google::protobuf::int32 value);
  inline void add_shape(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shape() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shape();

  // optional int32 split_threshold = 4 [default = 5000000];
  inline bool has_split_threshold() const;
  inline void clear_split_threshold();
  static const int kSplitThresholdFieldNumber = 4;
  inline ::google::protobuf::int32 split_threshold() const;
  inline void set_split_threshold(::google::protobuf::int32 value);

  // optional int32 partition_dim = 5 [default = -1];
  inline bool has_partition_dim() const;
  inline void clear_partition_dim();
  static const int kPartitionDimFieldNumber = 5;
  inline ::google::protobuf::int32 partition_dim() const;
  inline void set_partition_dim(::google::protobuf::int32 value);

  // repeated .singa.DAryProto ary = 6;
  inline int ary_size() const;
  inline void clear_ary();
  static const int kAryFieldNumber = 6;
  inline const ::singa::DAryProto& ary(int index) const;
  inline ::singa::DAryProto* mutable_ary(int index);
  inline ::singa::DAryProto* add_ary();
  inline const ::google::protobuf::RepeatedPtrField< ::singa::DAryProto >&
      ary() const;
  inline ::google::protobuf::RepeatedPtrField< ::singa::DAryProto >*
      mutable_ary();

  // optional .singa.ParamProto.InitMethod init_method = 7 [default = kConstant];
  inline bool has_init_method() const;
  inline void clear_init_method();
  static const int kInitMethodFieldNumber = 7;
  inline ::singa::ParamProto_InitMethod init_method() const;
  inline void set_init_method(::singa::ParamProto_InitMethod value);

  // optional float value = 8 [default = 1];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 8;
  inline float value() const;
  inline void set_value(float value);

  // optional float low = 9 [default = -1];
  inline bool has_low() const;
  inline void clear_low();
  static const int kLowFieldNumber = 9;
  inline float low() const;
  inline void set_low(float value);

  // optional float high = 10 [default = 1];
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 10;
  inline float high() const;
  inline void set_high(float value);

  // optional float mean = 11 [default = 0];
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 11;
  inline float mean() const;
  inline void set_mean(float value);

  // optional float std = 12 [default = 1];
  inline bool has_std() const;
  inline void clear_std();
  static const int kStdFieldNumber = 12;
  inline float std() const;
  inline void set_std(float value);

  // optional float learning_rate_multiplier = 13 [default = 1];
  inline bool has_learning_rate_multiplier() const;
  inline void clear_learning_rate_multiplier();
  static const int kLearningRateMultiplierFieldNumber = 13;
  inline float learning_rate_multiplier() const;
  inline void set_learning_rate_multiplier(float value);

  // optional float weight_decay_multiplier = 14 [default = 1];
  inline bool has_weight_decay_multiplier() const;
  inline void clear_weight_decay_multiplier();
  static const int kWeightDecayMultiplierFieldNumber = 14;
  inline float weight_decay_multiplier() const;
  inline void set_weight_decay_multiplier(float value);

  // @@protoc_insertion_point(class_scope:singa.ParamProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_split_threshold();
  inline void clear_has_split_threshold();
  inline void set_has_partition_dim();
  inline void clear_has_partition_dim();
  inline void set_has_init_method();
  inline void clear_has_init_method();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_std();
  inline void clear_has_std();
  inline void set_has_learning_rate_multiplier();
  inline void clear_has_learning_rate_multiplier();
  inline void set_has_weight_decay_multiplier();
  inline void clear_has_weight_decay_multiplier();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shape_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 split_threshold_;
  ::google::protobuf::RepeatedPtrField< ::singa::DAryProto > ary_;
  ::google::protobuf::int32 partition_dim_;
  int init_method_;
  float value_;
  float low_;
  float high_;
  float mean_;
  float std_;
  float learning_rate_multiplier_;
  float weight_decay_multiplier_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static ParamProto* default_instance_;
};
// -------------------------------------------------------------------

class LayerProto : public ::google::protobuf::Message {
 public:
  LayerProto();
  virtual ~LayerProto();

  LayerProto(const LayerProto& from);

  inline LayerProto& operator=(const LayerProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerProto& default_instance();

  void Swap(LayerProto* other);

  // implements Message ----------------------------------------------

  LayerProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerProto& from);
  void MergeFrom(const LayerProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // repeated string src_layer = 3;
  inline int src_layer_size() const;
  inline void clear_src_layer();
  static const int kSrcLayerFieldNumber = 3;
  inline const ::std::string& src_layer(int index) const;
  inline ::std::string* mutable_src_layer(int index);
  inline void set_src_layer(int index, const ::std::string& value);
  inline void set_src_layer(int index, const char* value);
  inline void set_src_layer(int index, const char* value, size_t size);
  inline ::std::string* add_src_layer();
  inline void add_src_layer(const ::std::string& value);
  inline void add_src_layer(const char* value);
  inline void add_src_layer(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& src_layer() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_src_layer();

  // repeated .singa.DAryProto ary = 5;
  inline int ary_size() const;
  inline void clear_ary();
  static const int kAryFieldNumber = 5;
  inline const ::singa::DAryProto& ary(int index) const;
  inline ::singa::DAryProto* mutable_ary(int index);
  inline ::singa::DAryProto* add_ary();
  inline const ::google::protobuf::RepeatedPtrField< ::singa::DAryProto >&
      ary() const;
  inline ::google::protobuf::RepeatedPtrField< ::singa::DAryProto >*
      mutable_ary();

  // repeated string share_ary = 6;
  inline int share_ary_size() const;
  inline void clear_share_ary();
  static const int kShareAryFieldNumber = 6;
  inline const ::std::string& share_ary(int index) const;
  inline ::std::string* mutable_share_ary(int index);
  inline void set_share_ary(int index, const ::std::string& value);
  inline void set_share_ary(int index, const char* value);
  inline void set_share_ary(int index, const char* value, size_t size);
  inline ::std::string* add_share_ary();
  inline void add_share_ary(const ::std::string& value);
  inline void add_share_ary(const char* value);
  inline void add_share_ary(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& share_ary() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_share_ary();

  // repeated .singa.ParamProto param = 7;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 7;
  inline const ::singa::ParamProto& param(int index) const;
  inline ::singa::ParamProto* mutable_param(int index);
  inline ::singa::ParamProto* add_param();
  inline const ::google::protobuf::RepeatedPtrField< ::singa::ParamProto >&
      param() const;
  inline ::google::protobuf::RepeatedPtrField< ::singa::ParamProto >*
      mutable_param();

  // repeated string share_param = 8;
  inline int share_param_size() const;
  inline void clear_share_param();
  static const int kShareParamFieldNumber = 8;
  inline const ::std::string& share_param(int index) const;
  inline ::std::string* mutable_share_param(int index);
  inline void set_share_param(int index, const ::std::string& value);
  inline void set_share_param(int index, const char* value);
  inline void set_share_param(int index, const char* value, size_t size);
  inline ::std::string* add_share_param();
  inline void add_share_param(const ::std::string& value);
  inline void add_share_param(const char* value);
  inline void add_share_param(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& share_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_share_param();

  // repeated .singa.Phase exclude = 9;
  inline int exclude_size() const;
  inline void clear_exclude();
  static const int kExcludeFieldNumber = 9;
  inline ::singa::Phase exclude(int index) const;
  inline void set_exclude(int index, ::singa::Phase value);
  inline void add_exclude(::singa::Phase value);
  inline const ::google::protobuf::RepeatedField<int>& exclude() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_exclude();

  // optional .singa.ConvolutionProto convolution_param = 11;
  inline bool has_convolution_param() const;
  inline void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 11;
  inline const ::singa::ConvolutionProto& convolution_param() const;
  inline ::singa::ConvolutionProto* mutable_convolution_param();
  inline ::singa::ConvolutionProto* release_convolution_param();
  inline void set_allocated_convolution_param(::singa::ConvolutionProto* convolution_param);

  // optional .singa.DataProto data_param = 12;
  inline bool has_data_param() const;
  inline void clear_data_param();
  static const int kDataParamFieldNumber = 12;
  inline const ::singa::DataProto& data_param() const;
  inline ::singa::DataProto* mutable_data_param();
  inline ::singa::DataProto* release_data_param();
  inline void set_allocated_data_param(::singa::DataProto* data_param);

  // optional .singa.DropoutProto dropout_param = 13;
  inline bool has_dropout_param() const;
  inline void clear_dropout_param();
  static const int kDropoutParamFieldNumber = 13;
  inline const ::singa::DropoutProto& dropout_param() const;
  inline ::singa::DropoutProto* mutable_dropout_param();
  inline ::singa::DropoutProto* release_dropout_param();
  inline void set_allocated_dropout_param(::singa::DropoutProto* dropout_param);

  // optional .singa.InnerProductProto inner_product_param = 14;
  inline bool has_inner_product_param() const;
  inline void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 14;
  inline const ::singa::InnerProductProto& inner_product_param() const;
  inline ::singa::InnerProductProto* mutable_inner_product_param();
  inline ::singa::InnerProductProto* release_inner_product_param();
  inline void set_allocated_inner_product_param(::singa::InnerProductProto* inner_product_param);

  // optional .singa.LRNProto lrn_param = 15;
  inline bool has_lrn_param() const;
  inline void clear_lrn_param();
  static const int kLrnParamFieldNumber = 15;
  inline const ::singa::LRNProto& lrn_param() const;
  inline ::singa::LRNProto* mutable_lrn_param();
  inline ::singa::LRNProto* release_lrn_param();
  inline void set_allocated_lrn_param(::singa::LRNProto* lrn_param);

  // optional .singa.MnistProto mnist_param = 16;
  inline bool has_mnist_param() const;
  inline void clear_mnist_param();
  static const int kMnistParamFieldNumber = 16;
  inline const ::singa::MnistProto& mnist_param() const;
  inline ::singa::MnistProto* mutable_mnist_param();
  inline ::singa::MnistProto* release_mnist_param();
  inline void set_allocated_mnist_param(::singa::MnistProto* mnist_param);

  // optional .singa.PoolingProto pooling_param = 17;
  inline bool has_pooling_param() const;
  inline void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 17;
  inline const ::singa::PoolingProto& pooling_param() const;
  inline ::singa::PoolingProto* mutable_pooling_param();
  inline ::singa::PoolingProto* release_pooling_param();
  inline void set_allocated_pooling_param(::singa::PoolingProto* pooling_param);

  // optional .singa.ReLUProto relu_param = 18;
  inline bool has_relu_param() const;
  inline void clear_relu_param();
  static const int kReluParamFieldNumber = 18;
  inline const ::singa::ReLUProto& relu_param() const;
  inline ::singa::ReLUProto* mutable_relu_param();
  inline ::singa::ReLUProto* release_relu_param();
  inline void set_allocated_relu_param(::singa::ReLUProto* relu_param);

  // optional .singa.SoftmaxLossProto softmaxloss_param = 19;
  inline bool has_softmaxloss_param() const;
  inline void clear_softmaxloss_param();
  static const int kSoftmaxlossParamFieldNumber = 19;
  inline const ::singa::SoftmaxLossProto& softmaxloss_param() const;
  inline ::singa::SoftmaxLossProto* mutable_softmaxloss_param();
  inline ::singa::SoftmaxLossProto* release_softmaxloss_param();
  inline void set_allocated_softmaxloss_param(::singa::SoftmaxLossProto* softmaxloss_param);

  // optional .singa.TanhProto tanh_param = 20;
  inline bool has_tanh_param() const;
  inline void clear_tanh_param();
  static const int kTanhParamFieldNumber = 20;
  inline const ::singa::TanhProto& tanh_param() const;
  inline ::singa::TanhProto* mutable_tanh_param();
  inline ::singa::TanhProto* release_tanh_param();
  inline void set_allocated_tanh_param(::singa::TanhProto* tanh_param);

  // @@protoc_insertion_point(class_scope:singa.LayerProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_convolution_param();
  inline void clear_has_convolution_param();
  inline void set_has_data_param();
  inline void clear_has_data_param();
  inline void set_has_dropout_param();
  inline void clear_has_dropout_param();
  inline void set_has_inner_product_param();
  inline void clear_has_inner_product_param();
  inline void set_has_lrn_param();
  inline void clear_has_lrn_param();
  inline void set_has_mnist_param();
  inline void clear_has_mnist_param();
  inline void set_has_pooling_param();
  inline void clear_has_pooling_param();
  inline void set_has_relu_param();
  inline void clear_has_relu_param();
  inline void set_has_softmaxloss_param();
  inline void clear_has_softmaxloss_param();
  inline void set_has_tanh_param();
  inline void clear_has_tanh_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> src_layer_;
  ::google::protobuf::RepeatedPtrField< ::singa::DAryProto > ary_;
  ::google::protobuf::RepeatedPtrField< ::std::string> share_ary_;
  ::google::protobuf::RepeatedPtrField< ::singa::ParamProto > param_;
  ::google::protobuf::RepeatedPtrField< ::std::string> share_param_;
  ::google::protobuf::RepeatedField<int> exclude_;
  ::singa::ConvolutionProto* convolution_param_;
  ::singa::DataProto* data_param_;
  ::singa::DropoutProto* dropout_param_;
  ::singa::InnerProductProto* inner_product_param_;
  ::singa::LRNProto* lrn_param_;
  ::singa::MnistProto* mnist_param_;
  ::singa::PoolingProto* pooling_param_;
  ::singa::ReLUProto* relu_param_;
  ::singa::SoftmaxLossProto* softmaxloss_param_;
  ::singa::TanhProto* tanh_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static LayerProto* default_instance_;
};
// -------------------------------------------------------------------

class TanhProto : public ::google::protobuf::Message {
 public:
  TanhProto();
  virtual ~TanhProto();

  TanhProto(const TanhProto& from);

  inline TanhProto& operator=(const TanhProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TanhProto& default_instance();

  void Swap(TanhProto* other);

  // implements Message ----------------------------------------------

  TanhProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TanhProto& from);
  void MergeFrom(const TanhProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline float a() const;
  inline void set_a(float value);

  // optional float b = 2;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline float b() const;
  inline void set_b(float value);

  // @@protoc_insertion_point(class_scope:singa.TanhProto)
 private:
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float a_;
  float b_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static TanhProto* default_instance_;
};
// -------------------------------------------------------------------

class SoftmaxLossProto : public ::google::protobuf::Message {
 public:
  SoftmaxLossProto();
  virtual ~SoftmaxLossProto();

  SoftmaxLossProto(const SoftmaxLossProto& from);

  inline SoftmaxLossProto& operator=(const SoftmaxLossProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftmaxLossProto& default_instance();

  void Swap(SoftmaxLossProto* other);

  // implements Message ----------------------------------------------

  SoftmaxLossProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoftmaxLossProto& from);
  void MergeFrom(const SoftmaxLossProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 top_k = 1 [default = 1];
  inline bool has_top_k() const;
  inline void clear_top_k();
  static const int kTopKFieldNumber = 1;
  inline ::google::protobuf::uint32 top_k() const;
  inline void set_top_k(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:singa.SoftmaxLossProto)
 private:
  inline void set_has_top_k();
  inline void clear_has_top_k();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 top_k_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static SoftmaxLossProto* default_instance_;
};
// -------------------------------------------------------------------

class ConvolutionProto : public ::google::protobuf::Message {
 public:
  ConvolutionProto();
  virtual ~ConvolutionProto();

  ConvolutionProto(const ConvolutionProto& from);

  inline ConvolutionProto& operator=(const ConvolutionProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionProto& default_instance();

  void Swap(ConvolutionProto* other);

  // implements Message ----------------------------------------------

  ConvolutionProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConvolutionProto& from);
  void MergeFrom(const ConvolutionProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional uint32 pad = 3 [default = 0];
  inline bool has_pad() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 3;
  inline ::google::protobuf::uint32 pad() const;
  inline void set_pad(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 9 [default = 0];
  inline bool has_pad_h() const;
  inline void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  inline ::google::protobuf::uint32 pad_h() const;
  inline void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  inline bool has_pad_w() const;
  inline void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  inline ::google::protobuf::uint32 pad_w() const;
  inline void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_size = 4;
  inline bool has_kernel_size() const;
  inline void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 kernel_size() const;
  inline void set_kernel_size(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 11;
  inline bool has_kernel_h() const;
  inline void clear_kernel_h();
  static const int kKernelHFieldNumber = 11;
  inline ::google::protobuf::uint32 kernel_h() const;
  inline void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 12;
  inline bool has_kernel_w() const;
  inline void clear_kernel_w();
  static const int kKernelWFieldNumber = 12;
  inline ::google::protobuf::uint32 kernel_w() const;
  inline void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 group = 5 [default = 1];
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 5;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // optional uint32 stride = 6 [default = 1];
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 6;
  inline ::google::protobuf::uint32 stride() const;
  inline void set_stride(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 13;
  inline bool has_stride_h() const;
  inline void clear_stride_h();
  static const int kStrideHFieldNumber = 13;
  inline ::google::protobuf::uint32 stride_h() const;
  inline void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 14;
  inline bool has_stride_w() const;
  inline void clear_stride_w();
  static const int kStrideWFieldNumber = 14;
  inline ::google::protobuf::uint32 stride_w() const;
  inline void set_stride_w(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:singa.ConvolutionProto)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_pad();
  inline void clear_has_pad();
  inline void set_has_pad_h();
  inline void clear_has_pad_h();
  inline void set_has_pad_w();
  inline void clear_has_pad_w();
  inline void set_has_kernel_size();
  inline void clear_has_kernel_size();
  inline void set_has_kernel_h();
  inline void clear_has_kernel_h();
  inline void set_has_kernel_w();
  inline void clear_has_kernel_w();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_stride_h();
  inline void clear_has_stride_h();
  inline void set_has_stride_w();
  inline void clear_has_stride_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_output_;
  bool bias_term_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_size_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::uint32 stride_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static ConvolutionProto* default_instance_;
};
// -------------------------------------------------------------------

class DataProto : public ::google::protobuf::Message {
 public:
  DataProto();
  virtual ~DataProto();

  DataProto(const DataProto& from);

  inline DataProto& operator=(const DataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataProto& default_instance();

  void Swap(DataProto* other);

  // implements Message ----------------------------------------------

  DataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataProto& from);
  void MergeFrom(const DataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional string mean_file = 3;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 batch_size = 4;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 crop_size = 5 [default = 0];
  inline bool has_crop_size() const;
  inline void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 crop_size() const;
  inline void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional uint32 rand_skip = 7 [default = 0];
  inline bool has_rand_skip() const;
  inline void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  inline ::google::protobuf::uint32 rand_skip() const;
  inline void set_rand_skip(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:singa.DataProto)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* source_;
  ::std::string* mean_file_;
  float scale_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 crop_size_;
  bool mirror_;
  ::google::protobuf::uint32 rand_skip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static DataProto* default_instance_;
};
// -------------------------------------------------------------------

class MnistProto : public ::google::protobuf::Message {
 public:
  MnistProto();
  virtual ~MnistProto();

  MnistProto(const MnistProto& from);

  inline MnistProto& operator=(const MnistProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MnistProto& default_instance();

  void Swap(MnistProto* other);

  // implements Message ----------------------------------------------

  MnistProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MnistProto& from);
  void MergeFrom(const MnistProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 kernel = 1;
  inline bool has_kernel() const;
  inline void clear_kernel();
  static const int kKernelFieldNumber = 1;
  inline ::google::protobuf::int32 kernel() const;
  inline void set_kernel(::google::protobuf::int32 value);

  // repeated float sigma = 2;
  inline int sigma_size() const;
  inline void clear_sigma();
  static const int kSigmaFieldNumber = 2;
  inline float sigma(int index) const;
  inline void set_sigma(int index, float value);
  inline void add_sigma(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      sigma() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_sigma();

  // repeated float alpha = 3;
  inline int alpha_size() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 3;
  inline float alpha(int index) const;
  inline void set_alpha(int index, float value);
  inline void add_alpha(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      alpha() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_alpha();

  // repeated float beta = 4;
  inline int beta_size() const;
  inline void clear_beta();
  static const int kBetaFieldNumber = 4;
  inline float beta(int index) const;
  inline void set_beta(int index, float value);
  inline void add_beta(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      beta() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_beta();

  // repeated float gamma = 5;
  inline int gamma_size() const;
  inline void clear_gamma();
  static const int kGammaFieldNumber = 5;
  inline float gamma(int index) const;
  inline void set_gamma(int index, float value);
  inline void add_gamma(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      gamma() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_gamma();

  // optional int32 size = 6;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 6;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // optional int32 elastic_freq = 7;
  inline bool has_elastic_freq() const;
  inline void clear_elastic_freq();
  static const int kElasticFreqFieldNumber = 7;
  inline ::google::protobuf::int32 elastic_freq() const;
  inline void set_elastic_freq(::google::protobuf::int32 value);

  // optional bool normalize = 8 [default = true];
  inline bool has_normalize() const;
  inline void clear_normalize();
  static const int kNormalizeFieldNumber = 8;
  inline bool normalize() const;
  inline void set_normalize(bool value);

  // @@protoc_insertion_point(class_scope:singa.MnistProto)
 private:
  inline void set_has_kernel();
  inline void clear_has_kernel();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_elastic_freq();
  inline void clear_has_elastic_freq();
  inline void set_has_normalize();
  inline void clear_has_normalize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< float > sigma_;
  ::google::protobuf::RepeatedField< float > alpha_;
  ::google::protobuf::int32 kernel_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::RepeatedField< float > beta_;
  ::google::protobuf::RepeatedField< float > gamma_;
  ::google::protobuf::int32 elastic_freq_;
  bool normalize_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static MnistProto* default_instance_;
};
// -------------------------------------------------------------------

class DropoutProto : public ::google::protobuf::Message {
 public:
  DropoutProto();
  virtual ~DropoutProto();

  DropoutProto(const DropoutProto& from);

  inline DropoutProto& operator=(const DropoutProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropoutProto& default_instance();

  void Swap(DropoutProto* other);

  // implements Message ----------------------------------------------

  DropoutProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DropoutProto& from);
  void MergeFrom(const DropoutProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float dropout_ratio = 1 [default = 0.5];
  inline bool has_dropout_ratio() const;
  inline void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 1;
  inline float dropout_ratio() const;
  inline void set_dropout_ratio(float value);

  // @@protoc_insertion_point(class_scope:singa.DropoutProto)
 private:
  inline void set_has_dropout_ratio();
  inline void clear_has_dropout_ratio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float dropout_ratio_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static DropoutProto* default_instance_;
};
// -------------------------------------------------------------------

class InnerProductProto : public ::google::protobuf::Message {
 public:
  InnerProductProto();
  virtual ~InnerProductProto();

  InnerProductProto(const InnerProductProto& from);

  inline InnerProductProto& operator=(const InnerProductProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerProductProto& default_instance();

  void Swap(InnerProductProto* other);

  // implements Message ----------------------------------------------

  InnerProductProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InnerProductProto& from);
  void MergeFrom(const InnerProductProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // @@protoc_insertion_point(class_scope:singa.InnerProductProto)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_output_;
  bool bias_term_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static InnerProductProto* default_instance_;
};
// -------------------------------------------------------------------

class LRNProto : public ::google::protobuf::Message {
 public:
  LRNProto();
  virtual ~LRNProto();

  LRNProto(const LRNProto& from);

  inline LRNProto& operator=(const LRNProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LRNProto& default_instance();

  void Swap(LRNProto* other);

  // implements Message ----------------------------------------------

  LRNProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LRNProto& from);
  void MergeFrom(const LRNProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LRNProto_NormRegion NormRegion;
  static const NormRegion ACROSS_CHANNELS = LRNProto_NormRegion_ACROSS_CHANNELS;
  static const NormRegion WITHIN_CHANNEL = LRNProto_NormRegion_WITHIN_CHANNEL;
  static inline bool NormRegion_IsValid(int value) {
    return LRNProto_NormRegion_IsValid(value);
  }
  static const NormRegion NormRegion_MIN =
    LRNProto_NormRegion_NormRegion_MIN;
  static const NormRegion NormRegion_MAX =
    LRNProto_NormRegion_NormRegion_MAX;
  static const int NormRegion_ARRAYSIZE =
    LRNProto_NormRegion_NormRegion_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormRegion_descriptor() {
    return LRNProto_NormRegion_descriptor();
  }
  static inline const ::std::string& NormRegion_Name(NormRegion value) {
    return LRNProto_NormRegion_Name(value);
  }
  static inline bool NormRegion_Parse(const ::std::string& name,
      NormRegion* value) {
    return LRNProto_NormRegion_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 local_size = 1 [default = 5];
  inline bool has_local_size() const;
  inline void clear_local_size();
  static const int kLocalSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 local_size() const;
  inline void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 2 [default = 1];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 2;
  inline float alpha() const;
  inline void set_alpha(float value);

  // optional float beta = 3 [default = 0.75];
  inline bool has_beta() const;
  inline void clear_beta();
  static const int kBetaFieldNumber = 3;
  inline float beta() const;
  inline void set_beta(float value);

  // optional .singa.LRNProto.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  inline bool has_norm_region() const;
  inline void clear_norm_region();
  static const int kNormRegionFieldNumber = 4;
  inline ::singa::LRNProto_NormRegion norm_region() const;
  inline void set_norm_region(::singa::LRNProto_NormRegion value);

  // optional float knorm = 5 [default = 1];
  inline bool has_knorm() const;
  inline void clear_knorm();
  static const int kKnormFieldNumber = 5;
  inline float knorm() const;
  inline void set_knorm(float value);

  // @@protoc_insertion_point(class_scope:singa.LRNProto)
 private:
  inline void set_has_local_size();
  inline void clear_has_local_size();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_norm_region();
  inline void clear_has_norm_region();
  inline void set_has_knorm();
  inline void clear_has_knorm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  int norm_region_;
  float knorm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static LRNProto* default_instance_;
};
// -------------------------------------------------------------------

class PoolingProto : public ::google::protobuf::Message {
 public:
  PoolingProto();
  virtual ~PoolingProto();

  PoolingProto(const PoolingProto& from);

  inline PoolingProto& operator=(const PoolingProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolingProto& default_instance();

  void Swap(PoolingProto* other);

  // implements Message ----------------------------------------------

  PoolingProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoolingProto& from);
  void MergeFrom(const PoolingProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PoolingProto_PoolMethod PoolMethod;
  static const PoolMethod MAX = PoolingProto_PoolMethod_MAX;
  static const PoolMethod AVE = PoolingProto_PoolMethod_AVE;
  static inline bool PoolMethod_IsValid(int value) {
    return PoolingProto_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    PoolingProto_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    PoolingProto_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    PoolingProto_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return PoolingProto_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return PoolingProto_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return PoolingProto_PoolMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .singa.PoolingProto.PoolMethod pool = 1 [default = MAX];
  inline bool has_pool() const;
  inline void clear_pool();
  static const int kPoolFieldNumber = 1;
  inline ::singa::PoolingProto_PoolMethod pool() const;
  inline void set_pool(::singa::PoolingProto_PoolMethod value);

  // optional uint32 pad = 4 [default = 0];
  inline bool has_pad() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 4;
  inline ::google::protobuf::uint32 pad() const;
  inline void set_pad(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 9 [default = 0];
  inline bool has_pad_h() const;
  inline void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  inline ::google::protobuf::uint32 pad_h() const;
  inline void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  inline bool has_pad_w() const;
  inline void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  inline ::google::protobuf::uint32 pad_w() const;
  inline void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_size = 2;
  inline bool has_kernel_size() const;
  inline void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 kernel_size() const;
  inline void set_kernel_size(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 5;
  inline bool has_kernel_h() const;
  inline void clear_kernel_h();
  static const int kKernelHFieldNumber = 5;
  inline ::google::protobuf::uint32 kernel_h() const;
  inline void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 6;
  inline bool has_kernel_w() const;
  inline void clear_kernel_w();
  static const int kKernelWFieldNumber = 6;
  inline ::google::protobuf::uint32 kernel_w() const;
  inline void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride = 3 [default = 1];
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 3;
  inline ::google::protobuf::uint32 stride() const;
  inline void set_stride(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 7;
  inline bool has_stride_h() const;
  inline void clear_stride_h();
  static const int kStrideHFieldNumber = 7;
  inline ::google::protobuf::uint32 stride_h() const;
  inline void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 8;
  inline bool has_stride_w() const;
  inline void clear_stride_w();
  static const int kStrideWFieldNumber = 8;
  inline ::google::protobuf::uint32 stride_w() const;
  inline void set_stride_w(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:singa.PoolingProto)
 private:
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_pad();
  inline void clear_has_pad();
  inline void set_has_pad_h();
  inline void clear_has_pad_h();
  inline void set_has_pad_w();
  inline void clear_has_pad_w();
  inline void set_has_kernel_size();
  inline void clear_has_kernel_size();
  inline void set_has_kernel_h();
  inline void clear_has_kernel_h();
  inline void set_has_kernel_w();
  inline void clear_has_kernel_w();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_stride_h();
  inline void clear_has_stride_h();
  inline void set_has_stride_w();
  inline void clear_has_stride_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int pool_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_size_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 stride_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static PoolingProto* default_instance_;
};
// -------------------------------------------------------------------

class ReLUProto : public ::google::protobuf::Message {
 public:
  ReLUProto();
  virtual ~ReLUProto();

  ReLUProto(const ReLUProto& from);

  inline ReLUProto& operator=(const ReLUProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReLUProto& default_instance();

  void Swap(ReLUProto* other);

  // implements Message ----------------------------------------------

  ReLUProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReLUProto& from);
  void MergeFrom(const ReLUProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float negative_slope = 1 [default = 0];
  inline bool has_negative_slope() const;
  inline void clear_negative_slope();
  static const int kNegativeSlopeFieldNumber = 1;
  inline float negative_slope() const;
  inline void set_negative_slope(float value);

  // @@protoc_insertion_point(class_scope:singa.ReLUProto)
 private:
  inline void set_has_negative_slope();
  inline void clear_has_negative_slope();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float negative_slope_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static ReLUProto* default_instance_;
};
// -------------------------------------------------------------------

class PerformanceProto : public ::google::protobuf::Message {
 public:
  PerformanceProto();
  virtual ~PerformanceProto();

  PerformanceProto(const PerformanceProto& from);

  inline PerformanceProto& operator=(const PerformanceProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerformanceProto& default_instance();

  void Swap(PerformanceProto* other);

  // implements Message ----------------------------------------------

  PerformanceProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PerformanceProto& from);
  void MergeFrom(const PerformanceProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float topk_precision = 1 [default = 0];
  inline bool has_topk_precision() const;
  inline void clear_topk_precision();
  static const int kTopkPrecisionFieldNumber = 1;
  inline float topk_precision() const;
  inline void set_topk_precision(float value);

  // optional float top_precision = 2 [default = 0];
  inline bool has_top_precision() const;
  inline void clear_top_precision();
  static const int kTopPrecisionFieldNumber = 2;
  inline float top_precision() const;
  inline void set_top_precision(float value);

  // optional float loss = 3 [default = 0];
  inline bool has_loss() const;
  inline void clear_loss();
  static const int kLossFieldNumber = 3;
  inline float loss() const;
  inline void set_loss(float value);

  // optional int32 count = 4 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 step = 5 [default = 0];
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 5;
  inline ::google::protobuf::int32 step() const;
  inline void set_step(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:singa.PerformanceProto)
 private:
  inline void set_has_topk_precision();
  inline void clear_has_topk_precision();
  inline void set_has_top_precision();
  inline void clear_has_top_precision();
  inline void set_has_loss();
  inline void clear_has_loss();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_step();
  inline void clear_has_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float topk_precision_;
  float top_precision_;
  float loss_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 step_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static PerformanceProto* default_instance_;
};
// -------------------------------------------------------------------

class SolverProto : public ::google::protobuf::Message {
 public:
  SolverProto();
  virtual ~SolverProto();

  SolverProto(const SolverProto& from);

  inline SolverProto& operator=(const SolverProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverProto& default_instance();

  void Swap(SolverProto* other);

  // implements Message ----------------------------------------------

  SolverProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverProto& from);
  void MergeFrom(const SolverProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SolverProto_GradCalcAlg GradCalcAlg;
  static const GradCalcAlg kBackPropagation = SolverProto_GradCalcAlg_kBackPropagation;
  static const GradCalcAlg kContrastiveDivergence = SolverProto_GradCalcAlg_kContrastiveDivergence;
  static inline bool GradCalcAlg_IsValid(int value) {
    return SolverProto_GradCalcAlg_IsValid(value);
  }
  static const GradCalcAlg GradCalcAlg_MIN =
    SolverProto_GradCalcAlg_GradCalcAlg_MIN;
  static const GradCalcAlg GradCalcAlg_MAX =
    SolverProto_GradCalcAlg_GradCalcAlg_MAX;
  static const int GradCalcAlg_ARRAYSIZE =
    SolverProto_GradCalcAlg_GradCalcAlg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GradCalcAlg_descriptor() {
    return SolverProto_GradCalcAlg_descriptor();
  }
  static inline const ::std::string& GradCalcAlg_Name(GradCalcAlg value) {
    return SolverProto_GradCalcAlg_Name(value);
  }
  static inline bool GradCalcAlg_Parse(const ::std::string& name,
      GradCalcAlg* value) {
    return SolverProto_GradCalcAlg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 step = 1 [default = 0];
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 1;
  inline ::google::protobuf::int32 step() const;
  inline void set_step(::google::protobuf::int32 value);

  // optional string train_folder = 2 [default = "train"];
  inline bool has_train_folder() const;
  inline void clear_train_folder();
  static const int kTrainFolderFieldNumber = 2;
  inline const ::std::string& train_folder() const;
  inline void set_train_folder(const ::std::string& value);
  inline void set_train_folder(const char* value);
  inline void set_train_folder(const char* value, size_t size);
  inline ::std::string* mutable_train_folder();
  inline ::std::string* release_train_folder();
  inline void set_allocated_train_folder(::std::string* train_folder);

  // optional string test_folder = 3 [default = "test"];
  inline bool has_test_folder() const;
  inline void clear_test_folder();
  static const int kTestFolderFieldNumber = 3;
  inline const ::std::string& test_folder() const;
  inline void set_test_folder(const ::std::string& value);
  inline void set_test_folder(const char* value);
  inline void set_test_folder(const char* value, size_t size);
  inline ::std::string* mutable_test_folder();
  inline ::std::string* release_test_folder();
  inline void set_allocated_test_folder(::std::string* test_folder);

  // optional string validation_folder = 4 [default = "validation"];
  inline bool has_validation_folder() const;
  inline void clear_validation_folder();
  static const int kValidationFolderFieldNumber = 4;
  inline const ::std::string& validation_folder() const;
  inline void set_validation_folder(const ::std::string& value);
  inline void set_validation_folder(const char* value);
  inline void set_validation_folder(const char* value, size_t size);
  inline ::std::string* mutable_validation_folder();
  inline ::std::string* release_validation_folder();
  inline void set_allocated_validation_folder(::std::string* validation_folder);

  // optional int32 display_after_steps = 6 [default = 0];
  inline bool has_display_after_steps() const;
  inline void clear_display_after_steps();
  static const int kDisplayAfterStepsFieldNumber = 6;
  inline ::google::protobuf::int32 display_after_steps() const;
  inline void set_display_after_steps(::google::protobuf::int32 value);

  // optional int32 display_every_steps = 7 [default = 0];
  inline bool has_display_every_steps() const;
  inline void clear_display_every_steps();
  static const int kDisplayEveryStepsFieldNumber = 7;
  inline ::google::protobuf::int32 display_every_steps() const;
  inline void set_display_every_steps(::google::protobuf::int32 value);

  // optional int32 validation_after_steps = 10 [default = 0];
  inline bool has_validation_after_steps() const;
  inline void clear_validation_after_steps();
  static const int kValidationAfterStepsFieldNumber = 10;
  inline ::google::protobuf::int32 validation_after_steps() const;
  inline void set_validation_after_steps(::google::protobuf::int32 value);

  // optional int32 validation_every_steps = 11 [default = 0];
  inline bool has_validation_every_steps() const;
  inline void clear_validation_every_steps();
  static const int kValidationEveryStepsFieldNumber = 11;
  inline ::google::protobuf::int32 validation_every_steps() const;
  inline void set_validation_every_steps(::google::protobuf::int32 value);

  // optional int32 test_after_steps = 13 [default = 0];
  inline bool has_test_after_steps() const;
  inline void clear_test_after_steps();
  static const int kTestAfterStepsFieldNumber = 13;
  inline ::google::protobuf::int32 test_after_steps() const;
  inline void set_test_after_steps(::google::protobuf::int32 value);

  // optional int32 test_every_steps = 14 [default = 0];
  inline bool has_test_every_steps() const;
  inline void clear_test_every_steps();
  static const int kTestEveryStepsFieldNumber = 14;
  inline ::google::protobuf::int32 test_every_steps() const;
  inline void set_test_every_steps(::google::protobuf::int32 value);

  // optional int32 batchsize = 19;
  inline bool has_batchsize() const;
  inline void clear_batchsize();
  static const int kBatchsizeFieldNumber = 19;
  inline ::google::protobuf::int32 batchsize() const;
  inline void set_batchsize(::google::protobuf::int32 value);

  // optional int32 train_steps = 20;
  inline bool has_train_steps() const;
  inline void clear_train_steps();
  static const int kTrainStepsFieldNumber = 20;
  inline ::google::protobuf::int32 train_steps() const;
  inline void set_train_steps(::google::protobuf::int32 value);

  // optional int32 validation_steps = 21;
  inline bool has_validation_steps() const;
  inline void clear_validation_steps();
  static const int kValidationStepsFieldNumber = 21;
  inline ::google::protobuf::int32 validation_steps() const;
  inline void set_validation_steps(::google::protobuf::int32 value);

  // optional int32 test_steps = 22;
  inline bool has_test_steps() const;
  inline void clear_test_steps();
  static const int kTestStepsFieldNumber = 22;
  inline ::google::protobuf::int32 test_steps() const;
  inline void set_test_steps(::google::protobuf::int32 value);

  // optional .singa.SGDProto sgd = 24;
  inline bool has_sgd() const;
  inline void clear_sgd();
  static const int kSgdFieldNumber = 24;
  inline const ::singa::SGDProto& sgd() const;
  inline ::singa::SGDProto* mutable_sgd();
  inline ::singa::SGDProto* release_sgd();
  inline void set_allocated_sgd(::singa::SGDProto* sgd);

  // optional .singa.SolverProto.GradCalcAlg alg = 26 [default = kBackPropagation];
  inline bool has_alg() const;
  inline void clear_alg();
  static const int kAlgFieldNumber = 26;
  inline ::singa::SolverProto_GradCalcAlg alg() const;
  inline void set_alg(::singa::SolverProto_GradCalcAlg value);

  // optional .singa.PartitionMode partition = 27 [default = kNone];
  inline bool has_partition() const;
  inline void clear_partition();
  static const int kPartitionFieldNumber = 27;
  inline ::singa::PartitionMode partition() const;
  inline void set_partition(::singa::PartitionMode value);

  // @@protoc_insertion_point(class_scope:singa.SolverProto)
 private:
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_train_folder();
  inline void clear_has_train_folder();
  inline void set_has_test_folder();
  inline void clear_has_test_folder();
  inline void set_has_validation_folder();
  inline void clear_has_validation_folder();
  inline void set_has_display_after_steps();
  inline void clear_has_display_after_steps();
  inline void set_has_display_every_steps();
  inline void clear_has_display_every_steps();
  inline void set_has_validation_after_steps();
  inline void clear_has_validation_after_steps();
  inline void set_has_validation_every_steps();
  inline void clear_has_validation_every_steps();
  inline void set_has_test_after_steps();
  inline void clear_has_test_after_steps();
  inline void set_has_test_every_steps();
  inline void clear_has_test_every_steps();
  inline void set_has_batchsize();
  inline void clear_has_batchsize();
  inline void set_has_train_steps();
  inline void clear_has_train_steps();
  inline void set_has_validation_steps();
  inline void clear_has_validation_steps();
  inline void set_has_test_steps();
  inline void clear_has_test_steps();
  inline void set_has_sgd();
  inline void clear_has_sgd();
  inline void set_has_alg();
  inline void clear_has_alg();
  inline void set_has_partition();
  inline void clear_has_partition();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* train_folder_;
  static ::std::string* _default_train_folder_;
  ::std::string* test_folder_;
  static ::std::string* _default_test_folder_;
  ::google::protobuf::int32 step_;
  ::google::protobuf::int32 display_after_steps_;
  ::std::string* validation_folder_;
  static ::std::string* _default_validation_folder_;
  ::google::protobuf::int32 display_every_steps_;
  ::google::protobuf::int32 validation_after_steps_;
  ::google::protobuf::int32 validation_every_steps_;
  ::google::protobuf::int32 test_after_steps_;
  ::google::protobuf::int32 test_every_steps_;
  ::google::protobuf::int32 batchsize_;
  ::google::protobuf::int32 train_steps_;
  ::google::protobuf::int32 validation_steps_;
  ::singa::SGDProto* sgd_;
  ::google::protobuf::int32 test_steps_;
  int alg_;
  int partition_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static SolverProto* default_instance_;
};
// -------------------------------------------------------------------

class Record : public ::google::protobuf::Message {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();

  void Swap(Record* other);

  // implements Message ----------------------------------------------

  Record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Record_Type Type;
  static const Type kImageNet = Record_Type_kImageNet;
  static const Type kMnist = Record_Type_kMnist;
  static inline bool Type_IsValid(int value) {
    return Record_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Record_Type_Type_MIN;
  static const Type Type_MAX =
    Record_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Record_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Record_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Record_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Record_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .singa.Record.Type type = 1 [default = kImageNet];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::singa::Record_Type type() const;
  inline void set_type(::singa::Record_Type value);

  // optional .singa.ImageNetRecord imagenet = 2;
  inline bool has_imagenet() const;
  inline void clear_imagenet();
  static const int kImagenetFieldNumber = 2;
  inline const ::singa::ImageNetRecord& imagenet() const;
  inline ::singa::ImageNetRecord* mutable_imagenet();
  inline ::singa::ImageNetRecord* release_imagenet();
  inline void set_allocated_imagenet(::singa::ImageNetRecord* imagenet);

  // optional .singa.MnistRecord mnist = 3;
  inline bool has_mnist() const;
  inline void clear_mnist();
  static const int kMnistFieldNumber = 3;
  inline const ::singa::MnistRecord& mnist() const;
  inline ::singa::MnistRecord* mutable_mnist();
  inline ::singa::MnistRecord* release_mnist();
  inline void set_allocated_mnist(::singa::MnistRecord* mnist);

  // @@protoc_insertion_point(class_scope:singa.Record)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_imagenet();
  inline void clear_has_imagenet();
  inline void set_has_mnist();
  inline void clear_has_mnist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::singa::ImageNetRecord* imagenet_;
  ::singa::MnistRecord* mnist_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static Record* default_instance_;
};
// -------------------------------------------------------------------

class MnistRecord : public ::google::protobuf::Message {
 public:
  MnistRecord();
  virtual ~MnistRecord();

  MnistRecord(const MnistRecord& from);

  inline MnistRecord& operator=(const MnistRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MnistRecord& default_instance();

  void Swap(MnistRecord* other);

  // implements Message ----------------------------------------------

  MnistRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MnistRecord& from);
  void MergeFrom(const MnistRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 label = 1;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 1;
  inline ::google::protobuf::int32 label() const;
  inline void set_label(::google::protobuf::int32 value);

  // optional bytes pixel = 2;
  inline bool has_pixel() const;
  inline void clear_pixel();
  static const int kPixelFieldNumber = 2;
  inline const ::std::string& pixel() const;
  inline void set_pixel(const ::std::string& value);
  inline void set_pixel(const char* value);
  inline void set_pixel(const void* value, size_t size);
  inline ::std::string* mutable_pixel();
  inline ::std::string* release_pixel();
  inline void set_allocated_pixel(::std::string* pixel);

  // @@protoc_insertion_point(class_scope:singa.MnistRecord)
 private:
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_pixel();
  inline void clear_has_pixel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pixel_;
  ::google::protobuf::int32 label_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static MnistRecord* default_instance_;
};
// -------------------------------------------------------------------

class ImageNetRecord : public ::google::protobuf::Message {
 public:
  ImageNetRecord();
  virtual ~ImageNetRecord();

  ImageNetRecord(const ImageNetRecord& from);

  inline ImageNetRecord& operator=(const ImageNetRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageNetRecord& default_instance();

  void Swap(ImageNetRecord* other);

  // implements Message ----------------------------------------------

  ImageNetRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageNetRecord& from);
  void MergeFrom(const ImageNetRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .singa.DAryProto image = 1;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 1;
  inline const ::singa::DAryProto& image() const;
  inline ::singa::DAryProto* mutable_image();
  inline ::singa::DAryProto* release_image();
  inline void set_allocated_image(::singa::DAryProto* image);

  // optional int32 label = 2;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline ::google::protobuf::int32 label() const;
  inline void set_label(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:singa.ImageNetRecord)
 private:
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_label();
  inline void clear_has_label();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::singa::DAryProto* image_;
  ::google::protobuf::int32 label_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static ImageNetRecord* default_instance_;
};
// -------------------------------------------------------------------

class SGDProto : public ::google::protobuf::Message {
 public:
  SGDProto();
  virtual ~SGDProto();

  SGDProto(const SGDProto& from);

  inline SGDProto& operator=(const SGDProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SGDProto& default_instance();

  void Swap(SGDProto* other);

  // implements Message ----------------------------------------------

  SGDProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SGDProto& from);
  void MergeFrom(const SGDProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SGDProto_ChangeProto ChangeProto;
  static const ChangeProto kFixed = SGDProto_ChangeProto_kFixed;
  static const ChangeProto kInverse_t = SGDProto_ChangeProto_kInverse_t;
  static const ChangeProto kInverse = SGDProto_ChangeProto_kInverse;
  static const ChangeProto kExponential = SGDProto_ChangeProto_kExponential;
  static const ChangeProto kLinear = SGDProto_ChangeProto_kLinear;
  static const ChangeProto kStep = SGDProto_ChangeProto_kStep;
  static inline bool ChangeProto_IsValid(int value) {
    return SGDProto_ChangeProto_IsValid(value);
  }
  static const ChangeProto ChangeProto_MIN =
    SGDProto_ChangeProto_ChangeProto_MIN;
  static const ChangeProto ChangeProto_MAX =
    SGDProto_ChangeProto_ChangeProto_MAX;
  static const int ChangeProto_ARRAYSIZE =
    SGDProto_ChangeProto_ChangeProto_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChangeProto_descriptor() {
    return SGDProto_ChangeProto_descriptor();
  }
  static inline const ::std::string& ChangeProto_Name(ChangeProto value) {
    return SGDProto_ChangeProto_Name(value);
  }
  static inline bool ChangeProto_Parse(const ::std::string& name,
      ChangeProto* value) {
    return SGDProto_ChangeProto_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional float learning_rate = 1;
  inline bool has_learning_rate() const;
  inline void clear_learning_rate();
  static const int kLearningRateFieldNumber = 1;
  inline float learning_rate() const;
  inline void set_learning_rate(float value);

  // optional float momentum = 2;
  inline bool has_momentum() const;
  inline void clear_momentum();
  static const int kMomentumFieldNumber = 2;
  inline float momentum() const;
  inline void set_momentum(float value);

  // optional float weight_decay = 3;
  inline bool has_weight_decay() const;
  inline void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 3;
  inline float weight_decay() const;
  inline void set_weight_decay(float value);

  // optional float gamma = 4 [default = 1];
  inline bool has_gamma() const;
  inline void clear_gamma();
  static const int kGammaFieldNumber = 4;
  inline float gamma() const;
  inline void set_gamma(float value);

  // optional float pow = 5 [default = 0];
  inline bool has_pow() const;
  inline void clear_pow();
  static const int kPowFieldNumber = 5;
  inline float pow() const;
  inline void set_pow(float value);

  // optional int32 learning_rate_change_steps = 6;
  inline bool has_learning_rate_change_steps() const;
  inline void clear_learning_rate_change_steps();
  static const int kLearningRateChangeStepsFieldNumber = 6;
  inline ::google::protobuf::int32 learning_rate_change_steps() const;
  inline void set_learning_rate_change_steps(::google::protobuf::int32 value);

  // optional .singa.SGDProto.ChangeProto learning_rate_change = 7 [default = kStep];
  inline bool has_learning_rate_change() const;
  inline void clear_learning_rate_change();
  static const int kLearningRateChangeFieldNumber = 7;
  inline ::singa::SGDProto_ChangeProto learning_rate_change() const;
  inline void set_learning_rate_change(::singa::SGDProto_ChangeProto value);

  // optional bool synchronous = 8 [default = false];
  inline bool has_synchronous() const;
  inline void clear_synchronous();
  static const int kSynchronousFieldNumber = 8;
  inline bool synchronous() const;
  inline void set_synchronous(bool value);

  // optional string handler = 9 [default = "SGD"];
  inline bool has_handler() const;
  inline void clear_handler();
  static const int kHandlerFieldNumber = 9;
  inline const ::std::string& handler() const;
  inline void set_handler(const ::std::string& value);
  inline void set_handler(const char* value);
  inline void set_handler(const char* value, size_t size);
  inline ::std::string* mutable_handler();
  inline ::std::string* release_handler();
  inline void set_allocated_handler(::std::string* handler);

  // optional int32 checkpoint_after_steps = 10 [default = 0];
  inline bool has_checkpoint_after_steps() const;
  inline void clear_checkpoint_after_steps();
  static const int kCheckpointAfterStepsFieldNumber = 10;
  inline ::google::protobuf::int32 checkpoint_after_steps() const;
  inline void set_checkpoint_after_steps(::google::protobuf::int32 value);

  // optional int32 checkpoint_every_steps = 11 [default = 0];
  inline bool has_checkpoint_every_steps() const;
  inline void clear_checkpoint_every_steps();
  static const int kCheckpointEveryStepsFieldNumber = 11;
  inline ::google::protobuf::int32 checkpoint_every_steps() const;
  inline void set_checkpoint_every_steps(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(SGDProto)
  // @@protoc_insertion_point(class_scope:singa.SGDProto)
 private:
  inline void set_has_learning_rate();
  inline void clear_has_learning_rate();
  inline void set_has_momentum();
  inline void clear_has_momentum();
  inline void set_has_weight_decay();
  inline void clear_has_weight_decay();
  inline void set_has_gamma();
  inline void clear_has_gamma();
  inline void set_has_pow();
  inline void clear_has_pow();
  inline void set_has_learning_rate_change_steps();
  inline void clear_has_learning_rate_change_steps();
  inline void set_has_learning_rate_change();
  inline void clear_has_learning_rate_change();
  inline void set_has_synchronous();
  inline void clear_has_synchronous();
  inline void set_has_handler();
  inline void clear_has_handler();
  inline void set_has_checkpoint_after_steps();
  inline void clear_has_checkpoint_after_steps();
  inline void set_has_checkpoint_every_steps();
  inline void clear_has_checkpoint_every_steps();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float learning_rate_;
  float momentum_;
  float weight_decay_;
  float gamma_;
  float pow_;
  ::google::protobuf::int32 learning_rate_change_steps_;
  int learning_rate_change_;
  bool synchronous_;
  ::std::string* handler_;
  static ::std::string* _default_handler_;
  ::google::protobuf::int32 checkpoint_after_steps_;
  ::google::protobuf::int32 checkpoint_every_steps_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static SGDProto* default_instance_;
};
// -------------------------------------------------------------------

class TKey : public ::google::protobuf::Message {
 public:
  TKey();
  virtual ~TKey();

  TKey(const TKey& from);

  inline TKey& operator=(const TKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TKey& default_instance();

  void Swap(TKey* other);

  // implements Message ----------------------------------------------

  TKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TKey& from);
  void MergeFrom(const TKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TKey)
  // @@protoc_insertion_point(class_scope:singa.TKey)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static TKey* default_instance_;
};
// -------------------------------------------------------------------

class TVal : public ::google::protobuf::Message {
 public:
  TVal();
  virtual ~TVal();

  TVal(const TVal& from);

  inline TVal& operator=(const TVal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TVal& default_instance();

  void Swap(TVal* other);

  // implements Message ----------------------------------------------

  TVal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TVal& from);
  void MergeFrom(const TVal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional int32 num_aggregate = 4;
  inline bool has_num_aggregate() const;
  inline void clear_num_aggregate();
  static const int kNumAggregateFieldNumber = 4;
  inline ::google::protobuf::int32 num_aggregate() const;
  inline void set_num_aggregate(::google::protobuf::int32 value);

  // optional int32 version = 5;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 5;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional int32 rank = 6;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 6;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 param_id = 7;
  inline bool has_param_id() const;
  inline void clear_param_id();
  static const int kParamIdFieldNumber = 7;
  inline ::google::protobuf::int32 param_id() const;
  inline void set_param_id(::google::protobuf::int32 value);

  // optional int32 split_id = 8;
  inline bool has_split_id() const;
  inline void clear_split_id();
  static const int kSplitIdFieldNumber = 8;
  inline ::google::protobuf::int32 split_id() const;
  inline void set_split_id(::google::protobuf::int32 value);

  // optional int32 split_offset = 9;
  inline bool has_split_offset() const;
  inline void clear_split_offset();
  static const int kSplitOffsetFieldNumber = 9;
  inline ::google::protobuf::int32 split_offset() const;
  inline void set_split_offset(::google::protobuf::int32 value);

  // optional float learning_rate_multiplier = 10 [default = 1];
  inline bool has_learning_rate_multiplier() const;
  inline void clear_learning_rate_multiplier();
  static const int kLearningRateMultiplierFieldNumber = 10;
  inline float learning_rate_multiplier() const;
  inline void set_learning_rate_multiplier(float value);

  // optional float weight_decay_multiplier = 11 [default = 1];
  inline bool has_weight_decay_multiplier() const;
  inline void clear_weight_decay_multiplier();
  static const int kWeightDecayMultiplierFieldNumber = 11;
  inline float weight_decay_multiplier() const;
  inline void set_weight_decay_multiplier(float value);

  // optional .singa.DAryProto data = 12;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 12;
  inline const ::singa::DAryProto& data() const;
  inline ::singa::DAryProto* mutable_data();
  inline ::singa::DAryProto* release_data();
  inline void set_allocated_data(::singa::DAryProto* data);

  // optional .singa.DAryProto grad = 13;
  inline bool has_grad() const;
  inline void clear_grad();
  static const int kGradFieldNumber = 13;
  inline const ::singa::DAryProto& grad() const;
  inline ::singa::DAryProto* mutable_grad();
  inline ::singa::DAryProto* release_grad();
  inline void set_allocated_grad(::singa::DAryProto* grad);

  // optional .singa.DAryProto history = 14;
  inline bool has_history() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 14;
  inline const ::singa::DAryProto& history() const;
  inline ::singa::DAryProto* mutable_history();
  inline ::singa::DAryProto* release_history();
  inline void set_allocated_history(::singa::DAryProto* history);

  // optional int32 threshold = 15 [default = 1];
  inline bool has_threshold() const;
  inline void clear_threshold();
  static const int kThresholdFieldNumber = 15;
  inline ::google::protobuf::int32 threshold() const;
  inline void set_threshold(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TVal)
  // @@protoc_insertion_point(class_scope:singa.TVal)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num_aggregate();
  inline void clear_has_num_aggregate();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_param_id();
  inline void clear_has_param_id();
  inline void set_has_split_id();
  inline void clear_has_split_id();
  inline void set_has_split_offset();
  inline void clear_has_split_offset();
  inline void set_has_learning_rate_multiplier();
  inline void clear_has_learning_rate_multiplier();
  inline void set_has_weight_decay_multiplier();
  inline void clear_has_weight_decay_multiplier();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_grad();
  inline void clear_has_grad();
  inline void set_has_history();
  inline void clear_has_history();
  inline void set_has_threshold();
  inline void clear_has_threshold();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;
  ::google::protobuf::int32 num_aggregate_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 param_id_;
  ::google::protobuf::int32 split_id_;
  ::google::protobuf::int32 split_offset_;
  float learning_rate_multiplier_;
  float weight_decay_multiplier_;
  ::singa::DAryProto* data_;
  ::singa::DAryProto* grad_;
  ::singa::DAryProto* history_;
  ::google::protobuf::int32 threshold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static TVal* default_instance_;
};
// -------------------------------------------------------------------

class Tuple : public ::google::protobuf::Message {
 public:
  Tuple();
  virtual ~Tuple();

  Tuple(const Tuple& from);

  inline Tuple& operator=(const Tuple& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tuple& default_instance();

  void Swap(Tuple* other);

  // implements Message ----------------------------------------------

  Tuple* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tuple& from);
  void MergeFrom(const Tuple& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .singa.TKey key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::singa::TKey& key() const;
  inline ::singa::TKey* mutable_key();
  inline ::singa::TKey* release_key();
  inline void set_allocated_key(::singa::TKey* key);

  // optional .singa.TVal val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline const ::singa::TVal& val() const;
  inline ::singa::TVal* mutable_val();
  inline ::singa::TVal* release_val();
  inline void set_allocated_val(::singa::TVal* val);

  // @@protoc_insertion_point(class_scope:singa.Tuple)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::singa::TKey* key_;
  ::singa::TVal* val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static Tuple* default_instance_;
};
// -------------------------------------------------------------------

class SGDVal : public ::google::protobuf::Message {
 public:
  SGDVal();
  virtual ~SGDVal();

  SGDVal(const SGDVal& from);

  inline SGDVal& operator=(const SGDVal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SGDVal& default_instance();

  void Swap(SGDVal* other);

  // implements Message ----------------------------------------------

  SGDVal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SGDVal& from);
  void MergeFrom(const SGDVal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kSgdFieldNumber = 101;
  static ::google::protobuf::internal::ExtensionIdentifier< ::singa::TVal,
      ::google::protobuf::internal::MessageTypeTraits< ::singa::SGDVal >, 11, false >
    sgd;
  // @@protoc_insertion_point(class_scope:singa.SGDVal)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static SGDVal* default_instance_;
};
// -------------------------------------------------------------------

class AdaVal : public ::google::protobuf::Message {
 public:
  AdaVal();
  virtual ~AdaVal();

  AdaVal(const AdaVal& from);

  inline AdaVal& operator=(const AdaVal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdaVal& default_instance();

  void Swap(AdaVal* other);

  // implements Message ----------------------------------------------

  AdaVal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdaVal& from);
  void MergeFrom(const AdaVal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kAdaFieldNumber = 102;
  static ::google::protobuf::internal::ExtensionIdentifier< ::singa::TVal,
      ::google::protobuf::internal::MessageTypeTraits< ::singa::AdaVal >, 11, false >
    ada;
  // @@protoc_insertion_point(class_scope:singa.AdaVal)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static AdaVal* default_instance_;
};
// -------------------------------------------------------------------

class MeanProto : public ::google::protobuf::Message {
 public:
  MeanProto();
  virtual ~MeanProto();

  MeanProto(const MeanProto& from);

  inline MeanProto& operator=(const MeanProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MeanProto& default_instance();

  void Swap(MeanProto* other);

  // implements Message ----------------------------------------------

  MeanProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MeanProto& from);
  void MergeFrom(const MeanProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num = 1 [default = 0];
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 channels = 2 [default = 0];
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 2;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 3 [default = 0];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 width = 4 [default = 0];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // repeated float data = 5 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 6 [packed = true];
  inline int diff_size() const;
  inline void clear_diff();
  static const int kDiffFieldNumber = 6;
  inline float diff(int index) const;
  inline void set_diff(int index, float value);
  inline void add_diff(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      diff() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_diff();

  // @@protoc_insertion_point(class_scope:singa.MeanProto)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > diff_;
  mutable int _diff_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static MeanProto* default_instance_;
};
// ===================================================================


// ===================================================================

// ModelProto

// optional string name = 1;
inline bool ModelProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ModelProto::name() const {
  return *name_;
}
inline void ModelProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ModelProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ModelProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ModelProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ModelProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .singa.NetProto net = 2;
inline bool ModelProto::has_net() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelProto::set_has_net() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelProto::clear_has_net() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelProto::clear_net() {
  if (net_ != NULL) net_->::singa::NetProto::Clear();
  clear_has_net();
}
inline const ::singa::NetProto& ModelProto::net() const {
  return net_ != NULL ? *net_ : *default_instance_->net_;
}
inline ::singa::NetProto* ModelProto::mutable_net() {
  set_has_net();
  if (net_ == NULL) net_ = new ::singa::NetProto;
  return net_;
}
inline ::singa::NetProto* ModelProto::release_net() {
  clear_has_net();
  ::singa::NetProto* temp = net_;
  net_ = NULL;
  return temp;
}
inline void ModelProto::set_allocated_net(::singa::NetProto* net) {
  delete net_;
  net_ = net;
  if (net) {
    set_has_net();
  } else {
    clear_has_net();
  }
}

// optional .singa.SolverProto solver = 3;
inline bool ModelProto::has_solver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelProto::set_has_solver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelProto::clear_has_solver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelProto::clear_solver() {
  if (solver_ != NULL) solver_->::singa::SolverProto::Clear();
  clear_has_solver();
}
inline const ::singa::SolverProto& ModelProto::solver() const {
  return solver_ != NULL ? *solver_ : *default_instance_->solver_;
}
inline ::singa::SolverProto* ModelProto::mutable_solver() {
  set_has_solver();
  if (solver_ == NULL) solver_ = new ::singa::SolverProto;
  return solver_;
}
inline ::singa::SolverProto* ModelProto::release_solver() {
  clear_has_solver();
  ::singa::SolverProto* temp = solver_;
  solver_ = NULL;
  return temp;
}
inline void ModelProto::set_allocated_solver(::singa::SolverProto* solver) {
  delete solver_;
  solver_ = solver;
  if (solver) {
    set_has_solver();
  } else {
    clear_has_solver();
  }
}

// -------------------------------------------------------------------

// NetProto

// repeated .singa.LayerProto layer = 1;
inline int NetProto::layer_size() const {
  return layer_.size();
}
inline void NetProto::clear_layer() {
  layer_.Clear();
}
inline const ::singa::LayerProto& NetProto::layer(int index) const {
  return layer_.Get(index);
}
inline ::singa::LayerProto* NetProto::mutable_layer(int index) {
  return layer_.Mutable(index);
}
inline ::singa::LayerProto* NetProto::add_layer() {
  return layer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::singa::LayerProto >&
NetProto::layer() const {
  return layer_;
}
inline ::google::protobuf::RepeatedPtrField< ::singa::LayerProto >*
NetProto::mutable_layer() {
  return &layer_;
}

// repeated .singa.EdgeProto edge = 2;
inline int NetProto::edge_size() const {
  return edge_.size();
}
inline void NetProto::clear_edge() {
  edge_.Clear();
}
inline const ::singa::EdgeProto& NetProto::edge(int index) const {
  return edge_.Get(index);
}
inline ::singa::EdgeProto* NetProto::mutable_edge(int index) {
  return edge_.Mutable(index);
}
inline ::singa::EdgeProto* NetProto::add_edge() {
  return edge_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::singa::EdgeProto >&
NetProto::edge() const {
  return edge_;
}
inline ::google::protobuf::RepeatedPtrField< ::singa::EdgeProto >*
NetProto::mutable_edge() {
  return &edge_;
}

// -------------------------------------------------------------------

// EdgeProto

// optional bool directed = 1 [default = true];
inline bool EdgeProto::has_directed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EdgeProto::set_has_directed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EdgeProto::clear_has_directed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EdgeProto::clear_directed() {
  directed_ = true;
  clear_has_directed();
}
inline bool EdgeProto::directed() const {
  return directed_;
}
inline void EdgeProto::set_directed(bool value) {
  set_has_directed();
  directed_ = value;
}

// optional string layer1 = 2;
inline bool EdgeProto::has_layer1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EdgeProto::set_has_layer1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EdgeProto::clear_has_layer1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EdgeProto::clear_layer1() {
  if (layer1_ != &::google::protobuf::internal::kEmptyString) {
    layer1_->clear();
  }
  clear_has_layer1();
}
inline const ::std::string& EdgeProto::layer1() const {
  return *layer1_;
}
inline void EdgeProto::set_layer1(const ::std::string& value) {
  set_has_layer1();
  if (layer1_ == &::google::protobuf::internal::kEmptyString) {
    layer1_ = new ::std::string;
  }
  layer1_->assign(value);
}
inline void EdgeProto::set_layer1(const char* value) {
  set_has_layer1();
  if (layer1_ == &::google::protobuf::internal::kEmptyString) {
    layer1_ = new ::std::string;
  }
  layer1_->assign(value);
}
inline void EdgeProto::set_layer1(const char* value, size_t size) {
  set_has_layer1();
  if (layer1_ == &::google::protobuf::internal::kEmptyString) {
    layer1_ = new ::std::string;
  }
  layer1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EdgeProto::mutable_layer1() {
  set_has_layer1();
  if (layer1_ == &::google::protobuf::internal::kEmptyString) {
    layer1_ = new ::std::string;
  }
  return layer1_;
}
inline ::std::string* EdgeProto::release_layer1() {
  clear_has_layer1();
  if (layer1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = layer1_;
    layer1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EdgeProto::set_allocated_layer1(::std::string* layer1) {
  if (layer1_ != &::google::protobuf::internal::kEmptyString) {
    delete layer1_;
  }
  if (layer1) {
    set_has_layer1();
    layer1_ = layer1;
  } else {
    clear_has_layer1();
    layer1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string layer2 = 3;
inline bool EdgeProto::has_layer2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EdgeProto::set_has_layer2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EdgeProto::clear_has_layer2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EdgeProto::clear_layer2() {
  if (layer2_ != &::google::protobuf::internal::kEmptyString) {
    layer2_->clear();
  }
  clear_has_layer2();
}
inline const ::std::string& EdgeProto::layer2() const {
  return *layer2_;
}
inline void EdgeProto::set_layer2(const ::std::string& value) {
  set_has_layer2();
  if (layer2_ == &::google::protobuf::internal::kEmptyString) {
    layer2_ = new ::std::string;
  }
  layer2_->assign(value);
}
inline void EdgeProto::set_layer2(const char* value) {
  set_has_layer2();
  if (layer2_ == &::google::protobuf::internal::kEmptyString) {
    layer2_ = new ::std::string;
  }
  layer2_->assign(value);
}
inline void EdgeProto::set_layer2(const char* value, size_t size) {
  set_has_layer2();
  if (layer2_ == &::google::protobuf::internal::kEmptyString) {
    layer2_ = new ::std::string;
  }
  layer2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EdgeProto::mutable_layer2() {
  set_has_layer2();
  if (layer2_ == &::google::protobuf::internal::kEmptyString) {
    layer2_ = new ::std::string;
  }
  return layer2_;
}
inline ::std::string* EdgeProto::release_layer2() {
  clear_has_layer2();
  if (layer2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = layer2_;
    layer2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EdgeProto::set_allocated_layer2(::std::string* layer2) {
  if (layer2_ != &::google::protobuf::internal::kEmptyString) {
    delete layer2_;
  }
  if (layer2) {
    set_has_layer2();
    layer2_ = layer2;
  } else {
    clear_has_layer2();
    layer2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DAryProto

// optional int32 partition_dim = 1 [default = -1];
inline bool DAryProto::has_partition_dim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DAryProto::set_has_partition_dim() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DAryProto::clear_has_partition_dim() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DAryProto::clear_partition_dim() {
  partition_dim_ = -1;
  clear_has_partition_dim();
}
inline ::google::protobuf::int32 DAryProto::partition_dim() const {
  return partition_dim_;
}
inline void DAryProto::set_partition_dim(::google::protobuf::int32 value) {
  set_has_partition_dim();
  partition_dim_ = value;
}

// repeated int32 shape = 2;
inline int DAryProto::shape_size() const {
  return shape_.size();
}
inline void DAryProto::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int32 DAryProto::shape(int index) const {
  return shape_.Get(index);
}
inline void DAryProto::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
}
inline void DAryProto::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DAryProto::shape() const {
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DAryProto::mutable_shape() {
  return &shape_;
}

// repeated float value = 3 [packed = true];
inline int DAryProto::value_size() const {
  return value_.size();
}
inline void DAryProto::clear_value() {
  value_.Clear();
}
inline float DAryProto::value(int index) const {
  return value_.Get(index);
}
inline void DAryProto::set_value(int index, float value) {
  value_.Set(index, value);
}
inline void DAryProto::add_value(float value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
DAryProto::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
DAryProto::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// ParamProto

// optional string name = 1;
inline bool ParamProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ParamProto::name() const {
  return *name_;
}
inline void ParamProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ParamProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ParamProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ParamProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ParamProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ParamProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 id = 2;
inline bool ParamProto::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamProto::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ParamProto::id() const {
  return id_;
}
inline void ParamProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated int32 shape = 3;
inline int ParamProto::shape_size() const {
  return shape_.size();
}
inline void ParamProto::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int32 ParamProto::shape(int index) const {
  return shape_.Get(index);
}
inline void ParamProto::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
}
inline void ParamProto::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ParamProto::shape() const {
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ParamProto::mutable_shape() {
  return &shape_;
}

// optional int32 split_threshold = 4 [default = 5000000];
inline bool ParamProto::has_split_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParamProto::set_has_split_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParamProto::clear_has_split_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParamProto::clear_split_threshold() {
  split_threshold_ = 5000000;
  clear_has_split_threshold();
}
inline ::google::protobuf::int32 ParamProto::split_threshold() const {
  return split_threshold_;
}
inline void ParamProto::set_split_threshold(::google::protobuf::int32 value) {
  set_has_split_threshold();
  split_threshold_ = value;
}

// optional int32 partition_dim = 5 [default = -1];
inline bool ParamProto::has_partition_dim() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParamProto::set_has_partition_dim() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParamProto::clear_has_partition_dim() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParamProto::clear_partition_dim() {
  partition_dim_ = -1;
  clear_has_partition_dim();
}
inline ::google::protobuf::int32 ParamProto::partition_dim() const {
  return partition_dim_;
}
inline void ParamProto::set_partition_dim(::google::protobuf::int32 value) {
  set_has_partition_dim();
  partition_dim_ = value;
}

// repeated .singa.DAryProto ary = 6;
inline int ParamProto::ary_size() const {
  return ary_.size();
}
inline void ParamProto::clear_ary() {
  ary_.Clear();
}
inline const ::singa::DAryProto& ParamProto::ary(int index) const {
  return ary_.Get(index);
}
inline ::singa::DAryProto* ParamProto::mutable_ary(int index) {
  return ary_.Mutable(index);
}
inline ::singa::DAryProto* ParamProto::add_ary() {
  return ary_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::singa::DAryProto >&
ParamProto::ary() const {
  return ary_;
}
inline ::google::protobuf::RepeatedPtrField< ::singa::DAryProto >*
ParamProto::mutable_ary() {
  return &ary_;
}

// optional .singa.ParamProto.InitMethod init_method = 7 [default = kConstant];
inline bool ParamProto::has_init_method() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ParamProto::set_has_init_method() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ParamProto::clear_has_init_method() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ParamProto::clear_init_method() {
  init_method_ = 0;
  clear_has_init_method();
}
inline ::singa::ParamProto_InitMethod ParamProto::init_method() const {
  return static_cast< ::singa::ParamProto_InitMethod >(init_method_);
}
inline void ParamProto::set_init_method(::singa::ParamProto_InitMethod value) {
  assert(::singa::ParamProto_InitMethod_IsValid(value));
  set_has_init_method();
  init_method_ = value;
}

// optional float value = 8 [default = 1];
inline bool ParamProto::has_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ParamProto::set_has_value() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ParamProto::clear_has_value() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ParamProto::clear_value() {
  value_ = 1;
  clear_has_value();
}
inline float ParamProto::value() const {
  return value_;
}
inline void ParamProto::set_value(float value) {
  set_has_value();
  value_ = value;
}

// optional float low = 9 [default = -1];
inline bool ParamProto::has_low() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ParamProto::set_has_low() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ParamProto::clear_has_low() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ParamProto::clear_low() {
  low_ = -1;
  clear_has_low();
}
inline float ParamProto::low() const {
  return low_;
}
inline void ParamProto::set_low(float value) {
  set_has_low();
  low_ = value;
}

// optional float high = 10 [default = 1];
inline bool ParamProto::has_high() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ParamProto::set_has_high() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ParamProto::clear_has_high() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ParamProto::clear_high() {
  high_ = 1;
  clear_has_high();
}
inline float ParamProto::high() const {
  return high_;
}
inline void ParamProto::set_high(float value) {
  set_has_high();
  high_ = value;
}

// optional float mean = 11 [default = 0];
inline bool ParamProto::has_mean() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ParamProto::set_has_mean() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ParamProto::clear_has_mean() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ParamProto::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float ParamProto::mean() const {
  return mean_;
}
inline void ParamProto::set_mean(float value) {
  set_has_mean();
  mean_ = value;
}

// optional float std = 12 [default = 1];
inline bool ParamProto::has_std() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ParamProto::set_has_std() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ParamProto::clear_has_std() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ParamProto::clear_std() {
  std_ = 1;
  clear_has_std();
}
inline float ParamProto::std() const {
  return std_;
}
inline void ParamProto::set_std(float value) {
  set_has_std();
  std_ = value;
}

// optional float learning_rate_multiplier = 13 [default = 1];
inline bool ParamProto::has_learning_rate_multiplier() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ParamProto::set_has_learning_rate_multiplier() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ParamProto::clear_has_learning_rate_multiplier() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ParamProto::clear_learning_rate_multiplier() {
  learning_rate_multiplier_ = 1;
  clear_has_learning_rate_multiplier();
}
inline float ParamProto::learning_rate_multiplier() const {
  return learning_rate_multiplier_;
}
inline void ParamProto::set_learning_rate_multiplier(float value) {
  set_has_learning_rate_multiplier();
  learning_rate_multiplier_ = value;
}

// optional float weight_decay_multiplier = 14 [default = 1];
inline bool ParamProto::has_weight_decay_multiplier() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ParamProto::set_has_weight_decay_multiplier() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ParamProto::clear_has_weight_decay_multiplier() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ParamProto::clear_weight_decay_multiplier() {
  weight_decay_multiplier_ = 1;
  clear_has_weight_decay_multiplier();
}
inline float ParamProto::weight_decay_multiplier() const {
  return weight_decay_multiplier_;
}
inline void ParamProto::set_weight_decay_multiplier(float value) {
  set_has_weight_decay_multiplier();
  weight_decay_multiplier_ = value;
}

// -------------------------------------------------------------------

// LayerProto

// optional string name = 1;
inline bool LayerProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LayerProto::name() const {
  return *name_;
}
inline void LayerProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LayerProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LayerProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LayerProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LayerProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LayerProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string type = 2;
inline bool LayerProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerProto::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& LayerProto::type() const {
  return *type_;
}
inline void LayerProto::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void LayerProto::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void LayerProto::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LayerProto::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* LayerProto::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LayerProto::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string src_layer = 3;
inline int LayerProto::src_layer_size() const {
  return src_layer_.size();
}
inline void LayerProto::clear_src_layer() {
  src_layer_.Clear();
}
inline const ::std::string& LayerProto::src_layer(int index) const {
  return src_layer_.Get(index);
}
inline ::std::string* LayerProto::mutable_src_layer(int index) {
  return src_layer_.Mutable(index);
}
inline void LayerProto::set_src_layer(int index, const ::std::string& value) {
  src_layer_.Mutable(index)->assign(value);
}
inline void LayerProto::set_src_layer(int index, const char* value) {
  src_layer_.Mutable(index)->assign(value);
}
inline void LayerProto::set_src_layer(int index, const char* value, size_t size) {
  src_layer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LayerProto::add_src_layer() {
  return src_layer_.Add();
}
inline void LayerProto::add_src_layer(const ::std::string& value) {
  src_layer_.Add()->assign(value);
}
inline void LayerProto::add_src_layer(const char* value) {
  src_layer_.Add()->assign(value);
}
inline void LayerProto::add_src_layer(const char* value, size_t size) {
  src_layer_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerProto::src_layer() const {
  return src_layer_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerProto::mutable_src_layer() {
  return &src_layer_;
}

// repeated .singa.DAryProto ary = 5;
inline int LayerProto::ary_size() const {
  return ary_.size();
}
inline void LayerProto::clear_ary() {
  ary_.Clear();
}
inline const ::singa::DAryProto& LayerProto::ary(int index) const {
  return ary_.Get(index);
}
inline ::singa::DAryProto* LayerProto::mutable_ary(int index) {
  return ary_.Mutable(index);
}
inline ::singa::DAryProto* LayerProto::add_ary() {
  return ary_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::singa::DAryProto >&
LayerProto::ary() const {
  return ary_;
}
inline ::google::protobuf::RepeatedPtrField< ::singa::DAryProto >*
LayerProto::mutable_ary() {
  return &ary_;
}

// repeated string share_ary = 6;
inline int LayerProto::share_ary_size() const {
  return share_ary_.size();
}
inline void LayerProto::clear_share_ary() {
  share_ary_.Clear();
}
inline const ::std::string& LayerProto::share_ary(int index) const {
  return share_ary_.Get(index);
}
inline ::std::string* LayerProto::mutable_share_ary(int index) {
  return share_ary_.Mutable(index);
}
inline void LayerProto::set_share_ary(int index, const ::std::string& value) {
  share_ary_.Mutable(index)->assign(value);
}
inline void LayerProto::set_share_ary(int index, const char* value) {
  share_ary_.Mutable(index)->assign(value);
}
inline void LayerProto::set_share_ary(int index, const char* value, size_t size) {
  share_ary_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LayerProto::add_share_ary() {
  return share_ary_.Add();
}
inline void LayerProto::add_share_ary(const ::std::string& value) {
  share_ary_.Add()->assign(value);
}
inline void LayerProto::add_share_ary(const char* value) {
  share_ary_.Add()->assign(value);
}
inline void LayerProto::add_share_ary(const char* value, size_t size) {
  share_ary_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerProto::share_ary() const {
  return share_ary_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerProto::mutable_share_ary() {
  return &share_ary_;
}

// repeated .singa.ParamProto param = 7;
inline int LayerProto::param_size() const {
  return param_.size();
}
inline void LayerProto::clear_param() {
  param_.Clear();
}
inline const ::singa::ParamProto& LayerProto::param(int index) const {
  return param_.Get(index);
}
inline ::singa::ParamProto* LayerProto::mutable_param(int index) {
  return param_.Mutable(index);
}
inline ::singa::ParamProto* LayerProto::add_param() {
  return param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::singa::ParamProto >&
LayerProto::param() const {
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::singa::ParamProto >*
LayerProto::mutable_param() {
  return &param_;
}

// repeated string share_param = 8;
inline int LayerProto::share_param_size() const {
  return share_param_.size();
}
inline void LayerProto::clear_share_param() {
  share_param_.Clear();
}
inline const ::std::string& LayerProto::share_param(int index) const {
  return share_param_.Get(index);
}
inline ::std::string* LayerProto::mutable_share_param(int index) {
  return share_param_.Mutable(index);
}
inline void LayerProto::set_share_param(int index, const ::std::string& value) {
  share_param_.Mutable(index)->assign(value);
}
inline void LayerProto::set_share_param(int index, const char* value) {
  share_param_.Mutable(index)->assign(value);
}
inline void LayerProto::set_share_param(int index, const char* value, size_t size) {
  share_param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LayerProto::add_share_param() {
  return share_param_.Add();
}
inline void LayerProto::add_share_param(const ::std::string& value) {
  share_param_.Add()->assign(value);
}
inline void LayerProto::add_share_param(const char* value) {
  share_param_.Add()->assign(value);
}
inline void LayerProto::add_share_param(const char* value, size_t size) {
  share_param_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerProto::share_param() const {
  return share_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerProto::mutable_share_param() {
  return &share_param_;
}

// repeated .singa.Phase exclude = 9;
inline int LayerProto::exclude_size() const {
  return exclude_.size();
}
inline void LayerProto::clear_exclude() {
  exclude_.Clear();
}
inline ::singa::Phase LayerProto::exclude(int index) const {
  return static_cast< ::singa::Phase >(exclude_.Get(index));
}
inline void LayerProto::set_exclude(int index, ::singa::Phase value) {
  assert(::singa::Phase_IsValid(value));
  exclude_.Set(index, value);
}
inline void LayerProto::add_exclude(::singa::Phase value) {
  assert(::singa::Phase_IsValid(value));
  exclude_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
LayerProto::exclude() const {
  return exclude_;
}
inline ::google::protobuf::RepeatedField<int>*
LayerProto::mutable_exclude() {
  return &exclude_;
}

// optional .singa.ConvolutionProto convolution_param = 11;
inline bool LayerProto::has_convolution_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LayerProto::set_has_convolution_param() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LayerProto::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LayerProto::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::singa::ConvolutionProto::Clear();
  clear_has_convolution_param();
}
inline const ::singa::ConvolutionProto& LayerProto::convolution_param() const {
  return convolution_param_ != NULL ? *convolution_param_ : *default_instance_->convolution_param_;
}
inline ::singa::ConvolutionProto* LayerProto::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) convolution_param_ = new ::singa::ConvolutionProto;
  return convolution_param_;
}
inline ::singa::ConvolutionProto* LayerProto::release_convolution_param() {
  clear_has_convolution_param();
  ::singa::ConvolutionProto* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_convolution_param(::singa::ConvolutionProto* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
}

// optional .singa.DataProto data_param = 12;
inline bool LayerProto::has_data_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LayerProto::set_has_data_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LayerProto::clear_has_data_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LayerProto::clear_data_param() {
  if (data_param_ != NULL) data_param_->::singa::DataProto::Clear();
  clear_has_data_param();
}
inline const ::singa::DataProto& LayerProto::data_param() const {
  return data_param_ != NULL ? *data_param_ : *default_instance_->data_param_;
}
inline ::singa::DataProto* LayerProto::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) data_param_ = new ::singa::DataProto;
  return data_param_;
}
inline ::singa::DataProto* LayerProto::release_data_param() {
  clear_has_data_param();
  ::singa::DataProto* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_data_param(::singa::DataProto* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
}

// optional .singa.DropoutProto dropout_param = 13;
inline bool LayerProto::has_dropout_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LayerProto::set_has_dropout_param() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LayerProto::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LayerProto::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::singa::DropoutProto::Clear();
  clear_has_dropout_param();
}
inline const ::singa::DropoutProto& LayerProto::dropout_param() const {
  return dropout_param_ != NULL ? *dropout_param_ : *default_instance_->dropout_param_;
}
inline ::singa::DropoutProto* LayerProto::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) dropout_param_ = new ::singa::DropoutProto;
  return dropout_param_;
}
inline ::singa::DropoutProto* LayerProto::release_dropout_param() {
  clear_has_dropout_param();
  ::singa::DropoutProto* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_dropout_param(::singa::DropoutProto* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
}

// optional .singa.InnerProductProto inner_product_param = 14;
inline bool LayerProto::has_inner_product_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LayerProto::set_has_inner_product_param() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LayerProto::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LayerProto::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::singa::InnerProductProto::Clear();
  clear_has_inner_product_param();
}
inline const ::singa::InnerProductProto& LayerProto::inner_product_param() const {
  return inner_product_param_ != NULL ? *inner_product_param_ : *default_instance_->inner_product_param_;
}
inline ::singa::InnerProductProto* LayerProto::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) inner_product_param_ = new ::singa::InnerProductProto;
  return inner_product_param_;
}
inline ::singa::InnerProductProto* LayerProto::release_inner_product_param() {
  clear_has_inner_product_param();
  ::singa::InnerProductProto* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_inner_product_param(::singa::InnerProductProto* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
}

// optional .singa.LRNProto lrn_param = 15;
inline bool LayerProto::has_lrn_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LayerProto::set_has_lrn_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LayerProto::clear_has_lrn_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LayerProto::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::singa::LRNProto::Clear();
  clear_has_lrn_param();
}
inline const ::singa::LRNProto& LayerProto::lrn_param() const {
  return lrn_param_ != NULL ? *lrn_param_ : *default_instance_->lrn_param_;
}
inline ::singa::LRNProto* LayerProto::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) lrn_param_ = new ::singa::LRNProto;
  return lrn_param_;
}
inline ::singa::LRNProto* LayerProto::release_lrn_param() {
  clear_has_lrn_param();
  ::singa::LRNProto* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_lrn_param(::singa::LRNProto* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
}

// optional .singa.MnistProto mnist_param = 16;
inline bool LayerProto::has_mnist_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LayerProto::set_has_mnist_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LayerProto::clear_has_mnist_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LayerProto::clear_mnist_param() {
  if (mnist_param_ != NULL) mnist_param_->::singa::MnistProto::Clear();
  clear_has_mnist_param();
}
inline const ::singa::MnistProto& LayerProto::mnist_param() const {
  return mnist_param_ != NULL ? *mnist_param_ : *default_instance_->mnist_param_;
}
inline ::singa::MnistProto* LayerProto::mutable_mnist_param() {
  set_has_mnist_param();
  if (mnist_param_ == NULL) mnist_param_ = new ::singa::MnistProto;
  return mnist_param_;
}
inline ::singa::MnistProto* LayerProto::release_mnist_param() {
  clear_has_mnist_param();
  ::singa::MnistProto* temp = mnist_param_;
  mnist_param_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_mnist_param(::singa::MnistProto* mnist_param) {
  delete mnist_param_;
  mnist_param_ = mnist_param;
  if (mnist_param) {
    set_has_mnist_param();
  } else {
    clear_has_mnist_param();
  }
}

// optional .singa.PoolingProto pooling_param = 17;
inline bool LayerProto::has_pooling_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LayerProto::set_has_pooling_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LayerProto::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LayerProto::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::singa::PoolingProto::Clear();
  clear_has_pooling_param();
}
inline const ::singa::PoolingProto& LayerProto::pooling_param() const {
  return pooling_param_ != NULL ? *pooling_param_ : *default_instance_->pooling_param_;
}
inline ::singa::PoolingProto* LayerProto::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) pooling_param_ = new ::singa::PoolingProto;
  return pooling_param_;
}
inline ::singa::PoolingProto* LayerProto::release_pooling_param() {
  clear_has_pooling_param();
  ::singa::PoolingProto* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_pooling_param(::singa::PoolingProto* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
}

// optional .singa.ReLUProto relu_param = 18;
inline bool LayerProto::has_relu_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LayerProto::set_has_relu_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LayerProto::clear_has_relu_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LayerProto::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::singa::ReLUProto::Clear();
  clear_has_relu_param();
}
inline const ::singa::ReLUProto& LayerProto::relu_param() const {
  return relu_param_ != NULL ? *relu_param_ : *default_instance_->relu_param_;
}
inline ::singa::ReLUProto* LayerProto::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) relu_param_ = new ::singa::ReLUProto;
  return relu_param_;
}
inline ::singa::ReLUProto* LayerProto::release_relu_param() {
  clear_has_relu_param();
  ::singa::ReLUProto* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_relu_param(::singa::ReLUProto* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
}

// optional .singa.SoftmaxLossProto softmaxloss_param = 19;
inline bool LayerProto::has_softmaxloss_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LayerProto::set_has_softmaxloss_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LayerProto::clear_has_softmaxloss_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LayerProto::clear_softmaxloss_param() {
  if (softmaxloss_param_ != NULL) softmaxloss_param_->::singa::SoftmaxLossProto::Clear();
  clear_has_softmaxloss_param();
}
inline const ::singa::SoftmaxLossProto& LayerProto::softmaxloss_param() const {
  return softmaxloss_param_ != NULL ? *softmaxloss_param_ : *default_instance_->softmaxloss_param_;
}
inline ::singa::SoftmaxLossProto* LayerProto::mutable_softmaxloss_param() {
  set_has_softmaxloss_param();
  if (softmaxloss_param_ == NULL) softmaxloss_param_ = new ::singa::SoftmaxLossProto;
  return softmaxloss_param_;
}
inline ::singa::SoftmaxLossProto* LayerProto::release_softmaxloss_param() {
  clear_has_softmaxloss_param();
  ::singa::SoftmaxLossProto* temp = softmaxloss_param_;
  softmaxloss_param_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_softmaxloss_param(::singa::SoftmaxLossProto* softmaxloss_param) {
  delete softmaxloss_param_;
  softmaxloss_param_ = softmaxloss_param;
  if (softmaxloss_param) {
    set_has_softmaxloss_param();
  } else {
    clear_has_softmaxloss_param();
  }
}

// optional .singa.TanhProto tanh_param = 20;
inline bool LayerProto::has_tanh_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LayerProto::set_has_tanh_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LayerProto::clear_has_tanh_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LayerProto::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::singa::TanhProto::Clear();
  clear_has_tanh_param();
}
inline const ::singa::TanhProto& LayerProto::tanh_param() const {
  return tanh_param_ != NULL ? *tanh_param_ : *default_instance_->tanh_param_;
}
inline ::singa::TanhProto* LayerProto::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) tanh_param_ = new ::singa::TanhProto;
  return tanh_param_;
}
inline ::singa::TanhProto* LayerProto::release_tanh_param() {
  clear_has_tanh_param();
  ::singa::TanhProto* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_tanh_param(::singa::TanhProto* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
}

// -------------------------------------------------------------------

// TanhProto

// optional float a = 1;
inline bool TanhProto::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TanhProto::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TanhProto::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TanhProto::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline float TanhProto::a() const {
  return a_;
}
inline void TanhProto::set_a(float value) {
  set_has_a();
  a_ = value;
}

// optional float b = 2;
inline bool TanhProto::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TanhProto::set_has_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TanhProto::clear_has_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TanhProto::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline float TanhProto::b() const {
  return b_;
}
inline void TanhProto::set_b(float value) {
  set_has_b();
  b_ = value;
}

// -------------------------------------------------------------------

// SoftmaxLossProto

// optional uint32 top_k = 1 [default = 1];
inline bool SoftmaxLossProto::has_top_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftmaxLossProto::set_has_top_k() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoftmaxLossProto::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoftmaxLossProto::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
inline ::google::protobuf::uint32 SoftmaxLossProto::top_k() const {
  return top_k_;
}
inline void SoftmaxLossProto::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
}

// -------------------------------------------------------------------

// ConvolutionProto

// optional uint32 num_output = 1;
inline bool ConvolutionProto::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvolutionProto::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvolutionProto::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvolutionProto::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 ConvolutionProto::num_output() const {
  return num_output_;
}
inline void ConvolutionProto::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
}

// optional bool bias_term = 2 [default = true];
inline bool ConvolutionProto::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvolutionProto::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvolutionProto::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvolutionProto::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool ConvolutionProto::bias_term() const {
  return bias_term_;
}
inline void ConvolutionProto::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
}

// optional uint32 pad = 3 [default = 0];
inline bool ConvolutionProto::has_pad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConvolutionProto::set_has_pad() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConvolutionProto::clear_has_pad() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConvolutionProto::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 ConvolutionProto::pad() const {
  return pad_;
}
inline void ConvolutionProto::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
}

// optional uint32 pad_h = 9 [default = 0];
inline bool ConvolutionProto::has_pad_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConvolutionProto::set_has_pad_h() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConvolutionProto::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConvolutionProto::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 ConvolutionProto::pad_h() const {
  return pad_h_;
}
inline void ConvolutionProto::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
}

// optional uint32 pad_w = 10 [default = 0];
inline bool ConvolutionProto::has_pad_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConvolutionProto::set_has_pad_w() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConvolutionProto::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConvolutionProto::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 ConvolutionProto::pad_w() const {
  return pad_w_;
}
inline void ConvolutionProto::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
}

// optional uint32 kernel_size = 4;
inline bool ConvolutionProto::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConvolutionProto::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConvolutionProto::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConvolutionProto::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
inline ::google::protobuf::uint32 ConvolutionProto::kernel_size() const {
  return kernel_size_;
}
inline void ConvolutionProto::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
}

// optional uint32 kernel_h = 11;
inline bool ConvolutionProto::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConvolutionProto::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConvolutionProto::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConvolutionProto::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 ConvolutionProto::kernel_h() const {
  return kernel_h_;
}
inline void ConvolutionProto::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
}

// optional uint32 kernel_w = 12;
inline bool ConvolutionProto::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConvolutionProto::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConvolutionProto::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConvolutionProto::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 ConvolutionProto::kernel_w() const {
  return kernel_w_;
}
inline void ConvolutionProto::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
}

// optional uint32 group = 5 [default = 1];
inline bool ConvolutionProto::has_group() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConvolutionProto::set_has_group() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConvolutionProto::clear_has_group() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConvolutionProto::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 ConvolutionProto::group() const {
  return group_;
}
inline void ConvolutionProto::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
}

// optional uint32 stride = 6 [default = 1];
inline bool ConvolutionProto::has_stride() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConvolutionProto::set_has_stride() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConvolutionProto::clear_has_stride() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConvolutionProto::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 ConvolutionProto::stride() const {
  return stride_;
}
inline void ConvolutionProto::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
}

// optional uint32 stride_h = 13;
inline bool ConvolutionProto::has_stride_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConvolutionProto::set_has_stride_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConvolutionProto::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConvolutionProto::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 ConvolutionProto::stride_h() const {
  return stride_h_;
}
inline void ConvolutionProto::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
}

// optional uint32 stride_w = 14;
inline bool ConvolutionProto::has_stride_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConvolutionProto::set_has_stride_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConvolutionProto::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConvolutionProto::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 ConvolutionProto::stride_w() const {
  return stride_w_;
}
inline void ConvolutionProto::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
}

// -------------------------------------------------------------------

// DataProto

// optional string source = 1;
inline bool DataProto::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataProto::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataProto::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataProto::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& DataProto::source() const {
  return *source_;
}
inline void DataProto::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void DataProto::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void DataProto::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataProto::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* DataProto::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataProto::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float scale = 2 [default = 1];
inline bool DataProto::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataProto::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataProto::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataProto::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float DataProto::scale() const {
  return scale_;
}
inline void DataProto::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// optional string mean_file = 3;
inline bool DataProto::has_mean_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataProto::set_has_mean_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataProto::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataProto::clear_mean_file() {
  if (mean_file_ != &::google::protobuf::internal::kEmptyString) {
    mean_file_->clear();
  }
  clear_has_mean_file();
}
inline const ::std::string& DataProto::mean_file() const {
  return *mean_file_;
}
inline void DataProto::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
}
inline void DataProto::set_mean_file(const char* value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
}
inline void DataProto::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataProto::mutable_mean_file() {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    mean_file_ = new ::std::string;
  }
  return mean_file_;
}
inline ::std::string* DataProto::release_mean_file() {
  clear_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mean_file_;
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataProto::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file_ != &::google::protobuf::internal::kEmptyString) {
    delete mean_file_;
  }
  if (mean_file) {
    set_has_mean_file();
    mean_file_ = mean_file;
  } else {
    clear_has_mean_file();
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 batch_size = 4;
inline bool DataProto::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataProto::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataProto::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataProto::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 DataProto::batch_size() const {
  return batch_size_;
}
inline void DataProto::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
}

// optional uint32 crop_size = 5 [default = 0];
inline bool DataProto::has_crop_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataProto::set_has_crop_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataProto::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataProto::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 DataProto::crop_size() const {
  return crop_size_;
}
inline void DataProto::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
}

// optional bool mirror = 6 [default = false];
inline bool DataProto::has_mirror() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataProto::set_has_mirror() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataProto::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataProto::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool DataProto::mirror() const {
  return mirror_;
}
inline void DataProto::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool DataProto::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataProto::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataProto::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataProto::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 DataProto::rand_skip() const {
  return rand_skip_;
}
inline void DataProto::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
}

// -------------------------------------------------------------------

// MnistProto

// optional int32 kernel = 1;
inline bool MnistProto::has_kernel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MnistProto::set_has_kernel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MnistProto::clear_has_kernel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MnistProto::clear_kernel() {
  kernel_ = 0;
  clear_has_kernel();
}
inline ::google::protobuf::int32 MnistProto::kernel() const {
  return kernel_;
}
inline void MnistProto::set_kernel(::google::protobuf::int32 value) {
  set_has_kernel();
  kernel_ = value;
}

// repeated float sigma = 2;
inline int MnistProto::sigma_size() const {
  return sigma_.size();
}
inline void MnistProto::clear_sigma() {
  sigma_.Clear();
}
inline float MnistProto::sigma(int index) const {
  return sigma_.Get(index);
}
inline void MnistProto::set_sigma(int index, float value) {
  sigma_.Set(index, value);
}
inline void MnistProto::add_sigma(float value) {
  sigma_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
MnistProto::sigma() const {
  return sigma_;
}
inline ::google::protobuf::RepeatedField< float >*
MnistProto::mutable_sigma() {
  return &sigma_;
}

// repeated float alpha = 3;
inline int MnistProto::alpha_size() const {
  return alpha_.size();
}
inline void MnistProto::clear_alpha() {
  alpha_.Clear();
}
inline float MnistProto::alpha(int index) const {
  return alpha_.Get(index);
}
inline void MnistProto::set_alpha(int index, float value) {
  alpha_.Set(index, value);
}
inline void MnistProto::add_alpha(float value) {
  alpha_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
MnistProto::alpha() const {
  return alpha_;
}
inline ::google::protobuf::RepeatedField< float >*
MnistProto::mutable_alpha() {
  return &alpha_;
}

// repeated float beta = 4;
inline int MnistProto::beta_size() const {
  return beta_.size();
}
inline void MnistProto::clear_beta() {
  beta_.Clear();
}
inline float MnistProto::beta(int index) const {
  return beta_.Get(index);
}
inline void MnistProto::set_beta(int index, float value) {
  beta_.Set(index, value);
}
inline void MnistProto::add_beta(float value) {
  beta_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
MnistProto::beta() const {
  return beta_;
}
inline ::google::protobuf::RepeatedField< float >*
MnistProto::mutable_beta() {
  return &beta_;
}

// repeated float gamma = 5;
inline int MnistProto::gamma_size() const {
  return gamma_.size();
}
inline void MnistProto::clear_gamma() {
  gamma_.Clear();
}
inline float MnistProto::gamma(int index) const {
  return gamma_.Get(index);
}
inline void MnistProto::set_gamma(int index, float value) {
  gamma_.Set(index, value);
}
inline void MnistProto::add_gamma(float value) {
  gamma_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
MnistProto::gamma() const {
  return gamma_;
}
inline ::google::protobuf::RepeatedField< float >*
MnistProto::mutable_gamma() {
  return &gamma_;
}

// optional int32 size = 6;
inline bool MnistProto::has_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MnistProto::set_has_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MnistProto::clear_has_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MnistProto::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 MnistProto::size() const {
  return size_;
}
inline void MnistProto::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// optional int32 elastic_freq = 7;
inline bool MnistProto::has_elastic_freq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MnistProto::set_has_elastic_freq() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MnistProto::clear_has_elastic_freq() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MnistProto::clear_elastic_freq() {
  elastic_freq_ = 0;
  clear_has_elastic_freq();
}
inline ::google::protobuf::int32 MnistProto::elastic_freq() const {
  return elastic_freq_;
}
inline void MnistProto::set_elastic_freq(::google::protobuf::int32 value) {
  set_has_elastic_freq();
  elastic_freq_ = value;
}

// optional bool normalize = 8 [default = true];
inline bool MnistProto::has_normalize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MnistProto::set_has_normalize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MnistProto::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MnistProto::clear_normalize() {
  normalize_ = true;
  clear_has_normalize();
}
inline bool MnistProto::normalize() const {
  return normalize_;
}
inline void MnistProto::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
}

// -------------------------------------------------------------------

// DropoutProto

// optional float dropout_ratio = 1 [default = 0.5];
inline bool DropoutProto::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropoutProto::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropoutProto::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropoutProto::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
inline float DropoutProto::dropout_ratio() const {
  return dropout_ratio_;
}
inline void DropoutProto::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
}

// -------------------------------------------------------------------

// InnerProductProto

// optional uint32 num_output = 1;
inline bool InnerProductProto::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerProductProto::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerProductProto::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerProductProto::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 InnerProductProto::num_output() const {
  return num_output_;
}
inline void InnerProductProto::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
}

// optional bool bias_term = 2 [default = true];
inline bool InnerProductProto::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerProductProto::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerProductProto::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerProductProto::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool InnerProductProto::bias_term() const {
  return bias_term_;
}
inline void InnerProductProto::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
}

// -------------------------------------------------------------------

// LRNProto

// optional uint32 local_size = 1 [default = 5];
inline bool LRNProto::has_local_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LRNProto::set_has_local_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LRNProto::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LRNProto::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 LRNProto::local_size() const {
  return local_size_;
}
inline void LRNProto::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
}

// optional float alpha = 2 [default = 1];
inline bool LRNProto::has_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LRNProto::set_has_alpha() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LRNProto::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LRNProto::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float LRNProto::alpha() const {
  return alpha_;
}
inline void LRNProto::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
}

// optional float beta = 3 [default = 0.75];
inline bool LRNProto::has_beta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LRNProto::set_has_beta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LRNProto::clear_has_beta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LRNProto::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float LRNProto::beta() const {
  return beta_;
}
inline void LRNProto::set_beta(float value) {
  set_has_beta();
  beta_ = value;
}

// optional .singa.LRNProto.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
inline bool LRNProto::has_norm_region() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LRNProto::set_has_norm_region() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LRNProto::clear_has_norm_region() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LRNProto::clear_norm_region() {
  norm_region_ = 0;
  clear_has_norm_region();
}
inline ::singa::LRNProto_NormRegion LRNProto::norm_region() const {
  return static_cast< ::singa::LRNProto_NormRegion >(norm_region_);
}
inline void LRNProto::set_norm_region(::singa::LRNProto_NormRegion value) {
  assert(::singa::LRNProto_NormRegion_IsValid(value));
  set_has_norm_region();
  norm_region_ = value;
}

// optional float knorm = 5 [default = 1];
inline bool LRNProto::has_knorm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LRNProto::set_has_knorm() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LRNProto::clear_has_knorm() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LRNProto::clear_knorm() {
  knorm_ = 1;
  clear_has_knorm();
}
inline float LRNProto::knorm() const {
  return knorm_;
}
inline void LRNProto::set_knorm(float value) {
  set_has_knorm();
  knorm_ = value;
}

// -------------------------------------------------------------------

// PoolingProto

// optional .singa.PoolingProto.PoolMethod pool = 1 [default = MAX];
inline bool PoolingProto::has_pool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoolingProto::set_has_pool() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoolingProto::clear_has_pool() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoolingProto::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::singa::PoolingProto_PoolMethod PoolingProto::pool() const {
  return static_cast< ::singa::PoolingProto_PoolMethod >(pool_);
}
inline void PoolingProto::set_pool(::singa::PoolingProto_PoolMethod value) {
  assert(::singa::PoolingProto_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
}

// optional uint32 pad = 4 [default = 0];
inline bool PoolingProto::has_pad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoolingProto::set_has_pad() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoolingProto::clear_has_pad() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoolingProto::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 PoolingProto::pad() const {
  return pad_;
}
inline void PoolingProto::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
}

// optional uint32 pad_h = 9 [default = 0];
inline bool PoolingProto::has_pad_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoolingProto::set_has_pad_h() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoolingProto::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoolingProto::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 PoolingProto::pad_h() const {
  return pad_h_;
}
inline void PoolingProto::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
}

// optional uint32 pad_w = 10 [default = 0];
inline bool PoolingProto::has_pad_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoolingProto::set_has_pad_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoolingProto::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoolingProto::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 PoolingProto::pad_w() const {
  return pad_w_;
}
inline void PoolingProto::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
}

// optional uint32 kernel_size = 2;
inline bool PoolingProto::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PoolingProto::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PoolingProto::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PoolingProto::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
inline ::google::protobuf::uint32 PoolingProto::kernel_size() const {
  return kernel_size_;
}
inline void PoolingProto::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
}

// optional uint32 kernel_h = 5;
inline bool PoolingProto::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PoolingProto::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PoolingProto::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PoolingProto::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 PoolingProto::kernel_h() const {
  return kernel_h_;
}
inline void PoolingProto::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
}

// optional uint32 kernel_w = 6;
inline bool PoolingProto::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PoolingProto::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PoolingProto::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PoolingProto::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 PoolingProto::kernel_w() const {
  return kernel_w_;
}
inline void PoolingProto::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
}

// optional uint32 stride = 3 [default = 1];
inline bool PoolingProto::has_stride() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PoolingProto::set_has_stride() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PoolingProto::clear_has_stride() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PoolingProto::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 PoolingProto::stride() const {
  return stride_;
}
inline void PoolingProto::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
}

// optional uint32 stride_h = 7;
inline bool PoolingProto::has_stride_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PoolingProto::set_has_stride_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PoolingProto::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PoolingProto::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 PoolingProto::stride_h() const {
  return stride_h_;
}
inline void PoolingProto::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
}

// optional uint32 stride_w = 8;
inline bool PoolingProto::has_stride_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PoolingProto::set_has_stride_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PoolingProto::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PoolingProto::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 PoolingProto::stride_w() const {
  return stride_w_;
}
inline void PoolingProto::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
}

// -------------------------------------------------------------------

// ReLUProto

// optional float negative_slope = 1 [default = 0];
inline bool ReLUProto::has_negative_slope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReLUProto::set_has_negative_slope() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReLUProto::clear_has_negative_slope() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReLUProto::clear_negative_slope() {
  negative_slope_ = 0;
  clear_has_negative_slope();
}
inline float ReLUProto::negative_slope() const {
  return negative_slope_;
}
inline void ReLUProto::set_negative_slope(float value) {
  set_has_negative_slope();
  negative_slope_ = value;
}

// -------------------------------------------------------------------

// PerformanceProto

// optional float topk_precision = 1 [default = 0];
inline bool PerformanceProto::has_topk_precision() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerformanceProto::set_has_topk_precision() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PerformanceProto::clear_has_topk_precision() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PerformanceProto::clear_topk_precision() {
  topk_precision_ = 0;
  clear_has_topk_precision();
}
inline float PerformanceProto::topk_precision() const {
  return topk_precision_;
}
inline void PerformanceProto::set_topk_precision(float value) {
  set_has_topk_precision();
  topk_precision_ = value;
}

// optional float top_precision = 2 [default = 0];
inline bool PerformanceProto::has_top_precision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerformanceProto::set_has_top_precision() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PerformanceProto::clear_has_top_precision() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PerformanceProto::clear_top_precision() {
  top_precision_ = 0;
  clear_has_top_precision();
}
inline float PerformanceProto::top_precision() const {
  return top_precision_;
}
inline void PerformanceProto::set_top_precision(float value) {
  set_has_top_precision();
  top_precision_ = value;
}

// optional float loss = 3 [default = 0];
inline bool PerformanceProto::has_loss() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerformanceProto::set_has_loss() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PerformanceProto::clear_has_loss() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PerformanceProto::clear_loss() {
  loss_ = 0;
  clear_has_loss();
}
inline float PerformanceProto::loss() const {
  return loss_;
}
inline void PerformanceProto::set_loss(float value) {
  set_has_loss();
  loss_ = value;
}

// optional int32 count = 4 [default = 0];
inline bool PerformanceProto::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerformanceProto::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PerformanceProto::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PerformanceProto::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 PerformanceProto::count() const {
  return count_;
}
inline void PerformanceProto::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 step = 5 [default = 0];
inline bool PerformanceProto::has_step() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerformanceProto::set_has_step() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PerformanceProto::clear_has_step() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PerformanceProto::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::google::protobuf::int32 PerformanceProto::step() const {
  return step_;
}
inline void PerformanceProto::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
}

// -------------------------------------------------------------------

// SolverProto

// optional int32 step = 1 [default = 0];
inline bool SolverProto::has_step() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverProto::set_has_step() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverProto::clear_has_step() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverProto::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::google::protobuf::int32 SolverProto::step() const {
  return step_;
}
inline void SolverProto::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
}

// optional string train_folder = 2 [default = "train"];
inline bool SolverProto::has_train_folder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverProto::set_has_train_folder() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverProto::clear_has_train_folder() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverProto::clear_train_folder() {
  if (train_folder_ != _default_train_folder_) {
    train_folder_->assign(*_default_train_folder_);
  }
  clear_has_train_folder();
}
inline const ::std::string& SolverProto::train_folder() const {
  return *train_folder_;
}
inline void SolverProto::set_train_folder(const ::std::string& value) {
  set_has_train_folder();
  if (train_folder_ == _default_train_folder_) {
    train_folder_ = new ::std::string;
  }
  train_folder_->assign(value);
}
inline void SolverProto::set_train_folder(const char* value) {
  set_has_train_folder();
  if (train_folder_ == _default_train_folder_) {
    train_folder_ = new ::std::string;
  }
  train_folder_->assign(value);
}
inline void SolverProto::set_train_folder(const char* value, size_t size) {
  set_has_train_folder();
  if (train_folder_ == _default_train_folder_) {
    train_folder_ = new ::std::string;
  }
  train_folder_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SolverProto::mutable_train_folder() {
  set_has_train_folder();
  if (train_folder_ == _default_train_folder_) {
    train_folder_ = new ::std::string(*_default_train_folder_);
  }
  return train_folder_;
}
inline ::std::string* SolverProto::release_train_folder() {
  clear_has_train_folder();
  if (train_folder_ == _default_train_folder_) {
    return NULL;
  } else {
    ::std::string* temp = train_folder_;
    train_folder_ = const_cast< ::std::string*>(_default_train_folder_);
    return temp;
  }
}
inline void SolverProto::set_allocated_train_folder(::std::string* train_folder) {
  if (train_folder_ != _default_train_folder_) {
    delete train_folder_;
  }
  if (train_folder) {
    set_has_train_folder();
    train_folder_ = train_folder;
  } else {
    clear_has_train_folder();
    train_folder_ = const_cast< ::std::string*>(_default_train_folder_);
  }
}

// optional string test_folder = 3 [default = "test"];
inline bool SolverProto::has_test_folder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolverProto::set_has_test_folder() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolverProto::clear_has_test_folder() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolverProto::clear_test_folder() {
  if (test_folder_ != _default_test_folder_) {
    test_folder_->assign(*_default_test_folder_);
  }
  clear_has_test_folder();
}
inline const ::std::string& SolverProto::test_folder() const {
  return *test_folder_;
}
inline void SolverProto::set_test_folder(const ::std::string& value) {
  set_has_test_folder();
  if (test_folder_ == _default_test_folder_) {
    test_folder_ = new ::std::string;
  }
  test_folder_->assign(value);
}
inline void SolverProto::set_test_folder(const char* value) {
  set_has_test_folder();
  if (test_folder_ == _default_test_folder_) {
    test_folder_ = new ::std::string;
  }
  test_folder_->assign(value);
}
inline void SolverProto::set_test_folder(const char* value, size_t size) {
  set_has_test_folder();
  if (test_folder_ == _default_test_folder_) {
    test_folder_ = new ::std::string;
  }
  test_folder_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SolverProto::mutable_test_folder() {
  set_has_test_folder();
  if (test_folder_ == _default_test_folder_) {
    test_folder_ = new ::std::string(*_default_test_folder_);
  }
  return test_folder_;
}
inline ::std::string* SolverProto::release_test_folder() {
  clear_has_test_folder();
  if (test_folder_ == _default_test_folder_) {
    return NULL;
  } else {
    ::std::string* temp = test_folder_;
    test_folder_ = const_cast< ::std::string*>(_default_test_folder_);
    return temp;
  }
}
inline void SolverProto::set_allocated_test_folder(::std::string* test_folder) {
  if (test_folder_ != _default_test_folder_) {
    delete test_folder_;
  }
  if (test_folder) {
    set_has_test_folder();
    test_folder_ = test_folder;
  } else {
    clear_has_test_folder();
    test_folder_ = const_cast< ::std::string*>(_default_test_folder_);
  }
}

// optional string validation_folder = 4 [default = "validation"];
inline bool SolverProto::has_validation_folder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolverProto::set_has_validation_folder() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolverProto::clear_has_validation_folder() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolverProto::clear_validation_folder() {
  if (validation_folder_ != _default_validation_folder_) {
    validation_folder_->assign(*_default_validation_folder_);
  }
  clear_has_validation_folder();
}
inline const ::std::string& SolverProto::validation_folder() const {
  return *validation_folder_;
}
inline void SolverProto::set_validation_folder(const ::std::string& value) {
  set_has_validation_folder();
  if (validation_folder_ == _default_validation_folder_) {
    validation_folder_ = new ::std::string;
  }
  validation_folder_->assign(value);
}
inline void SolverProto::set_validation_folder(const char* value) {
  set_has_validation_folder();
  if (validation_folder_ == _default_validation_folder_) {
    validation_folder_ = new ::std::string;
  }
  validation_folder_->assign(value);
}
inline void SolverProto::set_validation_folder(const char* value, size_t size) {
  set_has_validation_folder();
  if (validation_folder_ == _default_validation_folder_) {
    validation_folder_ = new ::std::string;
  }
  validation_folder_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SolverProto::mutable_validation_folder() {
  set_has_validation_folder();
  if (validation_folder_ == _default_validation_folder_) {
    validation_folder_ = new ::std::string(*_default_validation_folder_);
  }
  return validation_folder_;
}
inline ::std::string* SolverProto::release_validation_folder() {
  clear_has_validation_folder();
  if (validation_folder_ == _default_validation_folder_) {
    return NULL;
  } else {
    ::std::string* temp = validation_folder_;
    validation_folder_ = const_cast< ::std::string*>(_default_validation_folder_);
    return temp;
  }
}
inline void SolverProto::set_allocated_validation_folder(::std::string* validation_folder) {
  if (validation_folder_ != _default_validation_folder_) {
    delete validation_folder_;
  }
  if (validation_folder) {
    set_has_validation_folder();
    validation_folder_ = validation_folder;
  } else {
    clear_has_validation_folder();
    validation_folder_ = const_cast< ::std::string*>(_default_validation_folder_);
  }
}

// optional int32 display_after_steps = 6 [default = 0];
inline bool SolverProto::has_display_after_steps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SolverProto::set_has_display_after_steps() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SolverProto::clear_has_display_after_steps() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SolverProto::clear_display_after_steps() {
  display_after_steps_ = 0;
  clear_has_display_after_steps();
}
inline ::google::protobuf::int32 SolverProto::display_after_steps() const {
  return display_after_steps_;
}
inline void SolverProto::set_display_after_steps(::google::protobuf::int32 value) {
  set_has_display_after_steps();
  display_after_steps_ = value;
}

// optional int32 display_every_steps = 7 [default = 0];
inline bool SolverProto::has_display_every_steps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SolverProto::set_has_display_every_steps() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SolverProto::clear_has_display_every_steps() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SolverProto::clear_display_every_steps() {
  display_every_steps_ = 0;
  clear_has_display_every_steps();
}
inline ::google::protobuf::int32 SolverProto::display_every_steps() const {
  return display_every_steps_;
}
inline void SolverProto::set_display_every_steps(::google::protobuf::int32 value) {
  set_has_display_every_steps();
  display_every_steps_ = value;
}

// optional int32 validation_after_steps = 10 [default = 0];
inline bool SolverProto::has_validation_after_steps() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SolverProto::set_has_validation_after_steps() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SolverProto::clear_has_validation_after_steps() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SolverProto::clear_validation_after_steps() {
  validation_after_steps_ = 0;
  clear_has_validation_after_steps();
}
inline ::google::protobuf::int32 SolverProto::validation_after_steps() const {
  return validation_after_steps_;
}
inline void SolverProto::set_validation_after_steps(::google::protobuf::int32 value) {
  set_has_validation_after_steps();
  validation_after_steps_ = value;
}

// optional int32 validation_every_steps = 11 [default = 0];
inline bool SolverProto::has_validation_every_steps() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SolverProto::set_has_validation_every_steps() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SolverProto::clear_has_validation_every_steps() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SolverProto::clear_validation_every_steps() {
  validation_every_steps_ = 0;
  clear_has_validation_every_steps();
}
inline ::google::protobuf::int32 SolverProto::validation_every_steps() const {
  return validation_every_steps_;
}
inline void SolverProto::set_validation_every_steps(::google::protobuf::int32 value) {
  set_has_validation_every_steps();
  validation_every_steps_ = value;
}

// optional int32 test_after_steps = 13 [default = 0];
inline bool SolverProto::has_test_after_steps() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SolverProto::set_has_test_after_steps() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SolverProto::clear_has_test_after_steps() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SolverProto::clear_test_after_steps() {
  test_after_steps_ = 0;
  clear_has_test_after_steps();
}
inline ::google::protobuf::int32 SolverProto::test_after_steps() const {
  return test_after_steps_;
}
inline void SolverProto::set_test_after_steps(::google::protobuf::int32 value) {
  set_has_test_after_steps();
  test_after_steps_ = value;
}

// optional int32 test_every_steps = 14 [default = 0];
inline bool SolverProto::has_test_every_steps() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SolverProto::set_has_test_every_steps() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SolverProto::clear_has_test_every_steps() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SolverProto::clear_test_every_steps() {
  test_every_steps_ = 0;
  clear_has_test_every_steps();
}
inline ::google::protobuf::int32 SolverProto::test_every_steps() const {
  return test_every_steps_;
}
inline void SolverProto::set_test_every_steps(::google::protobuf::int32 value) {
  set_has_test_every_steps();
  test_every_steps_ = value;
}

// optional int32 batchsize = 19;
inline bool SolverProto::has_batchsize() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SolverProto::set_has_batchsize() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SolverProto::clear_has_batchsize() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SolverProto::clear_batchsize() {
  batchsize_ = 0;
  clear_has_batchsize();
}
inline ::google::protobuf::int32 SolverProto::batchsize() const {
  return batchsize_;
}
inline void SolverProto::set_batchsize(::google::protobuf::int32 value) {
  set_has_batchsize();
  batchsize_ = value;
}

// optional int32 train_steps = 20;
inline bool SolverProto::has_train_steps() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SolverProto::set_has_train_steps() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SolverProto::clear_has_train_steps() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SolverProto::clear_train_steps() {
  train_steps_ = 0;
  clear_has_train_steps();
}
inline ::google::protobuf::int32 SolverProto::train_steps() const {
  return train_steps_;
}
inline void SolverProto::set_train_steps(::google::protobuf::int32 value) {
  set_has_train_steps();
  train_steps_ = value;
}

// optional int32 validation_steps = 21;
inline bool SolverProto::has_validation_steps() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SolverProto::set_has_validation_steps() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SolverProto::clear_has_validation_steps() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SolverProto::clear_validation_steps() {
  validation_steps_ = 0;
  clear_has_validation_steps();
}
inline ::google::protobuf::int32 SolverProto::validation_steps() const {
  return validation_steps_;
}
inline void SolverProto::set_validation_steps(::google::protobuf::int32 value) {
  set_has_validation_steps();
  validation_steps_ = value;
}

// optional int32 test_steps = 22;
inline bool SolverProto::has_test_steps() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SolverProto::set_has_test_steps() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SolverProto::clear_has_test_steps() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SolverProto::clear_test_steps() {
  test_steps_ = 0;
  clear_has_test_steps();
}
inline ::google::protobuf::int32 SolverProto::test_steps() const {
  return test_steps_;
}
inline void SolverProto::set_test_steps(::google::protobuf::int32 value) {
  set_has_test_steps();
  test_steps_ = value;
}

// optional .singa.SGDProto sgd = 24;
inline bool SolverProto::has_sgd() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SolverProto::set_has_sgd() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SolverProto::clear_has_sgd() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SolverProto::clear_sgd() {
  if (sgd_ != NULL) sgd_->::singa::SGDProto::Clear();
  clear_has_sgd();
}
inline const ::singa::SGDProto& SolverProto::sgd() const {
  return sgd_ != NULL ? *sgd_ : *default_instance_->sgd_;
}
inline ::singa::SGDProto* SolverProto::mutable_sgd() {
  set_has_sgd();
  if (sgd_ == NULL) sgd_ = new ::singa::SGDProto;
  return sgd_;
}
inline ::singa::SGDProto* SolverProto::release_sgd() {
  clear_has_sgd();
  ::singa::SGDProto* temp = sgd_;
  sgd_ = NULL;
  return temp;
}
inline void SolverProto::set_allocated_sgd(::singa::SGDProto* sgd) {
  delete sgd_;
  sgd_ = sgd;
  if (sgd) {
    set_has_sgd();
  } else {
    clear_has_sgd();
  }
}

// optional .singa.SolverProto.GradCalcAlg alg = 26 [default = kBackPropagation];
inline bool SolverProto::has_alg() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SolverProto::set_has_alg() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SolverProto::clear_has_alg() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SolverProto::clear_alg() {
  alg_ = 1;
  clear_has_alg();
}
inline ::singa::SolverProto_GradCalcAlg SolverProto::alg() const {
  return static_cast< ::singa::SolverProto_GradCalcAlg >(alg_);
}
inline void SolverProto::set_alg(::singa::SolverProto_GradCalcAlg value) {
  assert(::singa::SolverProto_GradCalcAlg_IsValid(value));
  set_has_alg();
  alg_ = value;
}

// optional .singa.PartitionMode partition = 27 [default = kNone];
inline bool SolverProto::has_partition() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SolverProto::set_has_partition() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SolverProto::clear_has_partition() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SolverProto::clear_partition() {
  partition_ = 3;
  clear_has_partition();
}
inline ::singa::PartitionMode SolverProto::partition() const {
  return static_cast< ::singa::PartitionMode >(partition_);
}
inline void SolverProto::set_partition(::singa::PartitionMode value) {
  assert(::singa::PartitionMode_IsValid(value));
  set_has_partition();
  partition_ = value;
}

// -------------------------------------------------------------------

// Record

// optional .singa.Record.Type type = 1 [default = kImageNet];
inline bool Record::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Record::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Record::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Record::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::singa::Record_Type Record::type() const {
  return static_cast< ::singa::Record_Type >(type_);
}
inline void Record::set_type(::singa::Record_Type value) {
  assert(::singa::Record_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .singa.ImageNetRecord imagenet = 2;
inline bool Record::has_imagenet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Record::set_has_imagenet() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Record::clear_has_imagenet() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Record::clear_imagenet() {
  if (imagenet_ != NULL) imagenet_->::singa::ImageNetRecord::Clear();
  clear_has_imagenet();
}
inline const ::singa::ImageNetRecord& Record::imagenet() const {
  return imagenet_ != NULL ? *imagenet_ : *default_instance_->imagenet_;
}
inline ::singa::ImageNetRecord* Record::mutable_imagenet() {
  set_has_imagenet();
  if (imagenet_ == NULL) imagenet_ = new ::singa::ImageNetRecord;
  return imagenet_;
}
inline ::singa::ImageNetRecord* Record::release_imagenet() {
  clear_has_imagenet();
  ::singa::ImageNetRecord* temp = imagenet_;
  imagenet_ = NULL;
  return temp;
}
inline void Record::set_allocated_imagenet(::singa::ImageNetRecord* imagenet) {
  delete imagenet_;
  imagenet_ = imagenet;
  if (imagenet) {
    set_has_imagenet();
  } else {
    clear_has_imagenet();
  }
}

// optional .singa.MnistRecord mnist = 3;
inline bool Record::has_mnist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Record::set_has_mnist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Record::clear_has_mnist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Record::clear_mnist() {
  if (mnist_ != NULL) mnist_->::singa::MnistRecord::Clear();
  clear_has_mnist();
}
inline const ::singa::MnistRecord& Record::mnist() const {
  return mnist_ != NULL ? *mnist_ : *default_instance_->mnist_;
}
inline ::singa::MnistRecord* Record::mutable_mnist() {
  set_has_mnist();
  if (mnist_ == NULL) mnist_ = new ::singa::MnistRecord;
  return mnist_;
}
inline ::singa::MnistRecord* Record::release_mnist() {
  clear_has_mnist();
  ::singa::MnistRecord* temp = mnist_;
  mnist_ = NULL;
  return temp;
}
inline void Record::set_allocated_mnist(::singa::MnistRecord* mnist) {
  delete mnist_;
  mnist_ = mnist;
  if (mnist) {
    set_has_mnist();
  } else {
    clear_has_mnist();
  }
}

// -------------------------------------------------------------------

// MnistRecord

// optional int32 label = 1;
inline bool MnistRecord::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MnistRecord::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MnistRecord::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MnistRecord::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 MnistRecord::label() const {
  return label_;
}
inline void MnistRecord::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
}

// optional bytes pixel = 2;
inline bool MnistRecord::has_pixel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MnistRecord::set_has_pixel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MnistRecord::clear_has_pixel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MnistRecord::clear_pixel() {
  if (pixel_ != &::google::protobuf::internal::kEmptyString) {
    pixel_->clear();
  }
  clear_has_pixel();
}
inline const ::std::string& MnistRecord::pixel() const {
  return *pixel_;
}
inline void MnistRecord::set_pixel(const ::std::string& value) {
  set_has_pixel();
  if (pixel_ == &::google::protobuf::internal::kEmptyString) {
    pixel_ = new ::std::string;
  }
  pixel_->assign(value);
}
inline void MnistRecord::set_pixel(const char* value) {
  set_has_pixel();
  if (pixel_ == &::google::protobuf::internal::kEmptyString) {
    pixel_ = new ::std::string;
  }
  pixel_->assign(value);
}
inline void MnistRecord::set_pixel(const void* value, size_t size) {
  set_has_pixel();
  if (pixel_ == &::google::protobuf::internal::kEmptyString) {
    pixel_ = new ::std::string;
  }
  pixel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MnistRecord::mutable_pixel() {
  set_has_pixel();
  if (pixel_ == &::google::protobuf::internal::kEmptyString) {
    pixel_ = new ::std::string;
  }
  return pixel_;
}
inline ::std::string* MnistRecord::release_pixel() {
  clear_has_pixel();
  if (pixel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pixel_;
    pixel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MnistRecord::set_allocated_pixel(::std::string* pixel) {
  if (pixel_ != &::google::protobuf::internal::kEmptyString) {
    delete pixel_;
  }
  if (pixel) {
    set_has_pixel();
    pixel_ = pixel;
  } else {
    clear_has_pixel();
    pixel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ImageNetRecord

// optional .singa.DAryProto image = 1;
inline bool ImageNetRecord::has_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageNetRecord::set_has_image() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageNetRecord::clear_has_image() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageNetRecord::clear_image() {
  if (image_ != NULL) image_->::singa::DAryProto::Clear();
  clear_has_image();
}
inline const ::singa::DAryProto& ImageNetRecord::image() const {
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::singa::DAryProto* ImageNetRecord::mutable_image() {
  set_has_image();
  if (image_ == NULL) image_ = new ::singa::DAryProto;
  return image_;
}
inline ::singa::DAryProto* ImageNetRecord::release_image() {
  clear_has_image();
  ::singa::DAryProto* temp = image_;
  image_ = NULL;
  return temp;
}
inline void ImageNetRecord::set_allocated_image(::singa::DAryProto* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
}

// optional int32 label = 2;
inline bool ImageNetRecord::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageNetRecord::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageNetRecord::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageNetRecord::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 ImageNetRecord::label() const {
  return label_;
}
inline void ImageNetRecord::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
}

// -------------------------------------------------------------------

// SGDProto

// optional float learning_rate = 1;
inline bool SGDProto::has_learning_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SGDProto::set_has_learning_rate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SGDProto::clear_has_learning_rate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SGDProto::clear_learning_rate() {
  learning_rate_ = 0;
  clear_has_learning_rate();
}
inline float SGDProto::learning_rate() const {
  return learning_rate_;
}
inline void SGDProto::set_learning_rate(float value) {
  set_has_learning_rate();
  learning_rate_ = value;
}

// optional float momentum = 2;
inline bool SGDProto::has_momentum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SGDProto::set_has_momentum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SGDProto::clear_has_momentum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SGDProto::clear_momentum() {
  momentum_ = 0;
  clear_has_momentum();
}
inline float SGDProto::momentum() const {
  return momentum_;
}
inline void SGDProto::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
}

// optional float weight_decay = 3;
inline bool SGDProto::has_weight_decay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SGDProto::set_has_weight_decay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SGDProto::clear_has_weight_decay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SGDProto::clear_weight_decay() {
  weight_decay_ = 0;
  clear_has_weight_decay();
}
inline float SGDProto::weight_decay() const {
  return weight_decay_;
}
inline void SGDProto::set_weight_decay(float value) {
  set_has_weight_decay();
  weight_decay_ = value;
}

// optional float gamma = 4 [default = 1];
inline bool SGDProto::has_gamma() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SGDProto::set_has_gamma() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SGDProto::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SGDProto::clear_gamma() {
  gamma_ = 1;
  clear_has_gamma();
}
inline float SGDProto::gamma() const {
  return gamma_;
}
inline void SGDProto::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
}

// optional float pow = 5 [default = 0];
inline bool SGDProto::has_pow() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SGDProto::set_has_pow() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SGDProto::clear_has_pow() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SGDProto::clear_pow() {
  pow_ = 0;
  clear_has_pow();
}
inline float SGDProto::pow() const {
  return pow_;
}
inline void SGDProto::set_pow(float value) {
  set_has_pow();
  pow_ = value;
}

// optional int32 learning_rate_change_steps = 6;
inline bool SGDProto::has_learning_rate_change_steps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SGDProto::set_has_learning_rate_change_steps() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SGDProto::clear_has_learning_rate_change_steps() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SGDProto::clear_learning_rate_change_steps() {
  learning_rate_change_steps_ = 0;
  clear_has_learning_rate_change_steps();
}
inline ::google::protobuf::int32 SGDProto::learning_rate_change_steps() const {
  return learning_rate_change_steps_;
}
inline void SGDProto::set_learning_rate_change_steps(::google::protobuf::int32 value) {
  set_has_learning_rate_change_steps();
  learning_rate_change_steps_ = value;
}

// optional .singa.SGDProto.ChangeProto learning_rate_change = 7 [default = kStep];
inline bool SGDProto::has_learning_rate_change() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SGDProto::set_has_learning_rate_change() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SGDProto::clear_has_learning_rate_change() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SGDProto::clear_learning_rate_change() {
  learning_rate_change_ = 5;
  clear_has_learning_rate_change();
}
inline ::singa::SGDProto_ChangeProto SGDProto::learning_rate_change() const {
  return static_cast< ::singa::SGDProto_ChangeProto >(learning_rate_change_);
}
inline void SGDProto::set_learning_rate_change(::singa::SGDProto_ChangeProto value) {
  assert(::singa::SGDProto_ChangeProto_IsValid(value));
  set_has_learning_rate_change();
  learning_rate_change_ = value;
}

// optional bool synchronous = 8 [default = false];
inline bool SGDProto::has_synchronous() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SGDProto::set_has_synchronous() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SGDProto::clear_has_synchronous() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SGDProto::clear_synchronous() {
  synchronous_ = false;
  clear_has_synchronous();
}
inline bool SGDProto::synchronous() const {
  return synchronous_;
}
inline void SGDProto::set_synchronous(bool value) {
  set_has_synchronous();
  synchronous_ = value;
}

// optional string handler = 9 [default = "SGD"];
inline bool SGDProto::has_handler() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SGDProto::set_has_handler() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SGDProto::clear_has_handler() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SGDProto::clear_handler() {
  if (handler_ != _default_handler_) {
    handler_->assign(*_default_handler_);
  }
  clear_has_handler();
}
inline const ::std::string& SGDProto::handler() const {
  return *handler_;
}
inline void SGDProto::set_handler(const ::std::string& value) {
  set_has_handler();
  if (handler_ == _default_handler_) {
    handler_ = new ::std::string;
  }
  handler_->assign(value);
}
inline void SGDProto::set_handler(const char* value) {
  set_has_handler();
  if (handler_ == _default_handler_) {
    handler_ = new ::std::string;
  }
  handler_->assign(value);
}
inline void SGDProto::set_handler(const char* value, size_t size) {
  set_has_handler();
  if (handler_ == _default_handler_) {
    handler_ = new ::std::string;
  }
  handler_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SGDProto::mutable_handler() {
  set_has_handler();
  if (handler_ == _default_handler_) {
    handler_ = new ::std::string(*_default_handler_);
  }
  return handler_;
}
inline ::std::string* SGDProto::release_handler() {
  clear_has_handler();
  if (handler_ == _default_handler_) {
    return NULL;
  } else {
    ::std::string* temp = handler_;
    handler_ = const_cast< ::std::string*>(_default_handler_);
    return temp;
  }
}
inline void SGDProto::set_allocated_handler(::std::string* handler) {
  if (handler_ != _default_handler_) {
    delete handler_;
  }
  if (handler) {
    set_has_handler();
    handler_ = handler;
  } else {
    clear_has_handler();
    handler_ = const_cast< ::std::string*>(_default_handler_);
  }
}

// optional int32 checkpoint_after_steps = 10 [default = 0];
inline bool SGDProto::has_checkpoint_after_steps() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SGDProto::set_has_checkpoint_after_steps() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SGDProto::clear_has_checkpoint_after_steps() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SGDProto::clear_checkpoint_after_steps() {
  checkpoint_after_steps_ = 0;
  clear_has_checkpoint_after_steps();
}
inline ::google::protobuf::int32 SGDProto::checkpoint_after_steps() const {
  return checkpoint_after_steps_;
}
inline void SGDProto::set_checkpoint_after_steps(::google::protobuf::int32 value) {
  set_has_checkpoint_after_steps();
  checkpoint_after_steps_ = value;
}

// optional int32 checkpoint_every_steps = 11 [default = 0];
inline bool SGDProto::has_checkpoint_every_steps() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SGDProto::set_has_checkpoint_every_steps() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SGDProto::clear_has_checkpoint_every_steps() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SGDProto::clear_checkpoint_every_steps() {
  checkpoint_every_steps_ = 0;
  clear_has_checkpoint_every_steps();
}
inline ::google::protobuf::int32 SGDProto::checkpoint_every_steps() const {
  return checkpoint_every_steps_;
}
inline void SGDProto::set_checkpoint_every_steps(::google::protobuf::int32 value) {
  set_has_checkpoint_every_steps();
  checkpoint_every_steps_ = value;
}

// -------------------------------------------------------------------

// TKey

// optional int32 id = 1;
inline bool TKey::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TKey::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TKey::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TKey::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TKey::id() const {
  return id_;
}
inline void TKey::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 version = 2;
inline bool TKey::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TKey::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TKey::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TKey::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 TKey::version() const {
  return version_;
}
inline void TKey::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional int32 rank = 3;
inline bool TKey::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TKey::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TKey::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TKey::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 TKey::rank() const {
  return rank_;
}
inline void TKey::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// TVal

// optional string type = 1;
inline bool TVal::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TVal::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TVal::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TVal::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& TVal::type() const {
  return *type_;
}
inline void TVal::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void TVal::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void TVal::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TVal::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* TVal::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TVal::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 num_aggregate = 4;
inline bool TVal::has_num_aggregate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TVal::set_has_num_aggregate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TVal::clear_has_num_aggregate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TVal::clear_num_aggregate() {
  num_aggregate_ = 0;
  clear_has_num_aggregate();
}
inline ::google::protobuf::int32 TVal::num_aggregate() const {
  return num_aggregate_;
}
inline void TVal::set_num_aggregate(::google::protobuf::int32 value) {
  set_has_num_aggregate();
  num_aggregate_ = value;
}

// optional int32 version = 5;
inline bool TVal::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TVal::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TVal::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TVal::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 TVal::version() const {
  return version_;
}
inline void TVal::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional int32 rank = 6;
inline bool TVal::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TVal::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TVal::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TVal::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 TVal::rank() const {
  return rank_;
}
inline void TVal::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 param_id = 7;
inline bool TVal::has_param_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TVal::set_has_param_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TVal::clear_has_param_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TVal::clear_param_id() {
  param_id_ = 0;
  clear_has_param_id();
}
inline ::google::protobuf::int32 TVal::param_id() const {
  return param_id_;
}
inline void TVal::set_param_id(::google::protobuf::int32 value) {
  set_has_param_id();
  param_id_ = value;
}

// optional int32 split_id = 8;
inline bool TVal::has_split_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TVal::set_has_split_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TVal::clear_has_split_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TVal::clear_split_id() {
  split_id_ = 0;
  clear_has_split_id();
}
inline ::google::protobuf::int32 TVal::split_id() const {
  return split_id_;
}
inline void TVal::set_split_id(::google::protobuf::int32 value) {
  set_has_split_id();
  split_id_ = value;
}

// optional int32 split_offset = 9;
inline bool TVal::has_split_offset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TVal::set_has_split_offset() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TVal::clear_has_split_offset() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TVal::clear_split_offset() {
  split_offset_ = 0;
  clear_has_split_offset();
}
inline ::google::protobuf::int32 TVal::split_offset() const {
  return split_offset_;
}
inline void TVal::set_split_offset(::google::protobuf::int32 value) {
  set_has_split_offset();
  split_offset_ = value;
}

// optional float learning_rate_multiplier = 10 [default = 1];
inline bool TVal::has_learning_rate_multiplier() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TVal::set_has_learning_rate_multiplier() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TVal::clear_has_learning_rate_multiplier() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TVal::clear_learning_rate_multiplier() {
  learning_rate_multiplier_ = 1;
  clear_has_learning_rate_multiplier();
}
inline float TVal::learning_rate_multiplier() const {
  return learning_rate_multiplier_;
}
inline void TVal::set_learning_rate_multiplier(float value) {
  set_has_learning_rate_multiplier();
  learning_rate_multiplier_ = value;
}

// optional float weight_decay_multiplier = 11 [default = 1];
inline bool TVal::has_weight_decay_multiplier() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TVal::set_has_weight_decay_multiplier() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TVal::clear_has_weight_decay_multiplier() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TVal::clear_weight_decay_multiplier() {
  weight_decay_multiplier_ = 1;
  clear_has_weight_decay_multiplier();
}
inline float TVal::weight_decay_multiplier() const {
  return weight_decay_multiplier_;
}
inline void TVal::set_weight_decay_multiplier(float value) {
  set_has_weight_decay_multiplier();
  weight_decay_multiplier_ = value;
}

// optional .singa.DAryProto data = 12;
inline bool TVal::has_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TVal::set_has_data() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TVal::clear_has_data() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TVal::clear_data() {
  if (data_ != NULL) data_->::singa::DAryProto::Clear();
  clear_has_data();
}
inline const ::singa::DAryProto& TVal::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::singa::DAryProto* TVal::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::singa::DAryProto;
  return data_;
}
inline ::singa::DAryProto* TVal::release_data() {
  clear_has_data();
  ::singa::DAryProto* temp = data_;
  data_ = NULL;
  return temp;
}
inline void TVal::set_allocated_data(::singa::DAryProto* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional .singa.DAryProto grad = 13;
inline bool TVal::has_grad() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TVal::set_has_grad() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TVal::clear_has_grad() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TVal::clear_grad() {
  if (grad_ != NULL) grad_->::singa::DAryProto::Clear();
  clear_has_grad();
}
inline const ::singa::DAryProto& TVal::grad() const {
  return grad_ != NULL ? *grad_ : *default_instance_->grad_;
}
inline ::singa::DAryProto* TVal::mutable_grad() {
  set_has_grad();
  if (grad_ == NULL) grad_ = new ::singa::DAryProto;
  return grad_;
}
inline ::singa::DAryProto* TVal::release_grad() {
  clear_has_grad();
  ::singa::DAryProto* temp = grad_;
  grad_ = NULL;
  return temp;
}
inline void TVal::set_allocated_grad(::singa::DAryProto* grad) {
  delete grad_;
  grad_ = grad;
  if (grad) {
    set_has_grad();
  } else {
    clear_has_grad();
  }
}

// optional .singa.DAryProto history = 14;
inline bool TVal::has_history() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TVal::set_has_history() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TVal::clear_has_history() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TVal::clear_history() {
  if (history_ != NULL) history_->::singa::DAryProto::Clear();
  clear_has_history();
}
inline const ::singa::DAryProto& TVal::history() const {
  return history_ != NULL ? *history_ : *default_instance_->history_;
}
inline ::singa::DAryProto* TVal::mutable_history() {
  set_has_history();
  if (history_ == NULL) history_ = new ::singa::DAryProto;
  return history_;
}
inline ::singa::DAryProto* TVal::release_history() {
  clear_has_history();
  ::singa::DAryProto* temp = history_;
  history_ = NULL;
  return temp;
}
inline void TVal::set_allocated_history(::singa::DAryProto* history) {
  delete history_;
  history_ = history;
  if (history) {
    set_has_history();
  } else {
    clear_has_history();
  }
}

// optional int32 threshold = 15 [default = 1];
inline bool TVal::has_threshold() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TVal::set_has_threshold() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TVal::clear_has_threshold() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TVal::clear_threshold() {
  threshold_ = 1;
  clear_has_threshold();
}
inline ::google::protobuf::int32 TVal::threshold() const {
  return threshold_;
}
inline void TVal::set_threshold(::google::protobuf::int32 value) {
  set_has_threshold();
  threshold_ = value;
}

// -------------------------------------------------------------------

// Tuple

// optional .singa.TKey key = 1;
inline bool Tuple::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tuple::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tuple::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tuple::clear_key() {
  if (key_ != NULL) key_->::singa::TKey::Clear();
  clear_has_key();
}
inline const ::singa::TKey& Tuple::key() const {
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::singa::TKey* Tuple::mutable_key() {
  set_has_key();
  if (key_ == NULL) key_ = new ::singa::TKey;
  return key_;
}
inline ::singa::TKey* Tuple::release_key() {
  clear_has_key();
  ::singa::TKey* temp = key_;
  key_ = NULL;
  return temp;
}
inline void Tuple::set_allocated_key(::singa::TKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
}

// optional .singa.TVal val = 2;
inline bool Tuple::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tuple::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tuple::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tuple::clear_val() {
  if (val_ != NULL) val_->::singa::TVal::Clear();
  clear_has_val();
}
inline const ::singa::TVal& Tuple::val() const {
  return val_ != NULL ? *val_ : *default_instance_->val_;
}
inline ::singa::TVal* Tuple::mutable_val() {
  set_has_val();
  if (val_ == NULL) val_ = new ::singa::TVal;
  return val_;
}
inline ::singa::TVal* Tuple::release_val() {
  clear_has_val();
  ::singa::TVal* temp = val_;
  val_ = NULL;
  return temp;
}
inline void Tuple::set_allocated_val(::singa::TVal* val) {
  delete val_;
  val_ = val;
  if (val) {
    set_has_val();
  } else {
    clear_has_val();
  }
}

// -------------------------------------------------------------------

// SGDVal

// -------------------------------------------------------------------

// AdaVal

// -------------------------------------------------------------------

// MeanProto

// optional int32 num = 1 [default = 0];
inline bool MeanProto::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeanProto::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MeanProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MeanProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 MeanProto::num() const {
  return num_;
}
inline void MeanProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 channels = 2 [default = 0];
inline bool MeanProto::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MeanProto::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MeanProto::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MeanProto::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 MeanProto::channels() const {
  return channels_;
}
inline void MeanProto::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
}

// optional int32 height = 3 [default = 0];
inline bool MeanProto::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MeanProto::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MeanProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MeanProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 MeanProto::height() const {
  return height_;
}
inline void MeanProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// optional int32 width = 4 [default = 0];
inline bool MeanProto::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MeanProto::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MeanProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MeanProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 MeanProto::width() const {
  return width_;
}
inline void MeanProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// repeated float data = 5 [packed = true];
inline int MeanProto::data_size() const {
  return data_.size();
}
inline void MeanProto::clear_data() {
  data_.Clear();
}
inline float MeanProto::data(int index) const {
  return data_.Get(index);
}
inline void MeanProto::set_data(int index, float value) {
  data_.Set(index, value);
}
inline void MeanProto::add_data(float value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
MeanProto::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
MeanProto::mutable_data() {
  return &data_;
}

// repeated float diff = 6 [packed = true];
inline int MeanProto::diff_size() const {
  return diff_.size();
}
inline void MeanProto::clear_diff() {
  diff_.Clear();
}
inline float MeanProto::diff(int index) const {
  return diff_.Get(index);
}
inline void MeanProto::set_diff(int index, float value) {
  diff_.Set(index, value);
}
inline void MeanProto::add_diff(float value) {
  diff_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
MeanProto::diff() const {
  return diff_;
}
inline ::google::protobuf::RepeatedField< float >*
MeanProto::mutable_diff() {
  return &diff_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace singa

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::singa::ParamProto_InitMethod>() {
  return ::singa::ParamProto_InitMethod_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::singa::LRNProto_NormRegion>() {
  return ::singa::LRNProto_NormRegion_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::singa::PoolingProto_PoolMethod>() {
  return ::singa::PoolingProto_PoolMethod_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::singa::SolverProto_GradCalcAlg>() {
  return ::singa::SolverProto_GradCalcAlg_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::singa::Record_Type>() {
  return ::singa::Record_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::singa::SGDProto_ChangeProto>() {
  return ::singa::SGDProto_ChangeProto_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::singa::Phase>() {
  return ::singa::Phase_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::singa::PartitionMode>() {
  return ::singa::PartitionMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_model_2eproto__INCLUDED
