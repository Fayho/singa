// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#ifndef PROTOBUF_model_2eproto__INCLUDED
#define PROTOBUF_model_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace lapis {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_model_2eproto();
void protobuf_AssignDesc_model_2eproto();
void protobuf_ShutdownFile_model_2eproto();

class ParamProto;
class LayerProto;
class EdgeProto;
class MeanProto;
class DAryProto;
class NetProto;
class PerformanceProto;
class SolverProto;
class Model;
class Record;
class SGDProto;
class TKey;
class TVal;
class Tuple;
class SGDVal;
class AdaVal;

enum ParamProto_InitMethod {
  ParamProto_InitMethod_kConstant = 0,
  ParamProto_InitMethod_kGaussain = 1,
  ParamProto_InitMethod_kUniform = 2,
  ParamProto_InitMethod_kPretrained = 3,
  ParamProto_InitMethod_kGaussainSqrtFanIn = 4,
  ParamProto_InitMethod_kUniformSqrtFanIn = 5,
  ParamProto_InitMethod_kUniformSqrtFanInOut = 6
};
bool ParamProto_InitMethod_IsValid(int value);
const ParamProto_InitMethod ParamProto_InitMethod_InitMethod_MIN = ParamProto_InitMethod_kConstant;
const ParamProto_InitMethod ParamProto_InitMethod_InitMethod_MAX = ParamProto_InitMethod_kUniformSqrtFanInOut;
const int ParamProto_InitMethod_InitMethod_ARRAYSIZE = ParamProto_InitMethod_InitMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParamProto_InitMethod_descriptor();
inline const ::std::string& ParamProto_InitMethod_Name(ParamProto_InitMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParamProto_InitMethod_descriptor(), value);
}
inline bool ParamProto_InitMethod_Parse(
    const ::std::string& name, ParamProto_InitMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParamProto_InitMethod>(
    ParamProto_InitMethod_descriptor(), name, value);
}
enum LayerProto_PoolingMethod {
  LayerProto_PoolingMethod_kMaxPooling = 1,
  LayerProto_PoolingMethod_kAvgPooling = 2
};
bool LayerProto_PoolingMethod_IsValid(int value);
const LayerProto_PoolingMethod LayerProto_PoolingMethod_PoolingMethod_MIN = LayerProto_PoolingMethod_kMaxPooling;
const LayerProto_PoolingMethod LayerProto_PoolingMethod_PoolingMethod_MAX = LayerProto_PoolingMethod_kAvgPooling;
const int LayerProto_PoolingMethod_PoolingMethod_ARRAYSIZE = LayerProto_PoolingMethod_PoolingMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* LayerProto_PoolingMethod_descriptor();
inline const ::std::string& LayerProto_PoolingMethod_Name(LayerProto_PoolingMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    LayerProto_PoolingMethod_descriptor(), value);
}
inline bool LayerProto_PoolingMethod_Parse(
    const ::std::string& name, LayerProto_PoolingMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LayerProto_PoolingMethod>(
    LayerProto_PoolingMethod_descriptor(), name, value);
}
enum SolverProto_GradCalcAlg {
  SolverProto_GradCalcAlg_kBackPropagation = 1,
  SolverProto_GradCalcAlg_kContrastiveDivergence = 2
};
bool SolverProto_GradCalcAlg_IsValid(int value);
const SolverProto_GradCalcAlg SolverProto_GradCalcAlg_GradCalcAlg_MIN = SolverProto_GradCalcAlg_kBackPropagation;
const SolverProto_GradCalcAlg SolverProto_GradCalcAlg_GradCalcAlg_MAX = SolverProto_GradCalcAlg_kContrastiveDivergence;
const int SolverProto_GradCalcAlg_GradCalcAlg_ARRAYSIZE = SolverProto_GradCalcAlg_GradCalcAlg_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverProto_GradCalcAlg_descriptor();
inline const ::std::string& SolverProto_GradCalcAlg_Name(SolverProto_GradCalcAlg value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverProto_GradCalcAlg_descriptor(), value);
}
inline bool SolverProto_GradCalcAlg_Parse(
    const ::std::string& name, SolverProto_GradCalcAlg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverProto_GradCalcAlg>(
    SolverProto_GradCalcAlg_descriptor(), name, value);
}
enum SolverProto_Partition {
  SolverProto_Partition_kData = 1,
  SolverProto_Partition_kModel = 2,
  SolverProto_Partition_kHybrid = 3
};
bool SolverProto_Partition_IsValid(int value);
const SolverProto_Partition SolverProto_Partition_Partition_MIN = SolverProto_Partition_kData;
const SolverProto_Partition SolverProto_Partition_Partition_MAX = SolverProto_Partition_kHybrid;
const int SolverProto_Partition_Partition_ARRAYSIZE = SolverProto_Partition_Partition_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverProto_Partition_descriptor();
inline const ::std::string& SolverProto_Partition_Name(SolverProto_Partition value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverProto_Partition_descriptor(), value);
}
inline bool SolverProto_Partition_Parse(
    const ::std::string& name, SolverProto_Partition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverProto_Partition>(
    SolverProto_Partition_descriptor(), name, value);
}
enum SGDProto_ChangeProto {
  SGDProto_ChangeProto_kFixed = 0,
  SGDProto_ChangeProto_kInverse_t = 1,
  SGDProto_ChangeProto_kExponential = 2,
  SGDProto_ChangeProto_kLinear = 3,
  SGDProto_ChangeProto_kStep = 4
};
bool SGDProto_ChangeProto_IsValid(int value);
const SGDProto_ChangeProto SGDProto_ChangeProto_ChangeProto_MIN = SGDProto_ChangeProto_kFixed;
const SGDProto_ChangeProto SGDProto_ChangeProto_ChangeProto_MAX = SGDProto_ChangeProto_kStep;
const int SGDProto_ChangeProto_ChangeProto_ARRAYSIZE = SGDProto_ChangeProto_ChangeProto_MAX + 1;

const ::google::protobuf::EnumDescriptor* SGDProto_ChangeProto_descriptor();
inline const ::std::string& SGDProto_ChangeProto_Name(SGDProto_ChangeProto value) {
  return ::google::protobuf::internal::NameOfEnum(
    SGDProto_ChangeProto_descriptor(), value);
}
inline bool SGDProto_ChangeProto_Parse(
    const ::std::string& name, SGDProto_ChangeProto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SGDProto_ChangeProto>(
    SGDProto_ChangeProto_descriptor(), name, value);
}
// ===================================================================

class ParamProto : public ::google::protobuf::Message {
 public:
  ParamProto();
  virtual ~ParamProto();

  ParamProto(const ParamProto& from);

  inline ParamProto& operator=(const ParamProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamProto& default_instance();

  void Swap(ParamProto* other);

  // implements Message ----------------------------------------------

  ParamProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParamProto& from);
  void MergeFrom(const ParamProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ParamProto_InitMethod InitMethod;
  static const InitMethod kConstant = ParamProto_InitMethod_kConstant;
  static const InitMethod kGaussain = ParamProto_InitMethod_kGaussain;
  static const InitMethod kUniform = ParamProto_InitMethod_kUniform;
  static const InitMethod kPretrained = ParamProto_InitMethod_kPretrained;
  static const InitMethod kGaussainSqrtFanIn = ParamProto_InitMethod_kGaussainSqrtFanIn;
  static const InitMethod kUniformSqrtFanIn = ParamProto_InitMethod_kUniformSqrtFanIn;
  static const InitMethod kUniformSqrtFanInOut = ParamProto_InitMethod_kUniformSqrtFanInOut;
  static inline bool InitMethod_IsValid(int value) {
    return ParamProto_InitMethod_IsValid(value);
  }
  static const InitMethod InitMethod_MIN =
    ParamProto_InitMethod_InitMethod_MIN;
  static const InitMethod InitMethod_MAX =
    ParamProto_InitMethod_InitMethod_MAX;
  static const int InitMethod_ARRAYSIZE =
    ParamProto_InitMethod_InitMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  InitMethod_descriptor() {
    return ParamProto_InitMethod_descriptor();
  }
  static inline const ::std::string& InitMethod_Name(InitMethod value) {
    return ParamProto_InitMethod_Name(value);
  }
  static inline bool InitMethod_Parse(const ::std::string& name,
      InitMethod* value) {
    return ParamProto_InitMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated int32 shape = 2;
  inline int shape_size() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 2;
  inline ::google::protobuf::int32 shape(int index) const;
  inline void set_shape(int index, ::google::protobuf::int32 value);
  inline void add_shape(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shape() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shape();

  // optional .lapis.ParamProto.InitMethod init_method = 3 [default = kConstant];
  inline bool has_init_method() const;
  inline void clear_init_method();
  static const int kInitMethodFieldNumber = 3;
  inline ::lapis::ParamProto_InitMethod init_method() const;
  inline void set_init_method(::lapis::ParamProto_InitMethod value);

  // optional float value = 4 [default = 1];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline float value() const;
  inline void set_value(float value);

  // optional float low = 5 [default = -1];
  inline bool has_low() const;
  inline void clear_low();
  static const int kLowFieldNumber = 5;
  inline float low() const;
  inline void set_low(float value);

  // optional float high = 6 [default = 1];
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 6;
  inline float high() const;
  inline void set_high(float value);

  // optional float mean = 7 [default = 0];
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 7;
  inline float mean() const;
  inline void set_mean(float value);

  // optional float std = 8 [default = 1];
  inline bool has_std() const;
  inline void clear_std();
  static const int kStdFieldNumber = 8;
  inline float std() const;
  inline void set_std(float value);

  // optional float momentum_multiplier = 9 [default = 1];
  inline bool has_momentum_multiplier() const;
  inline void clear_momentum_multiplier();
  static const int kMomentumMultiplierFieldNumber = 9;
  inline float momentum_multiplier() const;
  inline void set_momentum_multiplier(float value);

  // optional float learning_rate_multiplier = 10 [default = 1];
  inline bool has_learning_rate_multiplier() const;
  inline void clear_learning_rate_multiplier();
  static const int kLearningRateMultiplierFieldNumber = 10;
  inline float learning_rate_multiplier() const;
  inline void set_learning_rate_multiplier(float value);

  // optional float weight_decay_multiplier = 11 [default = 1];
  inline bool has_weight_decay_multiplier() const;
  inline void clear_weight_decay_multiplier();
  static const int kWeightDecayMultiplierFieldNumber = 11;
  inline float weight_decay_multiplier() const;
  inline void set_weight_decay_multiplier(float value);

  // optional int32 split_threshold = 12 [default = 5000000];
  inline bool has_split_threshold() const;
  inline void clear_split_threshold();
  static const int kSplitThresholdFieldNumber = 12;
  inline ::google::protobuf::int32 split_threshold() const;
  inline void set_split_threshold(::google::protobuf::int32 value);

  // optional bool partition = 13 [default = false];
  inline bool has_partition() const;
  inline void clear_partition();
  static const int kPartitionFieldNumber = 13;
  inline bool partition() const;
  inline void set_partition(bool value);

  // optional .lapis.DAryProto data = 14;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 14;
  inline const ::lapis::DAryProto& data() const;
  inline ::lapis::DAryProto* mutable_data();
  inline ::lapis::DAryProto* release_data();
  inline void set_allocated_data(::lapis::DAryProto* data);

  // optional .lapis.DAryProto grad = 15;
  inline bool has_grad() const;
  inline void clear_grad();
  static const int kGradFieldNumber = 15;
  inline const ::lapis::DAryProto& grad() const;
  inline ::lapis::DAryProto* mutable_grad();
  inline ::lapis::DAryProto* release_grad();
  inline void set_allocated_grad(::lapis::DAryProto* grad);

  // @@protoc_insertion_point(class_scope:lapis.ParamProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_init_method();
  inline void clear_has_init_method();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_std();
  inline void clear_has_std();
  inline void set_has_momentum_multiplier();
  inline void clear_has_momentum_multiplier();
  inline void set_has_learning_rate_multiplier();
  inline void clear_has_learning_rate_multiplier();
  inline void set_has_weight_decay_multiplier();
  inline void clear_has_weight_decay_multiplier();
  inline void set_has_split_threshold();
  inline void clear_has_split_threshold();
  inline void set_has_partition();
  inline void clear_has_partition();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_grad();
  inline void clear_has_grad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shape_;
  int init_method_;
  float value_;
  float low_;
  float high_;
  float mean_;
  float std_;
  float momentum_multiplier_;
  float learning_rate_multiplier_;
  float weight_decay_multiplier_;
  ::google::protobuf::int32 split_threshold_;
  ::lapis::DAryProto* data_;
  ::lapis::DAryProto* grad_;
  bool partition_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static ParamProto* default_instance_;
};
// -------------------------------------------------------------------

class LayerProto : public ::google::protobuf::Message {
 public:
  LayerProto();
  virtual ~LayerProto();

  LayerProto(const LayerProto& from);

  inline LayerProto& operator=(const LayerProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerProto& default_instance();

  void Swap(LayerProto* other);

  // implements Message ----------------------------------------------

  LayerProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerProto& from);
  void MergeFrom(const LayerProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LayerProto_PoolingMethod PoolingMethod;
  static const PoolingMethod kMaxPooling = LayerProto_PoolingMethod_kMaxPooling;
  static const PoolingMethod kAvgPooling = LayerProto_PoolingMethod_kAvgPooling;
  static inline bool PoolingMethod_IsValid(int value) {
    return LayerProto_PoolingMethod_IsValid(value);
  }
  static const PoolingMethod PoolingMethod_MIN =
    LayerProto_PoolingMethod_PoolingMethod_MIN;
  static const PoolingMethod PoolingMethod_MAX =
    LayerProto_PoolingMethod_PoolingMethod_MAX;
  static const int PoolingMethod_ARRAYSIZE =
    LayerProto_PoolingMethod_PoolingMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolingMethod_descriptor() {
    return LayerProto_PoolingMethod_descriptor();
  }
  static inline const ::std::string& PoolingMethod_Name(PoolingMethod value) {
    return LayerProto_PoolingMethod_Name(value);
  }
  static inline bool PoolingMethod_Parse(const ::std::string& name,
      PoolingMethod* value) {
    return LayerProto_PoolingMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional int32 num_output = 3;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 3;
  inline ::google::protobuf::int32 num_output() const;
  inline void set_num_output(::google::protobuf::int32 value);

  // repeated .lapis.ParamProto param = 4;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 4;
  inline const ::lapis::ParamProto& param(int index) const;
  inline ::lapis::ParamProto* mutable_param(int index);
  inline ::lapis::ParamProto* add_param();
  inline const ::google::protobuf::RepeatedPtrField< ::lapis::ParamProto >&
      param() const;
  inline ::google::protobuf::RepeatedPtrField< ::lapis::ParamProto >*
      mutable_param();

  // optional int32 window_size = 8;
  inline bool has_window_size() const;
  inline void clear_window_size();
  static const int kWindowSizeFieldNumber = 8;
  inline ::google::protobuf::int32 window_size() const;
  inline void set_window_size(::google::protobuf::int32 value);

  // optional int32 stride = 9 [default = 1];
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 9;
  inline ::google::protobuf::int32 stride() const;
  inline void set_stride(::google::protobuf::int32 value);

  // optional int32 pad = 10 [default = 0];
  inline bool has_pad() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 10;
  inline ::google::protobuf::int32 pad() const;
  inline void set_pad(::google::protobuf::int32 value);

  // optional int32 num_groups = 11 [default = 1];
  inline bool has_num_groups() const;
  inline void clear_num_groups();
  static const int kNumGroupsFieldNumber = 11;
  inline ::google::protobuf::int32 num_groups() const;
  inline void set_num_groups(::google::protobuf::int32 value);

  // optional float alpha = 12;
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 12;
  inline float alpha() const;
  inline void set_alpha(float value);

  // optional float beta = 13;
  inline bool has_beta() const;
  inline void clear_beta();
  static const int kBetaFieldNumber = 13;
  inline float beta() const;
  inline void set_beta(float value);

  // optional float knorm = 14 [default = 1];
  inline bool has_knorm() const;
  inline void clear_knorm();
  static const int kKnormFieldNumber = 14;
  inline float knorm() const;
  inline void set_knorm(float value);

  // optional .lapis.LayerProto.PoolingMethod pooling_method = 16;
  inline bool has_pooling_method() const;
  inline void clear_pooling_method();
  static const int kPoolingMethodFieldNumber = 16;
  inline ::lapis::LayerProto_PoolingMethod pooling_method() const;
  inline void set_pooling_method(::lapis::LayerProto_PoolingMethod value);

  // optional int32 cropsize = 17;
  inline bool has_cropsize() const;
  inline void clear_cropsize();
  static const int kCropsizeFieldNumber = 17;
  inline ::google::protobuf::int32 cropsize() const;
  inline void set_cropsize(::google::protobuf::int32 value);

  // optional bool mirror = 18;
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 18;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional float drop_prob = 19 [default = 0.5];
  inline bool has_drop_prob() const;
  inline void clear_drop_prob();
  static const int kDropProbFieldNumber = 19;
  inline float drop_prob() const;
  inline void set_drop_prob(float value);

  // optional .lapis.DAryProto data = 20;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 20;
  inline const ::lapis::DAryProto& data() const;
  inline ::lapis::DAryProto* mutable_data();
  inline ::lapis::DAryProto* release_data();
  inline void set_allocated_data(::lapis::DAryProto* data);

  // optional .lapis.DAryProto grad = 21;
  inline bool has_grad() const;
  inline void clear_grad();
  static const int kGradFieldNumber = 21;
  inline const ::lapis::DAryProto& grad() const;
  inline ::lapis::DAryProto* mutable_grad();
  inline ::lapis::DAryProto* release_grad();
  inline void set_allocated_grad(::lapis::DAryProto* grad);

  // optional .lapis.DAryProto col_data = 22;
  inline bool has_col_data() const;
  inline void clear_col_data();
  static const int kColDataFieldNumber = 22;
  inline const ::lapis::DAryProto& col_data() const;
  inline ::lapis::DAryProto* mutable_col_data();
  inline ::lapis::DAryProto* release_col_data();
  inline void set_allocated_col_data(::lapis::DAryProto* col_data);

  // optional .lapis.DAryProto split_data = 23;
  inline bool has_split_data() const;
  inline void clear_split_data();
  static const int kSplitDataFieldNumber = 23;
  inline const ::lapis::DAryProto& split_data() const;
  inline ::lapis::DAryProto* mutable_split_data();
  inline ::lapis::DAryProto* release_split_data();
  inline void set_allocated_split_data(::lapis::DAryProto* split_data);

  // optional int32 split_size = 24;
  inline bool has_split_size() const;
  inline void clear_split_size();
  static const int kSplitSizeFieldNumber = 24;
  inline ::google::protobuf::int32 split_size() const;
  inline void set_split_size(::google::protobuf::int32 value);

  // optional int32 split_dim = 25 [default = 1];
  inline bool has_split_dim() const;
  inline void clear_split_dim();
  static const int kSplitDimFieldNumber = 25;
  inline ::google::protobuf::int32 split_dim() const;
  inline void set_split_dim(::google::protobuf::int32 value);

  // optional int32 concat_dim = 26 [default = 1];
  inline bool has_concat_dim() const;
  inline void clear_concat_dim();
  static const int kConcatDimFieldNumber = 26;
  inline ::google::protobuf::int32 concat_dim() const;
  inline void set_concat_dim(::google::protobuf::int32 value);

  // optional int32 topk = 27 [default = 5];
  inline bool has_topk() const;
  inline void clear_topk();
  static const int kTopkFieldNumber = 27;
  inline ::google::protobuf::int32 topk() const;
  inline void set_topk(::google::protobuf::int32 value);

  // repeated string top = 28;
  inline int top_size() const;
  inline void clear_top();
  static const int kTopFieldNumber = 28;
  inline const ::std::string& top(int index) const;
  inline ::std::string* mutable_top(int index);
  inline void set_top(int index, const ::std::string& value);
  inline void set_top(int index, const char* value);
  inline void set_top(int index, const char* value, size_t size);
  inline ::std::string* add_top();
  inline void add_top(const ::std::string& value);
  inline void add_top(const char* value);
  inline void add_top(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // repeated string bottom = 29;
  inline int bottom_size() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 29;
  inline const ::std::string& bottom(int index) const;
  inline ::std::string* mutable_bottom(int index);
  inline void set_bottom(int index, const ::std::string& value);
  inline void set_bottom(int index, const char* value);
  inline void set_bottom(int index, const char* value, size_t size);
  inline ::std::string* add_bottom();
  inline void add_bottom(const ::std::string& value);
  inline void add_bottom(const char* value);
  inline void add_bottom(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // @@protoc_insertion_point(class_scope:lapis.LayerProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_window_size();
  inline void clear_has_window_size();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_pad();
  inline void clear_has_pad();
  inline void set_has_num_groups();
  inline void clear_has_num_groups();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_knorm();
  inline void clear_has_knorm();
  inline void set_has_pooling_method();
  inline void clear_has_pooling_method();
  inline void set_has_cropsize();
  inline void clear_has_cropsize();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_drop_prob();
  inline void clear_has_drop_prob();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_grad();
  inline void clear_has_grad();
  inline void set_has_col_data();
  inline void clear_has_col_data();
  inline void set_has_split_data();
  inline void clear_has_split_data();
  inline void set_has_split_size();
  inline void clear_has_split_size();
  inline void set_has_split_dim();
  inline void clear_has_split_dim();
  inline void set_has_concat_dim();
  inline void clear_has_concat_dim();
  inline void set_has_topk();
  inline void clear_has_topk();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* type_;
  ::google::protobuf::RepeatedPtrField< ::lapis::ParamProto > param_;
  ::google::protobuf::int32 num_output_;
  ::google::protobuf::int32 window_size_;
  ::google::protobuf::int32 stride_;
  ::google::protobuf::int32 pad_;
  ::google::protobuf::int32 num_groups_;
  float alpha_;
  float beta_;
  float knorm_;
  int pooling_method_;
  ::google::protobuf::int32 cropsize_;
  bool mirror_;
  float drop_prob_;
  ::lapis::DAryProto* data_;
  ::lapis::DAryProto* grad_;
  ::lapis::DAryProto* col_data_;
  ::lapis::DAryProto* split_data_;
  ::google::protobuf::int32 split_size_;
  ::google::protobuf::int32 split_dim_;
  ::google::protobuf::int32 concat_dim_;
  ::google::protobuf::int32 topk_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static LayerProto* default_instance_;
};
// -------------------------------------------------------------------

class EdgeProto : public ::google::protobuf::Message {
 public:
  EdgeProto();
  virtual ~EdgeProto();

  EdgeProto(const EdgeProto& from);

  inline EdgeProto& operator=(const EdgeProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EdgeProto& default_instance();

  void Swap(EdgeProto* other);

  // implements Message ----------------------------------------------

  EdgeProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EdgeProto& from);
  void MergeFrom(const EdgeProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool directed = 1 [default = true];
  inline bool has_directed() const;
  inline void clear_directed();
  static const int kDirectedFieldNumber = 1;
  inline bool directed() const;
  inline void set_directed(bool value);

  // optional string layer1 = 2;
  inline bool has_layer1() const;
  inline void clear_layer1();
  static const int kLayer1FieldNumber = 2;
  inline const ::std::string& layer1() const;
  inline void set_layer1(const ::std::string& value);
  inline void set_layer1(const char* value);
  inline void set_layer1(const char* value, size_t size);
  inline ::std::string* mutable_layer1();
  inline ::std::string* release_layer1();
  inline void set_allocated_layer1(::std::string* layer1);

  // optional string layer2 = 3;
  inline bool has_layer2() const;
  inline void clear_layer2();
  static const int kLayer2FieldNumber = 3;
  inline const ::std::string& layer2() const;
  inline void set_layer2(const ::std::string& value);
  inline void set_layer2(const char* value);
  inline void set_layer2(const char* value, size_t size);
  inline ::std::string* mutable_layer2();
  inline ::std::string* release_layer2();
  inline void set_allocated_layer2(::std::string* layer2);

  // @@protoc_insertion_point(class_scope:lapis.EdgeProto)
 private:
  inline void set_has_directed();
  inline void clear_has_directed();
  inline void set_has_layer1();
  inline void clear_has_layer1();
  inline void set_has_layer2();
  inline void clear_has_layer2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* layer1_;
  ::std::string* layer2_;
  bool directed_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static EdgeProto* default_instance_;
};
// -------------------------------------------------------------------

class MeanProto : public ::google::protobuf::Message {
 public:
  MeanProto();
  virtual ~MeanProto();

  MeanProto(const MeanProto& from);

  inline MeanProto& operator=(const MeanProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MeanProto& default_instance();

  void Swap(MeanProto* other);

  // implements Message ----------------------------------------------

  MeanProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MeanProto& from);
  void MergeFrom(const MeanProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num = 1 [default = 0];
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 channels = 2 [default = 0];
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 2;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 3 [default = 0];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 width = 4 [default = 0];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // repeated float data = 5 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 6 [packed = true];
  inline int diff_size() const;
  inline void clear_diff();
  static const int kDiffFieldNumber = 6;
  inline float diff(int index) const;
  inline void set_diff(int index, float value);
  inline void add_diff(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      diff() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_diff();

  // @@protoc_insertion_point(class_scope:lapis.MeanProto)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > diff_;
  mutable int _diff_cached_byte_size_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static MeanProto* default_instance_;
};
// -------------------------------------------------------------------

class DAryProto : public ::google::protobuf::Message {
 public:
  DAryProto();
  virtual ~DAryProto();

  DAryProto(const DAryProto& from);

  inline DAryProto& operator=(const DAryProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DAryProto& default_instance();

  void Swap(DAryProto* other);

  // implements Message ----------------------------------------------

  DAryProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DAryProto& from);
  void MergeFrom(const DAryProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 partition_dim = 1;
  inline bool has_partition_dim() const;
  inline void clear_partition_dim();
  static const int kPartitionDimFieldNumber = 1;
  inline ::google::protobuf::int32 partition_dim() const;
  inline void set_partition_dim(::google::protobuf::int32 value);

  // repeated int32 shape = 2;
  inline int shape_size() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 2;
  inline ::google::protobuf::int32 shape(int index) const;
  inline void set_shape(int index, ::google::protobuf::int32 value);
  inline void add_shape(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shape() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shape();

  // repeated float value = 3 [packed = true];
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline float value(int index) const;
  inline void set_value(int index, float value);
  inline void add_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:lapis.DAryProto)
 private:
  inline void set_has_partition_dim();
  inline void clear_has_partition_dim();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shape_;
  ::google::protobuf::RepeatedField< float > value_;
  mutable int _value_cached_byte_size_;
  ::google::protobuf::int32 partition_dim_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static DAryProto* default_instance_;
};
// -------------------------------------------------------------------

class NetProto : public ::google::protobuf::Message {
 public:
  NetProto();
  virtual ~NetProto();

  NetProto(const NetProto& from);

  inline NetProto& operator=(const NetProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto& default_instance();

  void Swap(NetProto* other);

  // implements Message ----------------------------------------------

  NetProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto& from);
  void MergeFrom(const NetProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .lapis.LayerProto layer = 2;
  inline int layer_size() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 2;
  inline const ::lapis::LayerProto& layer(int index) const;
  inline ::lapis::LayerProto* mutable_layer(int index);
  inline ::lapis::LayerProto* add_layer();
  inline const ::google::protobuf::RepeatedPtrField< ::lapis::LayerProto >&
      layer() const;
  inline ::google::protobuf::RepeatedPtrField< ::lapis::LayerProto >*
      mutable_layer();

  // repeated .lapis.EdgeProto edge = 3;
  inline int edge_size() const;
  inline void clear_edge();
  static const int kEdgeFieldNumber = 3;
  inline const ::lapis::EdgeProto& edge(int index) const;
  inline ::lapis::EdgeProto* mutable_edge(int index);
  inline ::lapis::EdgeProto* add_edge();
  inline const ::google::protobuf::RepeatedPtrField< ::lapis::EdgeProto >&
      edge() const;
  inline ::google::protobuf::RepeatedPtrField< ::lapis::EdgeProto >*
      mutable_edge();

  // @@protoc_insertion_point(class_scope:lapis.NetProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::lapis::LayerProto > layer_;
  ::google::protobuf::RepeatedPtrField< ::lapis::EdgeProto > edge_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static NetProto* default_instance_;
};
// -------------------------------------------------------------------

class PerformanceProto : public ::google::protobuf::Message {
 public:
  PerformanceProto();
  virtual ~PerformanceProto();

  PerformanceProto(const PerformanceProto& from);

  inline PerformanceProto& operator=(const PerformanceProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerformanceProto& default_instance();

  void Swap(PerformanceProto* other);

  // implements Message ----------------------------------------------

  PerformanceProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PerformanceProto& from);
  void MergeFrom(const PerformanceProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float topk_precision = 1 [default = 0];
  inline bool has_topk_precision() const;
  inline void clear_topk_precision();
  static const int kTopkPrecisionFieldNumber = 1;
  inline float topk_precision() const;
  inline void set_topk_precision(float value);

  // optional float top_precision = 2 [default = 0];
  inline bool has_top_precision() const;
  inline void clear_top_precision();
  static const int kTopPrecisionFieldNumber = 2;
  inline float top_precision() const;
  inline void set_top_precision(float value);

  // optional float loss = 3 [default = 0];
  inline bool has_loss() const;
  inline void clear_loss();
  static const int kLossFieldNumber = 3;
  inline float loss() const;
  inline void set_loss(float value);

  // optional int32 count = 4 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 step = 5 [default = 0];
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 5;
  inline ::google::protobuf::int32 step() const;
  inline void set_step(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lapis.PerformanceProto)
 private:
  inline void set_has_topk_precision();
  inline void clear_has_topk_precision();
  inline void set_has_top_precision();
  inline void clear_has_top_precision();
  inline void set_has_loss();
  inline void clear_has_loss();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_step();
  inline void clear_has_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float topk_precision_;
  float top_precision_;
  float loss_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 step_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static PerformanceProto* default_instance_;
};
// -------------------------------------------------------------------

class SolverProto : public ::google::protobuf::Message {
 public:
  SolverProto();
  virtual ~SolverProto();

  SolverProto(const SolverProto& from);

  inline SolverProto& operator=(const SolverProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverProto& default_instance();

  void Swap(SolverProto* other);

  // implements Message ----------------------------------------------

  SolverProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverProto& from);
  void MergeFrom(const SolverProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SolverProto_GradCalcAlg GradCalcAlg;
  static const GradCalcAlg kBackPropagation = SolverProto_GradCalcAlg_kBackPropagation;
  static const GradCalcAlg kContrastiveDivergence = SolverProto_GradCalcAlg_kContrastiveDivergence;
  static inline bool GradCalcAlg_IsValid(int value) {
    return SolverProto_GradCalcAlg_IsValid(value);
  }
  static const GradCalcAlg GradCalcAlg_MIN =
    SolverProto_GradCalcAlg_GradCalcAlg_MIN;
  static const GradCalcAlg GradCalcAlg_MAX =
    SolverProto_GradCalcAlg_GradCalcAlg_MAX;
  static const int GradCalcAlg_ARRAYSIZE =
    SolverProto_GradCalcAlg_GradCalcAlg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GradCalcAlg_descriptor() {
    return SolverProto_GradCalcAlg_descriptor();
  }
  static inline const ::std::string& GradCalcAlg_Name(GradCalcAlg value) {
    return SolverProto_GradCalcAlg_Name(value);
  }
  static inline bool GradCalcAlg_Parse(const ::std::string& name,
      GradCalcAlg* value) {
    return SolverProto_GradCalcAlg_Parse(name, value);
  }

  typedef SolverProto_Partition Partition;
  static const Partition kData = SolverProto_Partition_kData;
  static const Partition kModel = SolverProto_Partition_kModel;
  static const Partition kHybrid = SolverProto_Partition_kHybrid;
  static inline bool Partition_IsValid(int value) {
    return SolverProto_Partition_IsValid(value);
  }
  static const Partition Partition_MIN =
    SolverProto_Partition_Partition_MIN;
  static const Partition Partition_MAX =
    SolverProto_Partition_Partition_MAX;
  static const int Partition_ARRAYSIZE =
    SolverProto_Partition_Partition_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Partition_descriptor() {
    return SolverProto_Partition_descriptor();
  }
  static inline const ::std::string& Partition_Name(Partition value) {
    return SolverProto_Partition_Name(value);
  }
  static inline bool Partition_Parse(const ::std::string& name,
      Partition* value) {
    return SolverProto_Partition_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 step = 1 [default = 0];
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 1;
  inline ::google::protobuf::int32 step() const;
  inline void set_step(::google::protobuf::int32 value);

  // optional int32 display_after_steps = 6 [default = 0];
  inline bool has_display_after_steps() const;
  inline void clear_display_after_steps();
  static const int kDisplayAfterStepsFieldNumber = 6;
  inline ::google::protobuf::int32 display_after_steps() const;
  inline void set_display_after_steps(::google::protobuf::int32 value);

  // optional int32 display_every_steps = 7 [default = 0];
  inline bool has_display_every_steps() const;
  inline void clear_display_every_steps();
  static const int kDisplayEveryStepsFieldNumber = 7;
  inline ::google::protobuf::int32 display_every_steps() const;
  inline void set_display_every_steps(::google::protobuf::int32 value);

  // optional int32 validation_after_steps = 10 [default = 0];
  inline bool has_validation_after_steps() const;
  inline void clear_validation_after_steps();
  static const int kValidationAfterStepsFieldNumber = 10;
  inline ::google::protobuf::int32 validation_after_steps() const;
  inline void set_validation_after_steps(::google::protobuf::int32 value);

  // optional int32 validation_every_steps = 11 [default = 0];
  inline bool has_validation_every_steps() const;
  inline void clear_validation_every_steps();
  static const int kValidationEveryStepsFieldNumber = 11;
  inline ::google::protobuf::int32 validation_every_steps() const;
  inline void set_validation_every_steps(::google::protobuf::int32 value);

  // optional int32 test_after_steps = 13 [default = 0];
  inline bool has_test_after_steps() const;
  inline void clear_test_after_steps();
  static const int kTestAfterStepsFieldNumber = 13;
  inline ::google::protobuf::int32 test_after_steps() const;
  inline void set_test_after_steps(::google::protobuf::int32 value);

  // optional int32 test_every_steps = 14 [default = 0];
  inline bool has_test_every_steps() const;
  inline void clear_test_every_steps();
  static const int kTestEveryStepsFieldNumber = 14;
  inline ::google::protobuf::int32 test_every_steps() const;
  inline void set_test_every_steps(::google::protobuf::int32 value);

  // optional int32 batchsize = 19;
  inline bool has_batchsize() const;
  inline void clear_batchsize();
  static const int kBatchsizeFieldNumber = 19;
  inline ::google::protobuf::int32 batchsize() const;
  inline void set_batchsize(::google::protobuf::int32 value);

  // optional int32 train_steps = 20;
  inline bool has_train_steps() const;
  inline void clear_train_steps();
  static const int kTrainStepsFieldNumber = 20;
  inline ::google::protobuf::int32 train_steps() const;
  inline void set_train_steps(::google::protobuf::int32 value);

  // optional int32 validation_steps = 21;
  inline bool has_validation_steps() const;
  inline void clear_validation_steps();
  static const int kValidationStepsFieldNumber = 21;
  inline ::google::protobuf::int32 validation_steps() const;
  inline void set_validation_steps(::google::protobuf::int32 value);

  // optional int32 test_steps = 22;
  inline bool has_test_steps() const;
  inline void clear_test_steps();
  static const int kTestStepsFieldNumber = 22;
  inline ::google::protobuf::int32 test_steps() const;
  inline void set_test_steps(::google::protobuf::int32 value);

  // optional int32 max_splits = 23 [default = 3571];
  inline bool has_max_splits() const;
  inline void clear_max_splits();
  static const int kMaxSplitsFieldNumber = 23;
  inline ::google::protobuf::int32 max_splits() const;
  inline void set_max_splits(::google::protobuf::int32 value);

  // optional .lapis.SGDProto sgd = 24;
  inline bool has_sgd() const;
  inline void clear_sgd();
  static const int kSgdFieldNumber = 24;
  inline const ::lapis::SGDProto& sgd() const;
  inline ::lapis::SGDProto* mutable_sgd();
  inline ::lapis::SGDProto* release_sgd();
  inline void set_allocated_sgd(::lapis::SGDProto* sgd);

  // optional .lapis.SolverProto.GradCalcAlg alg = 26 [default = kBackPropagation];
  inline bool has_alg() const;
  inline void clear_alg();
  static const int kAlgFieldNumber = 26;
  inline ::lapis::SolverProto_GradCalcAlg alg() const;
  inline void set_alg(::lapis::SolverProto_GradCalcAlg value);

  // optional .lapis.SolverProto.Partition partition = 27;
  inline bool has_partition() const;
  inline void clear_partition();
  static const int kPartitionFieldNumber = 27;
  inline ::lapis::SolverProto_Partition partition() const;
  inline void set_partition(::lapis::SolverProto_Partition value);

  // @@protoc_insertion_point(class_scope:lapis.SolverProto)
 private:
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_display_after_steps();
  inline void clear_has_display_after_steps();
  inline void set_has_display_every_steps();
  inline void clear_has_display_every_steps();
  inline void set_has_validation_after_steps();
  inline void clear_has_validation_after_steps();
  inline void set_has_validation_every_steps();
  inline void clear_has_validation_every_steps();
  inline void set_has_test_after_steps();
  inline void clear_has_test_after_steps();
  inline void set_has_test_every_steps();
  inline void clear_has_test_every_steps();
  inline void set_has_batchsize();
  inline void clear_has_batchsize();
  inline void set_has_train_steps();
  inline void clear_has_train_steps();
  inline void set_has_validation_steps();
  inline void clear_has_validation_steps();
  inline void set_has_test_steps();
  inline void clear_has_test_steps();
  inline void set_has_max_splits();
  inline void clear_has_max_splits();
  inline void set_has_sgd();
  inline void clear_has_sgd();
  inline void set_has_alg();
  inline void clear_has_alg();
  inline void set_has_partition();
  inline void clear_has_partition();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 step_;
  ::google::protobuf::int32 display_after_steps_;
  ::google::protobuf::int32 display_every_steps_;
  ::google::protobuf::int32 validation_after_steps_;
  ::google::protobuf::int32 validation_every_steps_;
  ::google::protobuf::int32 test_after_steps_;
  ::google::protobuf::int32 test_every_steps_;
  ::google::protobuf::int32 batchsize_;
  ::google::protobuf::int32 train_steps_;
  ::google::protobuf::int32 validation_steps_;
  ::google::protobuf::int32 test_steps_;
  ::google::protobuf::int32 max_splits_;
  ::lapis::SGDProto* sgd_;
  int alg_;
  int partition_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static SolverProto* default_instance_;
};
// -------------------------------------------------------------------

class Model : public ::google::protobuf::Message {
 public:
  Model();
  virtual ~Model();

  Model(const Model& from);

  inline Model& operator=(const Model& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Model& default_instance();

  void Swap(Model* other);

  // implements Message ----------------------------------------------

  Model* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Model& from);
  void MergeFrom(const Model& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .lapis.NetProto net = 2;
  inline bool has_net() const;
  inline void clear_net();
  static const int kNetFieldNumber = 2;
  inline const ::lapis::NetProto& net() const;
  inline ::lapis::NetProto* mutable_net();
  inline ::lapis::NetProto* release_net();
  inline void set_allocated_net(::lapis::NetProto* net);

  // optional .lapis.SolverProto solver = 3;
  inline bool has_solver() const;
  inline void clear_solver();
  static const int kSolverFieldNumber = 3;
  inline const ::lapis::SolverProto& solver() const;
  inline ::lapis::SolverProto* mutable_solver();
  inline ::lapis::SolverProto* release_solver();
  inline void set_allocated_solver(::lapis::SolverProto* solver);

  // @@protoc_insertion_point(class_scope:lapis.Model)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_net();
  inline void clear_has_net();
  inline void set_has_solver();
  inline void clear_has_solver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::lapis::NetProto* net_;
  ::lapis::SolverProto* solver_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static Model* default_instance_;
};
// -------------------------------------------------------------------

class Record : public ::google::protobuf::Message {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();

  void Swap(Record* other);

  // implements Message ----------------------------------------------

  Record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .lapis.DAryProto image = 1;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 1;
  inline const ::lapis::DAryProto& image() const;
  inline ::lapis::DAryProto* mutable_image();
  inline ::lapis::DAryProto* release_image();
  inline void set_allocated_image(::lapis::DAryProto* image);

  // optional int32 label = 2;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline ::google::protobuf::int32 label() const;
  inline void set_label(::google::protobuf::int32 value);

  // optional string id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:lapis.Record)
 private:
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::lapis::DAryProto* image_;
  ::std::string* id_;
  ::google::protobuf::int32 label_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static Record* default_instance_;
};
// -------------------------------------------------------------------

class SGDProto : public ::google::protobuf::Message {
 public:
  SGDProto();
  virtual ~SGDProto();

  SGDProto(const SGDProto& from);

  inline SGDProto& operator=(const SGDProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SGDProto& default_instance();

  void Swap(SGDProto* other);

  // implements Message ----------------------------------------------

  SGDProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SGDProto& from);
  void MergeFrom(const SGDProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SGDProto_ChangeProto ChangeProto;
  static const ChangeProto kFixed = SGDProto_ChangeProto_kFixed;
  static const ChangeProto kInverse_t = SGDProto_ChangeProto_kInverse_t;
  static const ChangeProto kExponential = SGDProto_ChangeProto_kExponential;
  static const ChangeProto kLinear = SGDProto_ChangeProto_kLinear;
  static const ChangeProto kStep = SGDProto_ChangeProto_kStep;
  static inline bool ChangeProto_IsValid(int value) {
    return SGDProto_ChangeProto_IsValid(value);
  }
  static const ChangeProto ChangeProto_MIN =
    SGDProto_ChangeProto_ChangeProto_MIN;
  static const ChangeProto ChangeProto_MAX =
    SGDProto_ChangeProto_ChangeProto_MAX;
  static const int ChangeProto_ARRAYSIZE =
    SGDProto_ChangeProto_ChangeProto_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChangeProto_descriptor() {
    return SGDProto_ChangeProto_descriptor();
  }
  static inline const ::std::string& ChangeProto_Name(ChangeProto value) {
    return SGDProto_ChangeProto_Name(value);
  }
  static inline bool ChangeProto_Parse(const ::std::string& name,
      ChangeProto* value) {
    return SGDProto_ChangeProto_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional float learning_rate = 1;
  inline bool has_learning_rate() const;
  inline void clear_learning_rate();
  static const int kLearningRateFieldNumber = 1;
  inline float learning_rate() const;
  inline void set_learning_rate(float value);

  // optional float momentum = 2;
  inline bool has_momentum() const;
  inline void clear_momentum();
  static const int kMomentumFieldNumber = 2;
  inline float momentum() const;
  inline void set_momentum(float value);

  // optional float weight_decay = 3;
  inline bool has_weight_decay() const;
  inline void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 3;
  inline float weight_decay() const;
  inline void set_weight_decay(float value);

  // optional float gamma = 4;
  inline bool has_gamma() const;
  inline void clear_gamma();
  static const int kGammaFieldNumber = 4;
  inline float gamma() const;
  inline void set_gamma(float value);

  // optional int32 learning_rate_change_steps = 5;
  inline bool has_learning_rate_change_steps() const;
  inline void clear_learning_rate_change_steps();
  static const int kLearningRateChangeStepsFieldNumber = 5;
  inline ::google::protobuf::int32 learning_rate_change_steps() const;
  inline void set_learning_rate_change_steps(::google::protobuf::int32 value);

  // optional .lapis.SGDProto.ChangeProto learning_rate_change = 6 [default = kInverse_t];
  inline bool has_learning_rate_change() const;
  inline void clear_learning_rate_change();
  static const int kLearningRateChangeFieldNumber = 6;
  inline ::lapis::SGDProto_ChangeProto learning_rate_change() const;
  inline void set_learning_rate_change(::lapis::SGDProto_ChangeProto value);

  // optional bool synchronous = 7 [default = false];
  inline bool has_synchronous() const;
  inline void clear_synchronous();
  static const int kSynchronousFieldNumber = 7;
  inline bool synchronous() const;
  inline void set_synchronous(bool value);

  // optional string handler = 8 [default = "SGDHandler"];
  inline bool has_handler() const;
  inline void clear_handler();
  static const int kHandlerFieldNumber = 8;
  inline const ::std::string& handler() const;
  inline void set_handler(const ::std::string& value);
  inline void set_handler(const char* value);
  inline void set_handler(const char* value, size_t size);
  inline ::std::string* mutable_handler();
  inline ::std::string* release_handler();
  inline void set_allocated_handler(::std::string* handler);

  // optional int32 checkpoint_after_steps = 9 [default = 0];
  inline bool has_checkpoint_after_steps() const;
  inline void clear_checkpoint_after_steps();
  static const int kCheckpointAfterStepsFieldNumber = 9;
  inline ::google::protobuf::int32 checkpoint_after_steps() const;
  inline void set_checkpoint_after_steps(::google::protobuf::int32 value);

  // optional int32 checkpoint_every_steps = 10 [default = 0];
  inline bool has_checkpoint_every_steps() const;
  inline void clear_checkpoint_every_steps();
  static const int kCheckpointEveryStepsFieldNumber = 10;
  inline ::google::protobuf::int32 checkpoint_every_steps() const;
  inline void set_checkpoint_every_steps(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(SGDProto)
  // @@protoc_insertion_point(class_scope:lapis.SGDProto)
 private:
  inline void set_has_learning_rate();
  inline void clear_has_learning_rate();
  inline void set_has_momentum();
  inline void clear_has_momentum();
  inline void set_has_weight_decay();
  inline void clear_has_weight_decay();
  inline void set_has_gamma();
  inline void clear_has_gamma();
  inline void set_has_learning_rate_change_steps();
  inline void clear_has_learning_rate_change_steps();
  inline void set_has_learning_rate_change();
  inline void clear_has_learning_rate_change();
  inline void set_has_synchronous();
  inline void clear_has_synchronous();
  inline void set_has_handler();
  inline void clear_has_handler();
  inline void set_has_checkpoint_after_steps();
  inline void clear_has_checkpoint_after_steps();
  inline void set_has_checkpoint_every_steps();
  inline void clear_has_checkpoint_every_steps();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float learning_rate_;
  float momentum_;
  float weight_decay_;
  float gamma_;
  ::google::protobuf::int32 learning_rate_change_steps_;
  int learning_rate_change_;
  static ::std::string* _default_handler_;
  ::std::string* handler_;
  bool synchronous_;
  ::google::protobuf::int32 checkpoint_after_steps_;
  ::google::protobuf::int32 checkpoint_every_steps_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static SGDProto* default_instance_;
};
// -------------------------------------------------------------------

class TKey : public ::google::protobuf::Message {
 public:
  TKey();
  virtual ~TKey();

  TKey(const TKey& from);

  inline TKey& operator=(const TKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TKey& default_instance();

  void Swap(TKey* other);

  // implements Message ----------------------------------------------

  TKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TKey& from);
  void MergeFrom(const TKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TKey)
  // @@protoc_insertion_point(class_scope:lapis.TKey)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 rank_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static TKey* default_instance_;
};
// -------------------------------------------------------------------

class TVal : public ::google::protobuf::Message {
 public:
  TVal();
  virtual ~TVal();

  TVal(const TVal& from);

  inline TVal& operator=(const TVal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TVal& default_instance();

  void Swap(TVal* other);

  // implements Message ----------------------------------------------

  TVal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TVal& from);
  void MergeFrom(const TVal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional int32 num_aggregate = 4;
  inline bool has_num_aggregate() const;
  inline void clear_num_aggregate();
  static const int kNumAggregateFieldNumber = 4;
  inline ::google::protobuf::int32 num_aggregate() const;
  inline void set_num_aggregate(::google::protobuf::int32 value);

  // optional int32 version = 5;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 5;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional int32 rank = 6;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 6;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 param_id = 7;
  inline bool has_param_id() const;
  inline void clear_param_id();
  static const int kParamIdFieldNumber = 7;
  inline ::google::protobuf::int32 param_id() const;
  inline void set_param_id(::google::protobuf::int32 value);

  // optional int32 split_id = 8;
  inline bool has_split_id() const;
  inline void clear_split_id();
  static const int kSplitIdFieldNumber = 8;
  inline ::google::protobuf::int32 split_id() const;
  inline void set_split_id(::google::protobuf::int32 value);

  // optional int32 split_offset = 9;
  inline bool has_split_offset() const;
  inline void clear_split_offset();
  static const int kSplitOffsetFieldNumber = 9;
  inline ::google::protobuf::int32 split_offset() const;
  inline void set_split_offset(::google::protobuf::int32 value);

  // optional float learning_rate_multiplier = 10 [default = 1];
  inline bool has_learning_rate_multiplier() const;
  inline void clear_learning_rate_multiplier();
  static const int kLearningRateMultiplierFieldNumber = 10;
  inline float learning_rate_multiplier() const;
  inline void set_learning_rate_multiplier(float value);

  // optional float weight_decay_multiplier = 11 [default = 1];
  inline bool has_weight_decay_multiplier() const;
  inline void clear_weight_decay_multiplier();
  static const int kWeightDecayMultiplierFieldNumber = 11;
  inline float weight_decay_multiplier() const;
  inline void set_weight_decay_multiplier(float value);

  // optional .lapis.DAryProto data = 12;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 12;
  inline const ::lapis::DAryProto& data() const;
  inline ::lapis::DAryProto* mutable_data();
  inline ::lapis::DAryProto* release_data();
  inline void set_allocated_data(::lapis::DAryProto* data);

  // optional .lapis.DAryProto grad = 13;
  inline bool has_grad() const;
  inline void clear_grad();
  static const int kGradFieldNumber = 13;
  inline const ::lapis::DAryProto& grad() const;
  inline ::lapis::DAryProto* mutable_grad();
  inline ::lapis::DAryProto* release_grad();
  inline void set_allocated_grad(::lapis::DAryProto* grad);

  // optional .lapis.DAryProto history = 14;
  inline bool has_history() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 14;
  inline const ::lapis::DAryProto& history() const;
  inline ::lapis::DAryProto* mutable_history();
  inline ::lapis::DAryProto* release_history();
  inline void set_allocated_history(::lapis::DAryProto* history);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TVal)
  // @@protoc_insertion_point(class_scope:lapis.TVal)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num_aggregate();
  inline void clear_has_num_aggregate();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_param_id();
  inline void clear_has_param_id();
  inline void set_has_split_id();
  inline void clear_has_split_id();
  inline void set_has_split_offset();
  inline void clear_has_split_offset();
  inline void set_has_learning_rate_multiplier();
  inline void clear_has_learning_rate_multiplier();
  inline void set_has_weight_decay_multiplier();
  inline void clear_has_weight_decay_multiplier();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_grad();
  inline void clear_has_grad();
  inline void set_has_history();
  inline void clear_has_history();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* type_;
  ::google::protobuf::int32 num_aggregate_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 param_id_;
  ::google::protobuf::int32 split_id_;
  ::google::protobuf::int32 split_offset_;
  float learning_rate_multiplier_;
  float weight_decay_multiplier_;
  ::lapis::DAryProto* data_;
  ::lapis::DAryProto* grad_;
  ::lapis::DAryProto* history_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static TVal* default_instance_;
};
// -------------------------------------------------------------------

class Tuple : public ::google::protobuf::Message {
 public:
  Tuple();
  virtual ~Tuple();

  Tuple(const Tuple& from);

  inline Tuple& operator=(const Tuple& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tuple& default_instance();

  void Swap(Tuple* other);

  // implements Message ----------------------------------------------

  Tuple* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tuple& from);
  void MergeFrom(const Tuple& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .lapis.TKey key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::lapis::TKey& key() const;
  inline ::lapis::TKey* mutable_key();
  inline ::lapis::TKey* release_key();
  inline void set_allocated_key(::lapis::TKey* key);

  // optional .lapis.TVal val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline const ::lapis::TVal& val() const;
  inline ::lapis::TVal* mutable_val();
  inline ::lapis::TVal* release_val();
  inline void set_allocated_val(::lapis::TVal* val);

  // @@protoc_insertion_point(class_scope:lapis.Tuple)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::lapis::TKey* key_;
  ::lapis::TVal* val_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static Tuple* default_instance_;
};
// -------------------------------------------------------------------

class SGDVal : public ::google::protobuf::Message {
 public:
  SGDVal();
  virtual ~SGDVal();

  SGDVal(const SGDVal& from);

  inline SGDVal& operator=(const SGDVal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SGDVal& default_instance();

  void Swap(SGDVal* other);

  // implements Message ----------------------------------------------

  SGDVal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SGDVal& from);
  void MergeFrom(const SGDVal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kSgdFieldNumber = 101;
  static ::google::protobuf::internal::ExtensionIdentifier< ::lapis::TVal,
      ::google::protobuf::internal::MessageTypeTraits< ::lapis::SGDVal >, 11, false >
    sgd;
  // @@protoc_insertion_point(class_scope:lapis.SGDVal)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static SGDVal* default_instance_;
};
// -------------------------------------------------------------------

class AdaVal : public ::google::protobuf::Message {
 public:
  AdaVal();
  virtual ~AdaVal();

  AdaVal(const AdaVal& from);

  inline AdaVal& operator=(const AdaVal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdaVal& default_instance();

  void Swap(AdaVal* other);

  // implements Message ----------------------------------------------

  AdaVal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdaVal& from);
  void MergeFrom(const AdaVal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kAdaFieldNumber = 102;
  static ::google::protobuf::internal::ExtensionIdentifier< ::lapis::TVal,
      ::google::protobuf::internal::MessageTypeTraits< ::lapis::AdaVal >, 11, false >
    ada;
  // @@protoc_insertion_point(class_scope:lapis.AdaVal)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static AdaVal* default_instance_;
};
// ===================================================================


// ===================================================================

// ParamProto

// required string name = 1;
inline bool ParamProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamProto::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ParamProto::name() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.name)
  return *name_;
}
inline void ParamProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.ParamProto.name)
}
inline void ParamProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.ParamProto.name)
}
inline void ParamProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.ParamProto.name)
}
inline ::std::string* ParamProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lapis.ParamProto.name)
  return name_;
}
inline ::std::string* ParamProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParamProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.ParamProto.name)
}

// repeated int32 shape = 2;
inline int ParamProto::shape_size() const {
  return shape_.size();
}
inline void ParamProto::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int32 ParamProto::shape(int index) const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.shape)
  return shape_.Get(index);
}
inline void ParamProto::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:lapis.ParamProto.shape)
}
inline void ParamProto::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:lapis.ParamProto.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ParamProto::shape() const {
  // @@protoc_insertion_point(field_list:lapis.ParamProto.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ParamProto::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:lapis.ParamProto.shape)
  return &shape_;
}

// optional .lapis.ParamProto.InitMethod init_method = 3 [default = kConstant];
inline bool ParamProto::has_init_method() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParamProto::set_has_init_method() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParamProto::clear_has_init_method() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParamProto::clear_init_method() {
  init_method_ = 0;
  clear_has_init_method();
}
inline ::lapis::ParamProto_InitMethod ParamProto::init_method() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.init_method)
  return static_cast< ::lapis::ParamProto_InitMethod >(init_method_);
}
inline void ParamProto::set_init_method(::lapis::ParamProto_InitMethod value) {
  assert(::lapis::ParamProto_InitMethod_IsValid(value));
  set_has_init_method();
  init_method_ = value;
  // @@protoc_insertion_point(field_set:lapis.ParamProto.init_method)
}

// optional float value = 4 [default = 1];
inline bool ParamProto::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParamProto::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParamProto::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParamProto::clear_value() {
  value_ = 1;
  clear_has_value();
}
inline float ParamProto::value() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.value)
  return value_;
}
inline void ParamProto::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:lapis.ParamProto.value)
}

// optional float low = 5 [default = -1];
inline bool ParamProto::has_low() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParamProto::set_has_low() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParamProto::clear_has_low() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParamProto::clear_low() {
  low_ = -1;
  clear_has_low();
}
inline float ParamProto::low() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.low)
  return low_;
}
inline void ParamProto::set_low(float value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:lapis.ParamProto.low)
}

// optional float high = 6 [default = 1];
inline bool ParamProto::has_high() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ParamProto::set_has_high() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ParamProto::clear_has_high() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ParamProto::clear_high() {
  high_ = 1;
  clear_has_high();
}
inline float ParamProto::high() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.high)
  return high_;
}
inline void ParamProto::set_high(float value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:lapis.ParamProto.high)
}

// optional float mean = 7 [default = 0];
inline bool ParamProto::has_mean() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ParamProto::set_has_mean() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ParamProto::clear_has_mean() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ParamProto::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float ParamProto::mean() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.mean)
  return mean_;
}
inline void ParamProto::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:lapis.ParamProto.mean)
}

// optional float std = 8 [default = 1];
inline bool ParamProto::has_std() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ParamProto::set_has_std() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ParamProto::clear_has_std() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ParamProto::clear_std() {
  std_ = 1;
  clear_has_std();
}
inline float ParamProto::std() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.std)
  return std_;
}
inline void ParamProto::set_std(float value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:lapis.ParamProto.std)
}

// optional float momentum_multiplier = 9 [default = 1];
inline bool ParamProto::has_momentum_multiplier() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ParamProto::set_has_momentum_multiplier() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ParamProto::clear_has_momentum_multiplier() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ParamProto::clear_momentum_multiplier() {
  momentum_multiplier_ = 1;
  clear_has_momentum_multiplier();
}
inline float ParamProto::momentum_multiplier() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.momentum_multiplier)
  return momentum_multiplier_;
}
inline void ParamProto::set_momentum_multiplier(float value) {
  set_has_momentum_multiplier();
  momentum_multiplier_ = value;
  // @@protoc_insertion_point(field_set:lapis.ParamProto.momentum_multiplier)
}

// optional float learning_rate_multiplier = 10 [default = 1];
inline bool ParamProto::has_learning_rate_multiplier() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ParamProto::set_has_learning_rate_multiplier() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ParamProto::clear_has_learning_rate_multiplier() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ParamProto::clear_learning_rate_multiplier() {
  learning_rate_multiplier_ = 1;
  clear_has_learning_rate_multiplier();
}
inline float ParamProto::learning_rate_multiplier() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.learning_rate_multiplier)
  return learning_rate_multiplier_;
}
inline void ParamProto::set_learning_rate_multiplier(float value) {
  set_has_learning_rate_multiplier();
  learning_rate_multiplier_ = value;
  // @@protoc_insertion_point(field_set:lapis.ParamProto.learning_rate_multiplier)
}

// optional float weight_decay_multiplier = 11 [default = 1];
inline bool ParamProto::has_weight_decay_multiplier() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ParamProto::set_has_weight_decay_multiplier() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ParamProto::clear_has_weight_decay_multiplier() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ParamProto::clear_weight_decay_multiplier() {
  weight_decay_multiplier_ = 1;
  clear_has_weight_decay_multiplier();
}
inline float ParamProto::weight_decay_multiplier() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.weight_decay_multiplier)
  return weight_decay_multiplier_;
}
inline void ParamProto::set_weight_decay_multiplier(float value) {
  set_has_weight_decay_multiplier();
  weight_decay_multiplier_ = value;
  // @@protoc_insertion_point(field_set:lapis.ParamProto.weight_decay_multiplier)
}

// optional int32 split_threshold = 12 [default = 5000000];
inline bool ParamProto::has_split_threshold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ParamProto::set_has_split_threshold() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ParamProto::clear_has_split_threshold() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ParamProto::clear_split_threshold() {
  split_threshold_ = 5000000;
  clear_has_split_threshold();
}
inline ::google::protobuf::int32 ParamProto::split_threshold() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.split_threshold)
  return split_threshold_;
}
inline void ParamProto::set_split_threshold(::google::protobuf::int32 value) {
  set_has_split_threshold();
  split_threshold_ = value;
  // @@protoc_insertion_point(field_set:lapis.ParamProto.split_threshold)
}

// optional bool partition = 13 [default = false];
inline bool ParamProto::has_partition() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ParamProto::set_has_partition() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ParamProto::clear_has_partition() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ParamProto::clear_partition() {
  partition_ = false;
  clear_has_partition();
}
inline bool ParamProto::partition() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.partition)
  return partition_;
}
inline void ParamProto::set_partition(bool value) {
  set_has_partition();
  partition_ = value;
  // @@protoc_insertion_point(field_set:lapis.ParamProto.partition)
}

// optional .lapis.DAryProto data = 14;
inline bool ParamProto::has_data() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ParamProto::set_has_data() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ParamProto::clear_has_data() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ParamProto::clear_data() {
  if (data_ != NULL) data_->::lapis::DAryProto::Clear();
  clear_has_data();
}
inline const ::lapis::DAryProto& ParamProto::data() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::lapis::DAryProto* ParamProto::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::lapis::DAryProto;
  // @@protoc_insertion_point(field_mutable:lapis.ParamProto.data)
  return data_;
}
inline ::lapis::DAryProto* ParamProto::release_data() {
  clear_has_data();
  ::lapis::DAryProto* temp = data_;
  data_ = NULL;
  return temp;
}
inline void ParamProto::set_allocated_data(::lapis::DAryProto* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.ParamProto.data)
}

// optional .lapis.DAryProto grad = 15;
inline bool ParamProto::has_grad() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ParamProto::set_has_grad() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ParamProto::clear_has_grad() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ParamProto::clear_grad() {
  if (grad_ != NULL) grad_->::lapis::DAryProto::Clear();
  clear_has_grad();
}
inline const ::lapis::DAryProto& ParamProto::grad() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.grad)
  return grad_ != NULL ? *grad_ : *default_instance_->grad_;
}
inline ::lapis::DAryProto* ParamProto::mutable_grad() {
  set_has_grad();
  if (grad_ == NULL) grad_ = new ::lapis::DAryProto;
  // @@protoc_insertion_point(field_mutable:lapis.ParamProto.grad)
  return grad_;
}
inline ::lapis::DAryProto* ParamProto::release_grad() {
  clear_has_grad();
  ::lapis::DAryProto* temp = grad_;
  grad_ = NULL;
  return temp;
}
inline void ParamProto::set_allocated_grad(::lapis::DAryProto* grad) {
  delete grad_;
  grad_ = grad;
  if (grad) {
    set_has_grad();
  } else {
    clear_has_grad();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.ParamProto.grad)
}

// -------------------------------------------------------------------

// LayerProto

// required string name = 1;
inline bool LayerProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerProto::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LayerProto::name() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.name)
  return *name_;
}
inline void LayerProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.LayerProto.name)
}
inline void LayerProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.LayerProto.name)
}
inline void LayerProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.LayerProto.name)
}
inline ::std::string* LayerProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lapis.LayerProto.name)
  return name_;
}
inline ::std::string* LayerProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.LayerProto.name)
}

// required string type = 2;
inline bool LayerProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerProto::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& LayerProto::type() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.type)
  return *type_;
}
inline void LayerProto::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.LayerProto.type)
}
inline void LayerProto::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.LayerProto.type)
}
inline void LayerProto::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.LayerProto.type)
}
inline ::std::string* LayerProto::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lapis.LayerProto.type)
  return type_;
}
inline ::std::string* LayerProto::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerProto::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.LayerProto.type)
}

// optional int32 num_output = 3;
inline bool LayerProto::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LayerProto::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LayerProto::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LayerProto::clear_num_output() {
  num_output_ = 0;
  clear_has_num_output();
}
inline ::google::protobuf::int32 LayerProto::num_output() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.num_output)
  return num_output_;
}
inline void LayerProto::set_num_output(::google::protobuf::int32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.num_output)
}

// repeated .lapis.ParamProto param = 4;
inline int LayerProto::param_size() const {
  return param_.size();
}
inline void LayerProto::clear_param() {
  param_.Clear();
}
inline const ::lapis::ParamProto& LayerProto::param(int index) const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.param)
  return param_.Get(index);
}
inline ::lapis::ParamProto* LayerProto::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:lapis.LayerProto.param)
  return param_.Mutable(index);
}
inline ::lapis::ParamProto* LayerProto::add_param() {
  // @@protoc_insertion_point(field_add:lapis.LayerProto.param)
  return param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lapis::ParamProto >&
LayerProto::param() const {
  // @@protoc_insertion_point(field_list:lapis.LayerProto.param)
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::lapis::ParamProto >*
LayerProto::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:lapis.LayerProto.param)
  return &param_;
}

// optional int32 window_size = 8;
inline bool LayerProto::has_window_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayerProto::set_has_window_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayerProto::clear_has_window_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayerProto::clear_window_size() {
  window_size_ = 0;
  clear_has_window_size();
}
inline ::google::protobuf::int32 LayerProto::window_size() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.window_size)
  return window_size_;
}
inline void LayerProto::set_window_size(::google::protobuf::int32 value) {
  set_has_window_size();
  window_size_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.window_size)
}

// optional int32 stride = 9 [default = 1];
inline bool LayerProto::has_stride() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LayerProto::set_has_stride() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LayerProto::clear_has_stride() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LayerProto::clear_stride() {
  stride_ = 1;
  clear_has_stride();
}
inline ::google::protobuf::int32 LayerProto::stride() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.stride)
  return stride_;
}
inline void LayerProto::set_stride(::google::protobuf::int32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.stride)
}

// optional int32 pad = 10 [default = 0];
inline bool LayerProto::has_pad() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LayerProto::set_has_pad() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LayerProto::clear_has_pad() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LayerProto::clear_pad() {
  pad_ = 0;
  clear_has_pad();
}
inline ::google::protobuf::int32 LayerProto::pad() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.pad)
  return pad_;
}
inline void LayerProto::set_pad(::google::protobuf::int32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.pad)
}

// optional int32 num_groups = 11 [default = 1];
inline bool LayerProto::has_num_groups() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LayerProto::set_has_num_groups() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LayerProto::clear_has_num_groups() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LayerProto::clear_num_groups() {
  num_groups_ = 1;
  clear_has_num_groups();
}
inline ::google::protobuf::int32 LayerProto::num_groups() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.num_groups)
  return num_groups_;
}
inline void LayerProto::set_num_groups(::google::protobuf::int32 value) {
  set_has_num_groups();
  num_groups_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.num_groups)
}

// optional float alpha = 12;
inline bool LayerProto::has_alpha() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LayerProto::set_has_alpha() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LayerProto::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LayerProto::clear_alpha() {
  alpha_ = 0;
  clear_has_alpha();
}
inline float LayerProto::alpha() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.alpha)
  return alpha_;
}
inline void LayerProto::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.alpha)
}

// optional float beta = 13;
inline bool LayerProto::has_beta() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LayerProto::set_has_beta() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LayerProto::clear_has_beta() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LayerProto::clear_beta() {
  beta_ = 0;
  clear_has_beta();
}
inline float LayerProto::beta() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.beta)
  return beta_;
}
inline void LayerProto::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.beta)
}

// optional float knorm = 14 [default = 1];
inline bool LayerProto::has_knorm() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LayerProto::set_has_knorm() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LayerProto::clear_has_knorm() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LayerProto::clear_knorm() {
  knorm_ = 1;
  clear_has_knorm();
}
inline float LayerProto::knorm() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.knorm)
  return knorm_;
}
inline void LayerProto::set_knorm(float value) {
  set_has_knorm();
  knorm_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.knorm)
}

// optional .lapis.LayerProto.PoolingMethod pooling_method = 16;
inline bool LayerProto::has_pooling_method() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LayerProto::set_has_pooling_method() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LayerProto::clear_has_pooling_method() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LayerProto::clear_pooling_method() {
  pooling_method_ = 1;
  clear_has_pooling_method();
}
inline ::lapis::LayerProto_PoolingMethod LayerProto::pooling_method() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.pooling_method)
  return static_cast< ::lapis::LayerProto_PoolingMethod >(pooling_method_);
}
inline void LayerProto::set_pooling_method(::lapis::LayerProto_PoolingMethod value) {
  assert(::lapis::LayerProto_PoolingMethod_IsValid(value));
  set_has_pooling_method();
  pooling_method_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.pooling_method)
}

// optional int32 cropsize = 17;
inline bool LayerProto::has_cropsize() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LayerProto::set_has_cropsize() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LayerProto::clear_has_cropsize() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LayerProto::clear_cropsize() {
  cropsize_ = 0;
  clear_has_cropsize();
}
inline ::google::protobuf::int32 LayerProto::cropsize() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.cropsize)
  return cropsize_;
}
inline void LayerProto::set_cropsize(::google::protobuf::int32 value) {
  set_has_cropsize();
  cropsize_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.cropsize)
}

// optional bool mirror = 18;
inline bool LayerProto::has_mirror() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LayerProto::set_has_mirror() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LayerProto::clear_has_mirror() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LayerProto::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool LayerProto::mirror() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.mirror)
  return mirror_;
}
inline void LayerProto::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.mirror)
}

// optional float drop_prob = 19 [default = 0.5];
inline bool LayerProto::has_drop_prob() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LayerProto::set_has_drop_prob() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LayerProto::clear_has_drop_prob() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LayerProto::clear_drop_prob() {
  drop_prob_ = 0.5f;
  clear_has_drop_prob();
}
inline float LayerProto::drop_prob() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.drop_prob)
  return drop_prob_;
}
inline void LayerProto::set_drop_prob(float value) {
  set_has_drop_prob();
  drop_prob_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.drop_prob)
}

// optional .lapis.DAryProto data = 20;
inline bool LayerProto::has_data() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LayerProto::set_has_data() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LayerProto::clear_has_data() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LayerProto::clear_data() {
  if (data_ != NULL) data_->::lapis::DAryProto::Clear();
  clear_has_data();
}
inline const ::lapis::DAryProto& LayerProto::data() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::lapis::DAryProto* LayerProto::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::lapis::DAryProto;
  // @@protoc_insertion_point(field_mutable:lapis.LayerProto.data)
  return data_;
}
inline ::lapis::DAryProto* LayerProto::release_data() {
  clear_has_data();
  ::lapis::DAryProto* temp = data_;
  data_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_data(::lapis::DAryProto* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.LayerProto.data)
}

// optional .lapis.DAryProto grad = 21;
inline bool LayerProto::has_grad() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LayerProto::set_has_grad() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LayerProto::clear_has_grad() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LayerProto::clear_grad() {
  if (grad_ != NULL) grad_->::lapis::DAryProto::Clear();
  clear_has_grad();
}
inline const ::lapis::DAryProto& LayerProto::grad() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.grad)
  return grad_ != NULL ? *grad_ : *default_instance_->grad_;
}
inline ::lapis::DAryProto* LayerProto::mutable_grad() {
  set_has_grad();
  if (grad_ == NULL) grad_ = new ::lapis::DAryProto;
  // @@protoc_insertion_point(field_mutable:lapis.LayerProto.grad)
  return grad_;
}
inline ::lapis::DAryProto* LayerProto::release_grad() {
  clear_has_grad();
  ::lapis::DAryProto* temp = grad_;
  grad_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_grad(::lapis::DAryProto* grad) {
  delete grad_;
  grad_ = grad;
  if (grad) {
    set_has_grad();
  } else {
    clear_has_grad();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.LayerProto.grad)
}

// optional .lapis.DAryProto col_data = 22;
inline bool LayerProto::has_col_data() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LayerProto::set_has_col_data() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LayerProto::clear_has_col_data() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LayerProto::clear_col_data() {
  if (col_data_ != NULL) col_data_->::lapis::DAryProto::Clear();
  clear_has_col_data();
}
inline const ::lapis::DAryProto& LayerProto::col_data() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.col_data)
  return col_data_ != NULL ? *col_data_ : *default_instance_->col_data_;
}
inline ::lapis::DAryProto* LayerProto::mutable_col_data() {
  set_has_col_data();
  if (col_data_ == NULL) col_data_ = new ::lapis::DAryProto;
  // @@protoc_insertion_point(field_mutable:lapis.LayerProto.col_data)
  return col_data_;
}
inline ::lapis::DAryProto* LayerProto::release_col_data() {
  clear_has_col_data();
  ::lapis::DAryProto* temp = col_data_;
  col_data_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_col_data(::lapis::DAryProto* col_data) {
  delete col_data_;
  col_data_ = col_data;
  if (col_data) {
    set_has_col_data();
  } else {
    clear_has_col_data();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.LayerProto.col_data)
}

// optional .lapis.DAryProto split_data = 23;
inline bool LayerProto::has_split_data() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LayerProto::set_has_split_data() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LayerProto::clear_has_split_data() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LayerProto::clear_split_data() {
  if (split_data_ != NULL) split_data_->::lapis::DAryProto::Clear();
  clear_has_split_data();
}
inline const ::lapis::DAryProto& LayerProto::split_data() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.split_data)
  return split_data_ != NULL ? *split_data_ : *default_instance_->split_data_;
}
inline ::lapis::DAryProto* LayerProto::mutable_split_data() {
  set_has_split_data();
  if (split_data_ == NULL) split_data_ = new ::lapis::DAryProto;
  // @@protoc_insertion_point(field_mutable:lapis.LayerProto.split_data)
  return split_data_;
}
inline ::lapis::DAryProto* LayerProto::release_split_data() {
  clear_has_split_data();
  ::lapis::DAryProto* temp = split_data_;
  split_data_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_split_data(::lapis::DAryProto* split_data) {
  delete split_data_;
  split_data_ = split_data;
  if (split_data) {
    set_has_split_data();
  } else {
    clear_has_split_data();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.LayerProto.split_data)
}

// optional int32 split_size = 24;
inline bool LayerProto::has_split_size() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LayerProto::set_has_split_size() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LayerProto::clear_has_split_size() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LayerProto::clear_split_size() {
  split_size_ = 0;
  clear_has_split_size();
}
inline ::google::protobuf::int32 LayerProto::split_size() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.split_size)
  return split_size_;
}
inline void LayerProto::set_split_size(::google::protobuf::int32 value) {
  set_has_split_size();
  split_size_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.split_size)
}

// optional int32 split_dim = 25 [default = 1];
inline bool LayerProto::has_split_dim() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LayerProto::set_has_split_dim() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LayerProto::clear_has_split_dim() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LayerProto::clear_split_dim() {
  split_dim_ = 1;
  clear_has_split_dim();
}
inline ::google::protobuf::int32 LayerProto::split_dim() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.split_dim)
  return split_dim_;
}
inline void LayerProto::set_split_dim(::google::protobuf::int32 value) {
  set_has_split_dim();
  split_dim_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.split_dim)
}

// optional int32 concat_dim = 26 [default = 1];
inline bool LayerProto::has_concat_dim() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LayerProto::set_has_concat_dim() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LayerProto::clear_has_concat_dim() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LayerProto::clear_concat_dim() {
  concat_dim_ = 1;
  clear_has_concat_dim();
}
inline ::google::protobuf::int32 LayerProto::concat_dim() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.concat_dim)
  return concat_dim_;
}
inline void LayerProto::set_concat_dim(::google::protobuf::int32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.concat_dim)
}

// optional int32 topk = 27 [default = 5];
inline bool LayerProto::has_topk() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LayerProto::set_has_topk() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LayerProto::clear_has_topk() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LayerProto::clear_topk() {
  topk_ = 5;
  clear_has_topk();
}
inline ::google::protobuf::int32 LayerProto::topk() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.topk)
  return topk_;
}
inline void LayerProto::set_topk(::google::protobuf::int32 value) {
  set_has_topk();
  topk_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.topk)
}

// repeated string top = 28;
inline int LayerProto::top_size() const {
  return top_.size();
}
inline void LayerProto::clear_top() {
  top_.Clear();
}
inline const ::std::string& LayerProto::top(int index) const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.top)
  return top_.Get(index);
}
inline ::std::string* LayerProto::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:lapis.LayerProto.top)
  return top_.Mutable(index);
}
inline void LayerProto::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lapis.LayerProto.top)
  top_.Mutable(index)->assign(value);
}
inline void LayerProto::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.LayerProto.top)
}
inline void LayerProto::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.LayerProto.top)
}
inline ::std::string* LayerProto::add_top() {
  return top_.Add();
}
inline void LayerProto::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lapis.LayerProto.top)
}
inline void LayerProto::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lapis.LayerProto.top)
}
inline void LayerProto::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lapis.LayerProto.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerProto::top() const {
  // @@protoc_insertion_point(field_list:lapis.LayerProto.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerProto::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:lapis.LayerProto.top)
  return &top_;
}

// repeated string bottom = 29;
inline int LayerProto::bottom_size() const {
  return bottom_.size();
}
inline void LayerProto::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& LayerProto::bottom(int index) const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.bottom)
  return bottom_.Get(index);
}
inline ::std::string* LayerProto::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:lapis.LayerProto.bottom)
  return bottom_.Mutable(index);
}
inline void LayerProto::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lapis.LayerProto.bottom)
  bottom_.Mutable(index)->assign(value);
}
inline void LayerProto::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.LayerProto.bottom)
}
inline void LayerProto::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.LayerProto.bottom)
}
inline ::std::string* LayerProto::add_bottom() {
  return bottom_.Add();
}
inline void LayerProto::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lapis.LayerProto.bottom)
}
inline void LayerProto::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lapis.LayerProto.bottom)
}
inline void LayerProto::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lapis.LayerProto.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerProto::bottom() const {
  // @@protoc_insertion_point(field_list:lapis.LayerProto.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerProto::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:lapis.LayerProto.bottom)
  return &bottom_;
}

// -------------------------------------------------------------------

// EdgeProto

// optional bool directed = 1 [default = true];
inline bool EdgeProto::has_directed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EdgeProto::set_has_directed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EdgeProto::clear_has_directed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EdgeProto::clear_directed() {
  directed_ = true;
  clear_has_directed();
}
inline bool EdgeProto::directed() const {
  // @@protoc_insertion_point(field_get:lapis.EdgeProto.directed)
  return directed_;
}
inline void EdgeProto::set_directed(bool value) {
  set_has_directed();
  directed_ = value;
  // @@protoc_insertion_point(field_set:lapis.EdgeProto.directed)
}

// optional string layer1 = 2;
inline bool EdgeProto::has_layer1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EdgeProto::set_has_layer1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EdgeProto::clear_has_layer1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EdgeProto::clear_layer1() {
  if (layer1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer1_->clear();
  }
  clear_has_layer1();
}
inline const ::std::string& EdgeProto::layer1() const {
  // @@protoc_insertion_point(field_get:lapis.EdgeProto.layer1)
  return *layer1_;
}
inline void EdgeProto::set_layer1(const ::std::string& value) {
  set_has_layer1();
  if (layer1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer1_ = new ::std::string;
  }
  layer1_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.EdgeProto.layer1)
}
inline void EdgeProto::set_layer1(const char* value) {
  set_has_layer1();
  if (layer1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer1_ = new ::std::string;
  }
  layer1_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.EdgeProto.layer1)
}
inline void EdgeProto::set_layer1(const char* value, size_t size) {
  set_has_layer1();
  if (layer1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer1_ = new ::std::string;
  }
  layer1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.EdgeProto.layer1)
}
inline ::std::string* EdgeProto::mutable_layer1() {
  set_has_layer1();
  if (layer1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lapis.EdgeProto.layer1)
  return layer1_;
}
inline ::std::string* EdgeProto::release_layer1() {
  clear_has_layer1();
  if (layer1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layer1_;
    layer1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EdgeProto::set_allocated_layer1(::std::string* layer1) {
  if (layer1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer1_;
  }
  if (layer1) {
    set_has_layer1();
    layer1_ = layer1;
  } else {
    clear_has_layer1();
    layer1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.EdgeProto.layer1)
}

// optional string layer2 = 3;
inline bool EdgeProto::has_layer2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EdgeProto::set_has_layer2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EdgeProto::clear_has_layer2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EdgeProto::clear_layer2() {
  if (layer2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer2_->clear();
  }
  clear_has_layer2();
}
inline const ::std::string& EdgeProto::layer2() const {
  // @@protoc_insertion_point(field_get:lapis.EdgeProto.layer2)
  return *layer2_;
}
inline void EdgeProto::set_layer2(const ::std::string& value) {
  set_has_layer2();
  if (layer2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer2_ = new ::std::string;
  }
  layer2_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.EdgeProto.layer2)
}
inline void EdgeProto::set_layer2(const char* value) {
  set_has_layer2();
  if (layer2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer2_ = new ::std::string;
  }
  layer2_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.EdgeProto.layer2)
}
inline void EdgeProto::set_layer2(const char* value, size_t size) {
  set_has_layer2();
  if (layer2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer2_ = new ::std::string;
  }
  layer2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.EdgeProto.layer2)
}
inline ::std::string* EdgeProto::mutable_layer2() {
  set_has_layer2();
  if (layer2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lapis.EdgeProto.layer2)
  return layer2_;
}
inline ::std::string* EdgeProto::release_layer2() {
  clear_has_layer2();
  if (layer2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layer2_;
    layer2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EdgeProto::set_allocated_layer2(::std::string* layer2) {
  if (layer2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer2_;
  }
  if (layer2) {
    set_has_layer2();
    layer2_ = layer2;
  } else {
    clear_has_layer2();
    layer2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.EdgeProto.layer2)
}

// -------------------------------------------------------------------

// MeanProto

// optional int32 num = 1 [default = 0];
inline bool MeanProto::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeanProto::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MeanProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MeanProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 MeanProto::num() const {
  // @@protoc_insertion_point(field_get:lapis.MeanProto.num)
  return num_;
}
inline void MeanProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:lapis.MeanProto.num)
}

// optional int32 channels = 2 [default = 0];
inline bool MeanProto::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MeanProto::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MeanProto::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MeanProto::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 MeanProto::channels() const {
  // @@protoc_insertion_point(field_get:lapis.MeanProto.channels)
  return channels_;
}
inline void MeanProto::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:lapis.MeanProto.channels)
}

// optional int32 height = 3 [default = 0];
inline bool MeanProto::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MeanProto::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MeanProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MeanProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 MeanProto::height() const {
  // @@protoc_insertion_point(field_get:lapis.MeanProto.height)
  return height_;
}
inline void MeanProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:lapis.MeanProto.height)
}

// optional int32 width = 4 [default = 0];
inline bool MeanProto::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MeanProto::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MeanProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MeanProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 MeanProto::width() const {
  // @@protoc_insertion_point(field_get:lapis.MeanProto.width)
  return width_;
}
inline void MeanProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:lapis.MeanProto.width)
}

// repeated float data = 5 [packed = true];
inline int MeanProto::data_size() const {
  return data_.size();
}
inline void MeanProto::clear_data() {
  data_.Clear();
}
inline float MeanProto::data(int index) const {
  // @@protoc_insertion_point(field_get:lapis.MeanProto.data)
  return data_.Get(index);
}
inline void MeanProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:lapis.MeanProto.data)
}
inline void MeanProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:lapis.MeanProto.data)
}
inline const ::google::protobuf::RepeatedField< float >&
MeanProto::data() const {
  // @@protoc_insertion_point(field_list:lapis.MeanProto.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
MeanProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:lapis.MeanProto.data)
  return &data_;
}

// repeated float diff = 6 [packed = true];
inline int MeanProto::diff_size() const {
  return diff_.size();
}
inline void MeanProto::clear_diff() {
  diff_.Clear();
}
inline float MeanProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:lapis.MeanProto.diff)
  return diff_.Get(index);
}
inline void MeanProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:lapis.MeanProto.diff)
}
inline void MeanProto::add_diff(float value) {
  diff_.Add(value);
  // @@protoc_insertion_point(field_add:lapis.MeanProto.diff)
}
inline const ::google::protobuf::RepeatedField< float >&
MeanProto::diff() const {
  // @@protoc_insertion_point(field_list:lapis.MeanProto.diff)
  return diff_;
}
inline ::google::protobuf::RepeatedField< float >*
MeanProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:lapis.MeanProto.diff)
  return &diff_;
}

// -------------------------------------------------------------------

// DAryProto

// optional int32 partition_dim = 1;
inline bool DAryProto::has_partition_dim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DAryProto::set_has_partition_dim() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DAryProto::clear_has_partition_dim() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DAryProto::clear_partition_dim() {
  partition_dim_ = 0;
  clear_has_partition_dim();
}
inline ::google::protobuf::int32 DAryProto::partition_dim() const {
  // @@protoc_insertion_point(field_get:lapis.DAryProto.partition_dim)
  return partition_dim_;
}
inline void DAryProto::set_partition_dim(::google::protobuf::int32 value) {
  set_has_partition_dim();
  partition_dim_ = value;
  // @@protoc_insertion_point(field_set:lapis.DAryProto.partition_dim)
}

// repeated int32 shape = 2;
inline int DAryProto::shape_size() const {
  return shape_.size();
}
inline void DAryProto::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int32 DAryProto::shape(int index) const {
  // @@protoc_insertion_point(field_get:lapis.DAryProto.shape)
  return shape_.Get(index);
}
inline void DAryProto::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:lapis.DAryProto.shape)
}
inline void DAryProto::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:lapis.DAryProto.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DAryProto::shape() const {
  // @@protoc_insertion_point(field_list:lapis.DAryProto.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DAryProto::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:lapis.DAryProto.shape)
  return &shape_;
}

// repeated float value = 3 [packed = true];
inline int DAryProto::value_size() const {
  return value_.size();
}
inline void DAryProto::clear_value() {
  value_.Clear();
}
inline float DAryProto::value(int index) const {
  // @@protoc_insertion_point(field_get:lapis.DAryProto.value)
  return value_.Get(index);
}
inline void DAryProto::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:lapis.DAryProto.value)
}
inline void DAryProto::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:lapis.DAryProto.value)
}
inline const ::google::protobuf::RepeatedField< float >&
DAryProto::value() const {
  // @@protoc_insertion_point(field_list:lapis.DAryProto.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
DAryProto::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:lapis.DAryProto.value)
  return &value_;
}

// -------------------------------------------------------------------

// NetProto

// repeated .lapis.LayerProto layer = 2;
inline int NetProto::layer_size() const {
  return layer_.size();
}
inline void NetProto::clear_layer() {
  layer_.Clear();
}
inline const ::lapis::LayerProto& NetProto::layer(int index) const {
  // @@protoc_insertion_point(field_get:lapis.NetProto.layer)
  return layer_.Get(index);
}
inline ::lapis::LayerProto* NetProto::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:lapis.NetProto.layer)
  return layer_.Mutable(index);
}
inline ::lapis::LayerProto* NetProto::add_layer() {
  // @@protoc_insertion_point(field_add:lapis.NetProto.layer)
  return layer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lapis::LayerProto >&
NetProto::layer() const {
  // @@protoc_insertion_point(field_list:lapis.NetProto.layer)
  return layer_;
}
inline ::google::protobuf::RepeatedPtrField< ::lapis::LayerProto >*
NetProto::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:lapis.NetProto.layer)
  return &layer_;
}

// repeated .lapis.EdgeProto edge = 3;
inline int NetProto::edge_size() const {
  return edge_.size();
}
inline void NetProto::clear_edge() {
  edge_.Clear();
}
inline const ::lapis::EdgeProto& NetProto::edge(int index) const {
  // @@protoc_insertion_point(field_get:lapis.NetProto.edge)
  return edge_.Get(index);
}
inline ::lapis::EdgeProto* NetProto::mutable_edge(int index) {
  // @@protoc_insertion_point(field_mutable:lapis.NetProto.edge)
  return edge_.Mutable(index);
}
inline ::lapis::EdgeProto* NetProto::add_edge() {
  // @@protoc_insertion_point(field_add:lapis.NetProto.edge)
  return edge_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lapis::EdgeProto >&
NetProto::edge() const {
  // @@protoc_insertion_point(field_list:lapis.NetProto.edge)
  return edge_;
}
inline ::google::protobuf::RepeatedPtrField< ::lapis::EdgeProto >*
NetProto::mutable_edge() {
  // @@protoc_insertion_point(field_mutable_list:lapis.NetProto.edge)
  return &edge_;
}

// -------------------------------------------------------------------

// PerformanceProto

// optional float topk_precision = 1 [default = 0];
inline bool PerformanceProto::has_topk_precision() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerformanceProto::set_has_topk_precision() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PerformanceProto::clear_has_topk_precision() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PerformanceProto::clear_topk_precision() {
  topk_precision_ = 0;
  clear_has_topk_precision();
}
inline float PerformanceProto::topk_precision() const {
  // @@protoc_insertion_point(field_get:lapis.PerformanceProto.topk_precision)
  return topk_precision_;
}
inline void PerformanceProto::set_topk_precision(float value) {
  set_has_topk_precision();
  topk_precision_ = value;
  // @@protoc_insertion_point(field_set:lapis.PerformanceProto.topk_precision)
}

// optional float top_precision = 2 [default = 0];
inline bool PerformanceProto::has_top_precision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerformanceProto::set_has_top_precision() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PerformanceProto::clear_has_top_precision() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PerformanceProto::clear_top_precision() {
  top_precision_ = 0;
  clear_has_top_precision();
}
inline float PerformanceProto::top_precision() const {
  // @@protoc_insertion_point(field_get:lapis.PerformanceProto.top_precision)
  return top_precision_;
}
inline void PerformanceProto::set_top_precision(float value) {
  set_has_top_precision();
  top_precision_ = value;
  // @@protoc_insertion_point(field_set:lapis.PerformanceProto.top_precision)
}

// optional float loss = 3 [default = 0];
inline bool PerformanceProto::has_loss() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerformanceProto::set_has_loss() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PerformanceProto::clear_has_loss() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PerformanceProto::clear_loss() {
  loss_ = 0;
  clear_has_loss();
}
inline float PerformanceProto::loss() const {
  // @@protoc_insertion_point(field_get:lapis.PerformanceProto.loss)
  return loss_;
}
inline void PerformanceProto::set_loss(float value) {
  set_has_loss();
  loss_ = value;
  // @@protoc_insertion_point(field_set:lapis.PerformanceProto.loss)
}

// optional int32 count = 4 [default = 0];
inline bool PerformanceProto::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerformanceProto::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PerformanceProto::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PerformanceProto::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 PerformanceProto::count() const {
  // @@protoc_insertion_point(field_get:lapis.PerformanceProto.count)
  return count_;
}
inline void PerformanceProto::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:lapis.PerformanceProto.count)
}

// optional int32 step = 5 [default = 0];
inline bool PerformanceProto::has_step() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerformanceProto::set_has_step() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PerformanceProto::clear_has_step() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PerformanceProto::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::google::protobuf::int32 PerformanceProto::step() const {
  // @@protoc_insertion_point(field_get:lapis.PerformanceProto.step)
  return step_;
}
inline void PerformanceProto::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:lapis.PerformanceProto.step)
}

// -------------------------------------------------------------------

// SolverProto

// optional int32 step = 1 [default = 0];
inline bool SolverProto::has_step() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverProto::set_has_step() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverProto::clear_has_step() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverProto::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::google::protobuf::int32 SolverProto::step() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.step)
  return step_;
}
inline void SolverProto::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.step)
}

// optional int32 display_after_steps = 6 [default = 0];
inline bool SolverProto::has_display_after_steps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverProto::set_has_display_after_steps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverProto::clear_has_display_after_steps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverProto::clear_display_after_steps() {
  display_after_steps_ = 0;
  clear_has_display_after_steps();
}
inline ::google::protobuf::int32 SolverProto::display_after_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.display_after_steps)
  return display_after_steps_;
}
inline void SolverProto::set_display_after_steps(::google::protobuf::int32 value) {
  set_has_display_after_steps();
  display_after_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.display_after_steps)
}

// optional int32 display_every_steps = 7 [default = 0];
inline bool SolverProto::has_display_every_steps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolverProto::set_has_display_every_steps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolverProto::clear_has_display_every_steps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolverProto::clear_display_every_steps() {
  display_every_steps_ = 0;
  clear_has_display_every_steps();
}
inline ::google::protobuf::int32 SolverProto::display_every_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.display_every_steps)
  return display_every_steps_;
}
inline void SolverProto::set_display_every_steps(::google::protobuf::int32 value) {
  set_has_display_every_steps();
  display_every_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.display_every_steps)
}

// optional int32 validation_after_steps = 10 [default = 0];
inline bool SolverProto::has_validation_after_steps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolverProto::set_has_validation_after_steps() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolverProto::clear_has_validation_after_steps() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolverProto::clear_validation_after_steps() {
  validation_after_steps_ = 0;
  clear_has_validation_after_steps();
}
inline ::google::protobuf::int32 SolverProto::validation_after_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.validation_after_steps)
  return validation_after_steps_;
}
inline void SolverProto::set_validation_after_steps(::google::protobuf::int32 value) {
  set_has_validation_after_steps();
  validation_after_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.validation_after_steps)
}

// optional int32 validation_every_steps = 11 [default = 0];
inline bool SolverProto::has_validation_every_steps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SolverProto::set_has_validation_every_steps() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SolverProto::clear_has_validation_every_steps() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SolverProto::clear_validation_every_steps() {
  validation_every_steps_ = 0;
  clear_has_validation_every_steps();
}
inline ::google::protobuf::int32 SolverProto::validation_every_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.validation_every_steps)
  return validation_every_steps_;
}
inline void SolverProto::set_validation_every_steps(::google::protobuf::int32 value) {
  set_has_validation_every_steps();
  validation_every_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.validation_every_steps)
}

// optional int32 test_after_steps = 13 [default = 0];
inline bool SolverProto::has_test_after_steps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SolverProto::set_has_test_after_steps() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SolverProto::clear_has_test_after_steps() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SolverProto::clear_test_after_steps() {
  test_after_steps_ = 0;
  clear_has_test_after_steps();
}
inline ::google::protobuf::int32 SolverProto::test_after_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.test_after_steps)
  return test_after_steps_;
}
inline void SolverProto::set_test_after_steps(::google::protobuf::int32 value) {
  set_has_test_after_steps();
  test_after_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.test_after_steps)
}

// optional int32 test_every_steps = 14 [default = 0];
inline bool SolverProto::has_test_every_steps() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SolverProto::set_has_test_every_steps() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SolverProto::clear_has_test_every_steps() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SolverProto::clear_test_every_steps() {
  test_every_steps_ = 0;
  clear_has_test_every_steps();
}
inline ::google::protobuf::int32 SolverProto::test_every_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.test_every_steps)
  return test_every_steps_;
}
inline void SolverProto::set_test_every_steps(::google::protobuf::int32 value) {
  set_has_test_every_steps();
  test_every_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.test_every_steps)
}

// optional int32 batchsize = 19;
inline bool SolverProto::has_batchsize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SolverProto::set_has_batchsize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SolverProto::clear_has_batchsize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SolverProto::clear_batchsize() {
  batchsize_ = 0;
  clear_has_batchsize();
}
inline ::google::protobuf::int32 SolverProto::batchsize() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.batchsize)
  return batchsize_;
}
inline void SolverProto::set_batchsize(::google::protobuf::int32 value) {
  set_has_batchsize();
  batchsize_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.batchsize)
}

// optional int32 train_steps = 20;
inline bool SolverProto::has_train_steps() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SolverProto::set_has_train_steps() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SolverProto::clear_has_train_steps() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SolverProto::clear_train_steps() {
  train_steps_ = 0;
  clear_has_train_steps();
}
inline ::google::protobuf::int32 SolverProto::train_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.train_steps)
  return train_steps_;
}
inline void SolverProto::set_train_steps(::google::protobuf::int32 value) {
  set_has_train_steps();
  train_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.train_steps)
}

// optional int32 validation_steps = 21;
inline bool SolverProto::has_validation_steps() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SolverProto::set_has_validation_steps() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SolverProto::clear_has_validation_steps() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SolverProto::clear_validation_steps() {
  validation_steps_ = 0;
  clear_has_validation_steps();
}
inline ::google::protobuf::int32 SolverProto::validation_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.validation_steps)
  return validation_steps_;
}
inline void SolverProto::set_validation_steps(::google::protobuf::int32 value) {
  set_has_validation_steps();
  validation_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.validation_steps)
}

// optional int32 test_steps = 22;
inline bool SolverProto::has_test_steps() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SolverProto::set_has_test_steps() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SolverProto::clear_has_test_steps() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SolverProto::clear_test_steps() {
  test_steps_ = 0;
  clear_has_test_steps();
}
inline ::google::protobuf::int32 SolverProto::test_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.test_steps)
  return test_steps_;
}
inline void SolverProto::set_test_steps(::google::protobuf::int32 value) {
  set_has_test_steps();
  test_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.test_steps)
}

// optional int32 max_splits = 23 [default = 3571];
inline bool SolverProto::has_max_splits() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SolverProto::set_has_max_splits() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SolverProto::clear_has_max_splits() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SolverProto::clear_max_splits() {
  max_splits_ = 3571;
  clear_has_max_splits();
}
inline ::google::protobuf::int32 SolverProto::max_splits() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.max_splits)
  return max_splits_;
}
inline void SolverProto::set_max_splits(::google::protobuf::int32 value) {
  set_has_max_splits();
  max_splits_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.max_splits)
}

// optional .lapis.SGDProto sgd = 24;
inline bool SolverProto::has_sgd() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SolverProto::set_has_sgd() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SolverProto::clear_has_sgd() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SolverProto::clear_sgd() {
  if (sgd_ != NULL) sgd_->::lapis::SGDProto::Clear();
  clear_has_sgd();
}
inline const ::lapis::SGDProto& SolverProto::sgd() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.sgd)
  return sgd_ != NULL ? *sgd_ : *default_instance_->sgd_;
}
inline ::lapis::SGDProto* SolverProto::mutable_sgd() {
  set_has_sgd();
  if (sgd_ == NULL) sgd_ = new ::lapis::SGDProto;
  // @@protoc_insertion_point(field_mutable:lapis.SolverProto.sgd)
  return sgd_;
}
inline ::lapis::SGDProto* SolverProto::release_sgd() {
  clear_has_sgd();
  ::lapis::SGDProto* temp = sgd_;
  sgd_ = NULL;
  return temp;
}
inline void SolverProto::set_allocated_sgd(::lapis::SGDProto* sgd) {
  delete sgd_;
  sgd_ = sgd;
  if (sgd) {
    set_has_sgd();
  } else {
    clear_has_sgd();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.SolverProto.sgd)
}

// optional .lapis.SolverProto.GradCalcAlg alg = 26 [default = kBackPropagation];
inline bool SolverProto::has_alg() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SolverProto::set_has_alg() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SolverProto::clear_has_alg() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SolverProto::clear_alg() {
  alg_ = 1;
  clear_has_alg();
}
inline ::lapis::SolverProto_GradCalcAlg SolverProto::alg() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.alg)
  return static_cast< ::lapis::SolverProto_GradCalcAlg >(alg_);
}
inline void SolverProto::set_alg(::lapis::SolverProto_GradCalcAlg value) {
  assert(::lapis::SolverProto_GradCalcAlg_IsValid(value));
  set_has_alg();
  alg_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.alg)
}

// optional .lapis.SolverProto.Partition partition = 27;
inline bool SolverProto::has_partition() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SolverProto::set_has_partition() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SolverProto::clear_has_partition() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SolverProto::clear_partition() {
  partition_ = 1;
  clear_has_partition();
}
inline ::lapis::SolverProto_Partition SolverProto::partition() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.partition)
  return static_cast< ::lapis::SolverProto_Partition >(partition_);
}
inline void SolverProto::set_partition(::lapis::SolverProto_Partition value) {
  assert(::lapis::SolverProto_Partition_IsValid(value));
  set_has_partition();
  partition_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.partition)
}

// -------------------------------------------------------------------

// Model

// optional string name = 1;
inline bool Model::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Model::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Model::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Model::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Model::name() const {
  // @@protoc_insertion_point(field_get:lapis.Model.name)
  return *name_;
}
inline void Model::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.Model.name)
}
inline void Model::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.Model.name)
}
inline void Model::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.Model.name)
}
inline ::std::string* Model::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lapis.Model.name)
  return name_;
}
inline ::std::string* Model::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Model::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.Model.name)
}

// optional .lapis.NetProto net = 2;
inline bool Model::has_net() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Model::set_has_net() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Model::clear_has_net() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Model::clear_net() {
  if (net_ != NULL) net_->::lapis::NetProto::Clear();
  clear_has_net();
}
inline const ::lapis::NetProto& Model::net() const {
  // @@protoc_insertion_point(field_get:lapis.Model.net)
  return net_ != NULL ? *net_ : *default_instance_->net_;
}
inline ::lapis::NetProto* Model::mutable_net() {
  set_has_net();
  if (net_ == NULL) net_ = new ::lapis::NetProto;
  // @@protoc_insertion_point(field_mutable:lapis.Model.net)
  return net_;
}
inline ::lapis::NetProto* Model::release_net() {
  clear_has_net();
  ::lapis::NetProto* temp = net_;
  net_ = NULL;
  return temp;
}
inline void Model::set_allocated_net(::lapis::NetProto* net) {
  delete net_;
  net_ = net;
  if (net) {
    set_has_net();
  } else {
    clear_has_net();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.Model.net)
}

// optional .lapis.SolverProto solver = 3;
inline bool Model::has_solver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Model::set_has_solver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Model::clear_has_solver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Model::clear_solver() {
  if (solver_ != NULL) solver_->::lapis::SolverProto::Clear();
  clear_has_solver();
}
inline const ::lapis::SolverProto& Model::solver() const {
  // @@protoc_insertion_point(field_get:lapis.Model.solver)
  return solver_ != NULL ? *solver_ : *default_instance_->solver_;
}
inline ::lapis::SolverProto* Model::mutable_solver() {
  set_has_solver();
  if (solver_ == NULL) solver_ = new ::lapis::SolverProto;
  // @@protoc_insertion_point(field_mutable:lapis.Model.solver)
  return solver_;
}
inline ::lapis::SolverProto* Model::release_solver() {
  clear_has_solver();
  ::lapis::SolverProto* temp = solver_;
  solver_ = NULL;
  return temp;
}
inline void Model::set_allocated_solver(::lapis::SolverProto* solver) {
  delete solver_;
  solver_ = solver;
  if (solver) {
    set_has_solver();
  } else {
    clear_has_solver();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.Model.solver)
}

// -------------------------------------------------------------------

// Record

// optional .lapis.DAryProto image = 1;
inline bool Record::has_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Record::set_has_image() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Record::clear_has_image() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Record::clear_image() {
  if (image_ != NULL) image_->::lapis::DAryProto::Clear();
  clear_has_image();
}
inline const ::lapis::DAryProto& Record::image() const {
  // @@protoc_insertion_point(field_get:lapis.Record.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::lapis::DAryProto* Record::mutable_image() {
  set_has_image();
  if (image_ == NULL) image_ = new ::lapis::DAryProto;
  // @@protoc_insertion_point(field_mutable:lapis.Record.image)
  return image_;
}
inline ::lapis::DAryProto* Record::release_image() {
  clear_has_image();
  ::lapis::DAryProto* temp = image_;
  image_ = NULL;
  return temp;
}
inline void Record::set_allocated_image(::lapis::DAryProto* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.Record.image)
}

// optional int32 label = 2;
inline bool Record::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Record::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Record::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Record::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 Record::label() const {
  // @@protoc_insertion_point(field_get:lapis.Record.label)
  return label_;
}
inline void Record::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:lapis.Record.label)
}

// optional string id = 3;
inline bool Record::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Record::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Record::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Record::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Record::id() const {
  // @@protoc_insertion_point(field_get:lapis.Record.id)
  return *id_;
}
inline void Record::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.Record.id)
}
inline void Record::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.Record.id)
}
inline void Record::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.Record.id)
}
inline ::std::string* Record::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lapis.Record.id)
  return id_;
}
inline ::std::string* Record::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Record::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.Record.id)
}

// -------------------------------------------------------------------

// SGDProto

// optional float learning_rate = 1;
inline bool SGDProto::has_learning_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SGDProto::set_has_learning_rate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SGDProto::clear_has_learning_rate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SGDProto::clear_learning_rate() {
  learning_rate_ = 0;
  clear_has_learning_rate();
}
inline float SGDProto::learning_rate() const {
  // @@protoc_insertion_point(field_get:lapis.SGDProto.learning_rate)
  return learning_rate_;
}
inline void SGDProto::set_learning_rate(float value) {
  set_has_learning_rate();
  learning_rate_ = value;
  // @@protoc_insertion_point(field_set:lapis.SGDProto.learning_rate)
}

// optional float momentum = 2;
inline bool SGDProto::has_momentum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SGDProto::set_has_momentum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SGDProto::clear_has_momentum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SGDProto::clear_momentum() {
  momentum_ = 0;
  clear_has_momentum();
}
inline float SGDProto::momentum() const {
  // @@protoc_insertion_point(field_get:lapis.SGDProto.momentum)
  return momentum_;
}
inline void SGDProto::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:lapis.SGDProto.momentum)
}

// optional float weight_decay = 3;
inline bool SGDProto::has_weight_decay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SGDProto::set_has_weight_decay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SGDProto::clear_has_weight_decay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SGDProto::clear_weight_decay() {
  weight_decay_ = 0;
  clear_has_weight_decay();
}
inline float SGDProto::weight_decay() const {
  // @@protoc_insertion_point(field_get:lapis.SGDProto.weight_decay)
  return weight_decay_;
}
inline void SGDProto::set_weight_decay(float value) {
  set_has_weight_decay();
  weight_decay_ = value;
  // @@protoc_insertion_point(field_set:lapis.SGDProto.weight_decay)
}

// optional float gamma = 4;
inline bool SGDProto::has_gamma() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SGDProto::set_has_gamma() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SGDProto::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SGDProto::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline float SGDProto::gamma() const {
  // @@protoc_insertion_point(field_get:lapis.SGDProto.gamma)
  return gamma_;
}
inline void SGDProto::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:lapis.SGDProto.gamma)
}

// optional int32 learning_rate_change_steps = 5;
inline bool SGDProto::has_learning_rate_change_steps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SGDProto::set_has_learning_rate_change_steps() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SGDProto::clear_has_learning_rate_change_steps() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SGDProto::clear_learning_rate_change_steps() {
  learning_rate_change_steps_ = 0;
  clear_has_learning_rate_change_steps();
}
inline ::google::protobuf::int32 SGDProto::learning_rate_change_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SGDProto.learning_rate_change_steps)
  return learning_rate_change_steps_;
}
inline void SGDProto::set_learning_rate_change_steps(::google::protobuf::int32 value) {
  set_has_learning_rate_change_steps();
  learning_rate_change_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SGDProto.learning_rate_change_steps)
}

// optional .lapis.SGDProto.ChangeProto learning_rate_change = 6 [default = kInverse_t];
inline bool SGDProto::has_learning_rate_change() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SGDProto::set_has_learning_rate_change() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SGDProto::clear_has_learning_rate_change() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SGDProto::clear_learning_rate_change() {
  learning_rate_change_ = 1;
  clear_has_learning_rate_change();
}
inline ::lapis::SGDProto_ChangeProto SGDProto::learning_rate_change() const {
  // @@protoc_insertion_point(field_get:lapis.SGDProto.learning_rate_change)
  return static_cast< ::lapis::SGDProto_ChangeProto >(learning_rate_change_);
}
inline void SGDProto::set_learning_rate_change(::lapis::SGDProto_ChangeProto value) {
  assert(::lapis::SGDProto_ChangeProto_IsValid(value));
  set_has_learning_rate_change();
  learning_rate_change_ = value;
  // @@protoc_insertion_point(field_set:lapis.SGDProto.learning_rate_change)
}

// optional bool synchronous = 7 [default = false];
inline bool SGDProto::has_synchronous() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SGDProto::set_has_synchronous() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SGDProto::clear_has_synchronous() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SGDProto::clear_synchronous() {
  synchronous_ = false;
  clear_has_synchronous();
}
inline bool SGDProto::synchronous() const {
  // @@protoc_insertion_point(field_get:lapis.SGDProto.synchronous)
  return synchronous_;
}
inline void SGDProto::set_synchronous(bool value) {
  set_has_synchronous();
  synchronous_ = value;
  // @@protoc_insertion_point(field_set:lapis.SGDProto.synchronous)
}

// optional string handler = 8 [default = "SGDHandler"];
inline bool SGDProto::has_handler() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SGDProto::set_has_handler() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SGDProto::clear_has_handler() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SGDProto::clear_handler() {
  if (handler_ != _default_handler_) {
    handler_->assign(*_default_handler_);
  }
  clear_has_handler();
}
inline const ::std::string& SGDProto::handler() const {
  // @@protoc_insertion_point(field_get:lapis.SGDProto.handler)
  return *handler_;
}
inline void SGDProto::set_handler(const ::std::string& value) {
  set_has_handler();
  if (handler_ == _default_handler_) {
    handler_ = new ::std::string;
  }
  handler_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.SGDProto.handler)
}
inline void SGDProto::set_handler(const char* value) {
  set_has_handler();
  if (handler_ == _default_handler_) {
    handler_ = new ::std::string;
  }
  handler_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.SGDProto.handler)
}
inline void SGDProto::set_handler(const char* value, size_t size) {
  set_has_handler();
  if (handler_ == _default_handler_) {
    handler_ = new ::std::string;
  }
  handler_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.SGDProto.handler)
}
inline ::std::string* SGDProto::mutable_handler() {
  set_has_handler();
  if (handler_ == _default_handler_) {
    handler_ = new ::std::string(*_default_handler_);
  }
  // @@protoc_insertion_point(field_mutable:lapis.SGDProto.handler)
  return handler_;
}
inline ::std::string* SGDProto::release_handler() {
  clear_has_handler();
  if (handler_ == _default_handler_) {
    return NULL;
  } else {
    ::std::string* temp = handler_;
    handler_ = const_cast< ::std::string*>(_default_handler_);
    return temp;
  }
}
inline void SGDProto::set_allocated_handler(::std::string* handler) {
  if (handler_ != _default_handler_) {
    delete handler_;
  }
  if (handler) {
    set_has_handler();
    handler_ = handler;
  } else {
    clear_has_handler();
    handler_ = const_cast< ::std::string*>(_default_handler_);
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.SGDProto.handler)
}

// optional int32 checkpoint_after_steps = 9 [default = 0];
inline bool SGDProto::has_checkpoint_after_steps() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SGDProto::set_has_checkpoint_after_steps() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SGDProto::clear_has_checkpoint_after_steps() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SGDProto::clear_checkpoint_after_steps() {
  checkpoint_after_steps_ = 0;
  clear_has_checkpoint_after_steps();
}
inline ::google::protobuf::int32 SGDProto::checkpoint_after_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SGDProto.checkpoint_after_steps)
  return checkpoint_after_steps_;
}
inline void SGDProto::set_checkpoint_after_steps(::google::protobuf::int32 value) {
  set_has_checkpoint_after_steps();
  checkpoint_after_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SGDProto.checkpoint_after_steps)
}

// optional int32 checkpoint_every_steps = 10 [default = 0];
inline bool SGDProto::has_checkpoint_every_steps() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SGDProto::set_has_checkpoint_every_steps() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SGDProto::clear_has_checkpoint_every_steps() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SGDProto::clear_checkpoint_every_steps() {
  checkpoint_every_steps_ = 0;
  clear_has_checkpoint_every_steps();
}
inline ::google::protobuf::int32 SGDProto::checkpoint_every_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SGDProto.checkpoint_every_steps)
  return checkpoint_every_steps_;
}
inline void SGDProto::set_checkpoint_every_steps(::google::protobuf::int32 value) {
  set_has_checkpoint_every_steps();
  checkpoint_every_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SGDProto.checkpoint_every_steps)
}

// -------------------------------------------------------------------

// TKey

// optional int32 id = 1;
inline bool TKey::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TKey::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TKey::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TKey::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TKey::id() const {
  // @@protoc_insertion_point(field_get:lapis.TKey.id)
  return id_;
}
inline void TKey::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:lapis.TKey.id)
}

// optional int32 version = 2;
inline bool TKey::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TKey::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TKey::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TKey::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 TKey::version() const {
  // @@protoc_insertion_point(field_get:lapis.TKey.version)
  return version_;
}
inline void TKey::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:lapis.TKey.version)
}

// optional int32 rank = 3;
inline bool TKey::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TKey::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TKey::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TKey::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 TKey::rank() const {
  // @@protoc_insertion_point(field_get:lapis.TKey.rank)
  return rank_;
}
inline void TKey::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:lapis.TKey.rank)
}

// -------------------------------------------------------------------

// TVal

// optional string type = 1;
inline bool TVal::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TVal::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TVal::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TVal::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& TVal::type() const {
  // @@protoc_insertion_point(field_get:lapis.TVal.type)
  return *type_;
}
inline void TVal::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.TVal.type)
}
inline void TVal::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.TVal.type)
}
inline void TVal::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.TVal.type)
}
inline ::std::string* TVal::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lapis.TVal.type)
  return type_;
}
inline ::std::string* TVal::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TVal::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.TVal.type)
}

// optional int32 num_aggregate = 4;
inline bool TVal::has_num_aggregate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TVal::set_has_num_aggregate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TVal::clear_has_num_aggregate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TVal::clear_num_aggregate() {
  num_aggregate_ = 0;
  clear_has_num_aggregate();
}
inline ::google::protobuf::int32 TVal::num_aggregate() const {
  // @@protoc_insertion_point(field_get:lapis.TVal.num_aggregate)
  return num_aggregate_;
}
inline void TVal::set_num_aggregate(::google::protobuf::int32 value) {
  set_has_num_aggregate();
  num_aggregate_ = value;
  // @@protoc_insertion_point(field_set:lapis.TVal.num_aggregate)
}

// optional int32 version = 5;
inline bool TVal::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TVal::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TVal::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TVal::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 TVal::version() const {
  // @@protoc_insertion_point(field_get:lapis.TVal.version)
  return version_;
}
inline void TVal::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:lapis.TVal.version)
}

// optional int32 rank = 6;
inline bool TVal::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TVal::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TVal::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TVal::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 TVal::rank() const {
  // @@protoc_insertion_point(field_get:lapis.TVal.rank)
  return rank_;
}
inline void TVal::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:lapis.TVal.rank)
}

// optional int32 param_id = 7;
inline bool TVal::has_param_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TVal::set_has_param_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TVal::clear_has_param_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TVal::clear_param_id() {
  param_id_ = 0;
  clear_has_param_id();
}
inline ::google::protobuf::int32 TVal::param_id() const {
  // @@protoc_insertion_point(field_get:lapis.TVal.param_id)
  return param_id_;
}
inline void TVal::set_param_id(::google::protobuf::int32 value) {
  set_has_param_id();
  param_id_ = value;
  // @@protoc_insertion_point(field_set:lapis.TVal.param_id)
}

// optional int32 split_id = 8;
inline bool TVal::has_split_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TVal::set_has_split_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TVal::clear_has_split_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TVal::clear_split_id() {
  split_id_ = 0;
  clear_has_split_id();
}
inline ::google::protobuf::int32 TVal::split_id() const {
  // @@protoc_insertion_point(field_get:lapis.TVal.split_id)
  return split_id_;
}
inline void TVal::set_split_id(::google::protobuf::int32 value) {
  set_has_split_id();
  split_id_ = value;
  // @@protoc_insertion_point(field_set:lapis.TVal.split_id)
}

// optional int32 split_offset = 9;
inline bool TVal::has_split_offset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TVal::set_has_split_offset() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TVal::clear_has_split_offset() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TVal::clear_split_offset() {
  split_offset_ = 0;
  clear_has_split_offset();
}
inline ::google::protobuf::int32 TVal::split_offset() const {
  // @@protoc_insertion_point(field_get:lapis.TVal.split_offset)
  return split_offset_;
}
inline void TVal::set_split_offset(::google::protobuf::int32 value) {
  set_has_split_offset();
  split_offset_ = value;
  // @@protoc_insertion_point(field_set:lapis.TVal.split_offset)
}

// optional float learning_rate_multiplier = 10 [default = 1];
inline bool TVal::has_learning_rate_multiplier() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TVal::set_has_learning_rate_multiplier() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TVal::clear_has_learning_rate_multiplier() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TVal::clear_learning_rate_multiplier() {
  learning_rate_multiplier_ = 1;
  clear_has_learning_rate_multiplier();
}
inline float TVal::learning_rate_multiplier() const {
  // @@protoc_insertion_point(field_get:lapis.TVal.learning_rate_multiplier)
  return learning_rate_multiplier_;
}
inline void TVal::set_learning_rate_multiplier(float value) {
  set_has_learning_rate_multiplier();
  learning_rate_multiplier_ = value;
  // @@protoc_insertion_point(field_set:lapis.TVal.learning_rate_multiplier)
}

// optional float weight_decay_multiplier = 11 [default = 1];
inline bool TVal::has_weight_decay_multiplier() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TVal::set_has_weight_decay_multiplier() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TVal::clear_has_weight_decay_multiplier() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TVal::clear_weight_decay_multiplier() {
  weight_decay_multiplier_ = 1;
  clear_has_weight_decay_multiplier();
}
inline float TVal::weight_decay_multiplier() const {
  // @@protoc_insertion_point(field_get:lapis.TVal.weight_decay_multiplier)
  return weight_decay_multiplier_;
}
inline void TVal::set_weight_decay_multiplier(float value) {
  set_has_weight_decay_multiplier();
  weight_decay_multiplier_ = value;
  // @@protoc_insertion_point(field_set:lapis.TVal.weight_decay_multiplier)
}

// optional .lapis.DAryProto data = 12;
inline bool TVal::has_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TVal::set_has_data() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TVal::clear_has_data() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TVal::clear_data() {
  if (data_ != NULL) data_->::lapis::DAryProto::Clear();
  clear_has_data();
}
inline const ::lapis::DAryProto& TVal::data() const {
  // @@protoc_insertion_point(field_get:lapis.TVal.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::lapis::DAryProto* TVal::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::lapis::DAryProto;
  // @@protoc_insertion_point(field_mutable:lapis.TVal.data)
  return data_;
}
inline ::lapis::DAryProto* TVal::release_data() {
  clear_has_data();
  ::lapis::DAryProto* temp = data_;
  data_ = NULL;
  return temp;
}
inline void TVal::set_allocated_data(::lapis::DAryProto* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.TVal.data)
}

// optional .lapis.DAryProto grad = 13;
inline bool TVal::has_grad() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TVal::set_has_grad() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TVal::clear_has_grad() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TVal::clear_grad() {
  if (grad_ != NULL) grad_->::lapis::DAryProto::Clear();
  clear_has_grad();
}
inline const ::lapis::DAryProto& TVal::grad() const {
  // @@protoc_insertion_point(field_get:lapis.TVal.grad)
  return grad_ != NULL ? *grad_ : *default_instance_->grad_;
}
inline ::lapis::DAryProto* TVal::mutable_grad() {
  set_has_grad();
  if (grad_ == NULL) grad_ = new ::lapis::DAryProto;
  // @@protoc_insertion_point(field_mutable:lapis.TVal.grad)
  return grad_;
}
inline ::lapis::DAryProto* TVal::release_grad() {
  clear_has_grad();
  ::lapis::DAryProto* temp = grad_;
  grad_ = NULL;
  return temp;
}
inline void TVal::set_allocated_grad(::lapis::DAryProto* grad) {
  delete grad_;
  grad_ = grad;
  if (grad) {
    set_has_grad();
  } else {
    clear_has_grad();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.TVal.grad)
}

// optional .lapis.DAryProto history = 14;
inline bool TVal::has_history() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TVal::set_has_history() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TVal::clear_has_history() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TVal::clear_history() {
  if (history_ != NULL) history_->::lapis::DAryProto::Clear();
  clear_has_history();
}
inline const ::lapis::DAryProto& TVal::history() const {
  // @@protoc_insertion_point(field_get:lapis.TVal.history)
  return history_ != NULL ? *history_ : *default_instance_->history_;
}
inline ::lapis::DAryProto* TVal::mutable_history() {
  set_has_history();
  if (history_ == NULL) history_ = new ::lapis::DAryProto;
  // @@protoc_insertion_point(field_mutable:lapis.TVal.history)
  return history_;
}
inline ::lapis::DAryProto* TVal::release_history() {
  clear_has_history();
  ::lapis::DAryProto* temp = history_;
  history_ = NULL;
  return temp;
}
inline void TVal::set_allocated_history(::lapis::DAryProto* history) {
  delete history_;
  history_ = history;
  if (history) {
    set_has_history();
  } else {
    clear_has_history();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.TVal.history)
}

// -------------------------------------------------------------------

// Tuple

// optional .lapis.TKey key = 1;
inline bool Tuple::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tuple::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tuple::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tuple::clear_key() {
  if (key_ != NULL) key_->::lapis::TKey::Clear();
  clear_has_key();
}
inline const ::lapis::TKey& Tuple::key() const {
  // @@protoc_insertion_point(field_get:lapis.Tuple.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::lapis::TKey* Tuple::mutable_key() {
  set_has_key();
  if (key_ == NULL) key_ = new ::lapis::TKey;
  // @@protoc_insertion_point(field_mutable:lapis.Tuple.key)
  return key_;
}
inline ::lapis::TKey* Tuple::release_key() {
  clear_has_key();
  ::lapis::TKey* temp = key_;
  key_ = NULL;
  return temp;
}
inline void Tuple::set_allocated_key(::lapis::TKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.Tuple.key)
}

// optional .lapis.TVal val = 2;
inline bool Tuple::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tuple::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tuple::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tuple::clear_val() {
  if (val_ != NULL) val_->::lapis::TVal::Clear();
  clear_has_val();
}
inline const ::lapis::TVal& Tuple::val() const {
  // @@protoc_insertion_point(field_get:lapis.Tuple.val)
  return val_ != NULL ? *val_ : *default_instance_->val_;
}
inline ::lapis::TVal* Tuple::mutable_val() {
  set_has_val();
  if (val_ == NULL) val_ = new ::lapis::TVal;
  // @@protoc_insertion_point(field_mutable:lapis.Tuple.val)
  return val_;
}
inline ::lapis::TVal* Tuple::release_val() {
  clear_has_val();
  ::lapis::TVal* temp = val_;
  val_ = NULL;
  return temp;
}
inline void Tuple::set_allocated_val(::lapis::TVal* val) {
  delete val_;
  val_ = val;
  if (val) {
    set_has_val();
  } else {
    clear_has_val();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.Tuple.val)
}

// -------------------------------------------------------------------

// SGDVal

// -------------------------------------------------------------------

// AdaVal


// @@protoc_insertion_point(namespace_scope)

}  // namespace lapis

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::lapis::ParamProto_InitMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lapis::ParamProto_InitMethod>() {
  return ::lapis::ParamProto_InitMethod_descriptor();
}
template <> struct is_proto_enum< ::lapis::LayerProto_PoolingMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lapis::LayerProto_PoolingMethod>() {
  return ::lapis::LayerProto_PoolingMethod_descriptor();
}
template <> struct is_proto_enum< ::lapis::SolverProto_GradCalcAlg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lapis::SolverProto_GradCalcAlg>() {
  return ::lapis::SolverProto_GradCalcAlg_descriptor();
}
template <> struct is_proto_enum< ::lapis::SolverProto_Partition> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lapis::SolverProto_Partition>() {
  return ::lapis::SolverProto_Partition_descriptor();
}
template <> struct is_proto_enum< ::lapis::SGDProto_ChangeProto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lapis::SGDProto_ChangeProto>() {
  return ::lapis::SGDProto_ChangeProto_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_model_2eproto__INCLUDED
