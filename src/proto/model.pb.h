// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#ifndef PROTOBUF_model_2eproto__INCLUDED
#define PROTOBUF_model_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace lapis {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_model_2eproto();
void protobuf_AssignDesc_model_2eproto();
void protobuf_ShutdownFile_model_2eproto();

class DataSourceProto;
class DataSourceProto_Shape;
class ParamProto;
class LayerProto;
class MeanProto;
class DAryProto;
class NetProto;
class PerformanceProto;
class SolverProto;
class DataProto;
class ModelProto;
class Record;
class AdaGradValue;
class SGDValue;

enum ParamProto_InitMethod {
  ParamProto_InitMethod_kConstant = 0,
  ParamProto_InitMethod_kGaussain = 1,
  ParamProto_InitMethod_kUniform = 2,
  ParamProto_InitMethod_kPretrained = 3,
  ParamProto_InitMethod_kGaussainSqrtFanIn = 4,
  ParamProto_InitMethod_kUniformSqrtFanIn = 5,
  ParamProto_InitMethod_kUniformSqrtFanInOut = 6
};
bool ParamProto_InitMethod_IsValid(int value);
const ParamProto_InitMethod ParamProto_InitMethod_InitMethod_MIN = ParamProto_InitMethod_kConstant;
const ParamProto_InitMethod ParamProto_InitMethod_InitMethod_MAX = ParamProto_InitMethod_kUniformSqrtFanInOut;
const int ParamProto_InitMethod_InitMethod_ARRAYSIZE = ParamProto_InitMethod_InitMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParamProto_InitMethod_descriptor();
inline const ::std::string& ParamProto_InitMethod_Name(ParamProto_InitMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParamProto_InitMethod_descriptor(), value);
}
inline bool ParamProto_InitMethod_Parse(
    const ::std::string& name, ParamProto_InitMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParamProto_InitMethod>(
    ParamProto_InitMethod_descriptor(), name, value);
}
enum LayerProto_PoolingMethod {
  LayerProto_PoolingMethod_kMaxPooling = 1,
  LayerProto_PoolingMethod_kAvgPooling = 2
};
bool LayerProto_PoolingMethod_IsValid(int value);
const LayerProto_PoolingMethod LayerProto_PoolingMethod_PoolingMethod_MIN = LayerProto_PoolingMethod_kMaxPooling;
const LayerProto_PoolingMethod LayerProto_PoolingMethod_PoolingMethod_MAX = LayerProto_PoolingMethod_kAvgPooling;
const int LayerProto_PoolingMethod_PoolingMethod_ARRAYSIZE = LayerProto_PoolingMethod_PoolingMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* LayerProto_PoolingMethod_descriptor();
inline const ::std::string& LayerProto_PoolingMethod_Name(LayerProto_PoolingMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    LayerProto_PoolingMethod_descriptor(), value);
}
inline bool LayerProto_PoolingMethod_Parse(
    const ::std::string& name, LayerProto_PoolingMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LayerProto_PoolingMethod>(
    LayerProto_PoolingMethod_descriptor(), name, value);
}
enum SolverProto_Method {
  SolverProto_Method_kSGD = 1,
  SolverProto_Method_kAdaGrad = 2
};
bool SolverProto_Method_IsValid(int value);
const SolverProto_Method SolverProto_Method_Method_MIN = SolverProto_Method_kSGD;
const SolverProto_Method SolverProto_Method_Method_MAX = SolverProto_Method_kAdaGrad;
const int SolverProto_Method_Method_ARRAYSIZE = SolverProto_Method_Method_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverProto_Method_descriptor();
inline const ::std::string& SolverProto_Method_Name(SolverProto_Method value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverProto_Method_descriptor(), value);
}
inline bool SolverProto_Method_Parse(
    const ::std::string& name, SolverProto_Method* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverProto_Method>(
    SolverProto_Method_descriptor(), name, value);
}
enum SolverProto_GradAlg {
  SolverProto_GradAlg_kBackPropagation = 1,
  SolverProto_GradAlg_kContrastiveDivergence = 2
};
bool SolverProto_GradAlg_IsValid(int value);
const SolverProto_GradAlg SolverProto_GradAlg_GradAlg_MIN = SolverProto_GradAlg_kBackPropagation;
const SolverProto_GradAlg SolverProto_GradAlg_GradAlg_MAX = SolverProto_GradAlg_kContrastiveDivergence;
const int SolverProto_GradAlg_GradAlg_ARRAYSIZE = SolverProto_GradAlg_GradAlg_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverProto_GradAlg_descriptor();
inline const ::std::string& SolverProto_GradAlg_Name(SolverProto_GradAlg value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverProto_GradAlg_descriptor(), value);
}
inline bool SolverProto_GradAlg_Parse(
    const ::std::string& name, SolverProto_GradAlg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverProto_GradAlg>(
    SolverProto_GradAlg_descriptor(), name, value);
}
enum SGDValue_ChangeProto {
  SGDValue_ChangeProto_kFixed = 0,
  SGDValue_ChangeProto_kInverse_t = 1,
  SGDValue_ChangeProto_kExponential = 2,
  SGDValue_ChangeProto_kLinear = 3,
  SGDValue_ChangeProto_kStep = 4
};
bool SGDValue_ChangeProto_IsValid(int value);
const SGDValue_ChangeProto SGDValue_ChangeProto_ChangeProto_MIN = SGDValue_ChangeProto_kFixed;
const SGDValue_ChangeProto SGDValue_ChangeProto_ChangeProto_MAX = SGDValue_ChangeProto_kStep;
const int SGDValue_ChangeProto_ChangeProto_ARRAYSIZE = SGDValue_ChangeProto_ChangeProto_MAX + 1;

const ::google::protobuf::EnumDescriptor* SGDValue_ChangeProto_descriptor();
inline const ::std::string& SGDValue_ChangeProto_Name(SGDValue_ChangeProto value) {
  return ::google::protobuf::internal::NameOfEnum(
    SGDValue_ChangeProto_descriptor(), value);
}
inline bool SGDValue_ChangeProto_Parse(
    const ::std::string& name, SGDValue_ChangeProto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SGDValue_ChangeProto>(
    SGDValue_ChangeProto_descriptor(), name, value);
}
// ===================================================================

class DataSourceProto_Shape : public ::google::protobuf::Message {
 public:
  DataSourceProto_Shape();
  virtual ~DataSourceProto_Shape();

  DataSourceProto_Shape(const DataSourceProto_Shape& from);

  inline DataSourceProto_Shape& operator=(const DataSourceProto_Shape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataSourceProto_Shape& default_instance();

  void Swap(DataSourceProto_Shape* other);

  // implements Message ----------------------------------------------

  DataSourceProto_Shape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataSourceProto_Shape& from);
  void MergeFrom(const DataSourceProto_Shape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 s = 1;
  inline int s_size() const;
  inline void clear_s();
  static const int kSFieldNumber = 1;
  inline ::google::protobuf::int32 s(int index) const;
  inline void set_s(int index, ::google::protobuf::int32 value);
  inline void add_s(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      s() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_s();

  // @@protoc_insertion_point(class_scope:lapis.DataSourceProto.Shape)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > s_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static DataSourceProto_Shape* default_instance_;
};
// -------------------------------------------------------------------

class DataSourceProto : public ::google::protobuf::Message {
 public:
  DataSourceProto();
  virtual ~DataSourceProto();

  DataSourceProto(const DataSourceProto& from);

  inline DataSourceProto& operator=(const DataSourceProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataSourceProto& default_instance();

  void Swap(DataSourceProto* other);

  // implements Message ----------------------------------------------

  DataSourceProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataSourceProto& from);
  void MergeFrom(const DataSourceProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DataSourceProto_Shape Shape;

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional string image_folder = 3;
  inline bool has_image_folder() const;
  inline void clear_image_folder();
  static const int kImageFolderFieldNumber = 3;
  inline const ::std::string& image_folder() const;
  inline void set_image_folder(const ::std::string& value);
  inline void set_image_folder(const char* value);
  inline void set_image_folder(const char* value, size_t size);
  inline ::std::string* mutable_image_folder();
  inline ::std::string* release_image_folder();
  inline void set_allocated_image_folder(::std::string* image_folder);

  // optional string label_path = 4;
  inline bool has_label_path() const;
  inline void clear_label_path();
  static const int kLabelPathFieldNumber = 4;
  inline const ::std::string& label_path() const;
  inline void set_label_path(const ::std::string& value);
  inline void set_label_path(const char* value);
  inline void set_label_path(const char* value, size_t size);
  inline ::std::string* mutable_label_path();
  inline ::std::string* release_label_path();
  inline void set_allocated_label_path(::std::string* label_path);

  // repeated .lapis.DataSourceProto.Shape shape = 5;
  inline int shape_size() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 5;
  inline const ::lapis::DataSourceProto_Shape& shape(int index) const;
  inline ::lapis::DataSourceProto_Shape* mutable_shape(int index);
  inline ::lapis::DataSourceProto_Shape* add_shape();
  inline const ::google::protobuf::RepeatedPtrField< ::lapis::DataSourceProto_Shape >&
      shape() const;
  inline ::google::protobuf::RepeatedPtrField< ::lapis::DataSourceProto_Shape >*
      mutable_shape();

  // optional int32 size = 6;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 6;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // optional int32 offset = 9 [default = 0];
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 9;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // optional string mean_file = 10;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 10;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // optional bool shuffle = 11 [default = true];
  inline bool has_shuffle() const;
  inline void clear_shuffle();
  static const int kShuffleFieldNumber = 11;
  inline bool shuffle() const;
  inline void set_shuffle(bool value);

  // @@protoc_insertion_point(class_scope:lapis.DataSourceProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_image_folder();
  inline void clear_has_image_folder();
  inline void set_has_label_path();
  inline void clear_has_label_path();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* type_;
  ::std::string* image_folder_;
  ::std::string* label_path_;
  ::google::protobuf::RepeatedPtrField< ::lapis::DataSourceProto_Shape > shape_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 offset_;
  ::std::string* mean_file_;
  bool shuffle_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static DataSourceProto* default_instance_;
};
// -------------------------------------------------------------------

class ParamProto : public ::google::protobuf::Message {
 public:
  ParamProto();
  virtual ~ParamProto();

  ParamProto(const ParamProto& from);

  inline ParamProto& operator=(const ParamProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamProto& default_instance();

  void Swap(ParamProto* other);

  // implements Message ----------------------------------------------

  ParamProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParamProto& from);
  void MergeFrom(const ParamProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ParamProto_InitMethod InitMethod;
  static const InitMethod kConstant = ParamProto_InitMethod_kConstant;
  static const InitMethod kGaussain = ParamProto_InitMethod_kGaussain;
  static const InitMethod kUniform = ParamProto_InitMethod_kUniform;
  static const InitMethod kPretrained = ParamProto_InitMethod_kPretrained;
  static const InitMethod kGaussainSqrtFanIn = ParamProto_InitMethod_kGaussainSqrtFanIn;
  static const InitMethod kUniformSqrtFanIn = ParamProto_InitMethod_kUniformSqrtFanIn;
  static const InitMethod kUniformSqrtFanInOut = ParamProto_InitMethod_kUniformSqrtFanInOut;
  static inline bool InitMethod_IsValid(int value) {
    return ParamProto_InitMethod_IsValid(value);
  }
  static const InitMethod InitMethod_MIN =
    ParamProto_InitMethod_InitMethod_MIN;
  static const InitMethod InitMethod_MAX =
    ParamProto_InitMethod_InitMethod_MAX;
  static const int InitMethod_ARRAYSIZE =
    ParamProto_InitMethod_InitMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  InitMethod_descriptor() {
    return ParamProto_InitMethod_descriptor();
  }
  static inline const ::std::string& InitMethod_Name(InitMethod value) {
    return ParamProto_InitMethod_Name(value);
  }
  static inline bool InitMethod_Parse(const ::std::string& name,
      InitMethod* value) {
    return ParamProto_InitMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated int32 shape = 2;
  inline int shape_size() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 2;
  inline ::google::protobuf::int32 shape(int index) const;
  inline void set_shape(int index, ::google::protobuf::int32 value);
  inline void add_shape(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shape() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shape();

  // optional .lapis.ParamProto.InitMethod init_method = 3 [default = kConstant];
  inline bool has_init_method() const;
  inline void clear_init_method();
  static const int kInitMethodFieldNumber = 3;
  inline ::lapis::ParamProto_InitMethod init_method() const;
  inline void set_init_method(::lapis::ParamProto_InitMethod value);

  // optional float value = 4 [default = 1];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline float value() const;
  inline void set_value(float value);

  // optional float low = 5 [default = -1];
  inline bool has_low() const;
  inline void clear_low();
  static const int kLowFieldNumber = 5;
  inline float low() const;
  inline void set_low(float value);

  // optional float high = 6 [default = 1];
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 6;
  inline float high() const;
  inline void set_high(float value);

  // optional float mean = 7 [default = 0];
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 7;
  inline float mean() const;
  inline void set_mean(float value);

  // optional float std = 8 [default = 1];
  inline bool has_std() const;
  inline void clear_std();
  static const int kStdFieldNumber = 8;
  inline float std() const;
  inline void set_std(float value);

  // optional float momentum_multiplier = 9 [default = 1];
  inline bool has_momentum_multiplier() const;
  inline void clear_momentum_multiplier();
  static const int kMomentumMultiplierFieldNumber = 9;
  inline float momentum_multiplier() const;
  inline void set_momentum_multiplier(float value);

  // optional float learning_rate_multiplier = 10 [default = 1];
  inline bool has_learning_rate_multiplier() const;
  inline void clear_learning_rate_multiplier();
  static const int kLearningRateMultiplierFieldNumber = 10;
  inline float learning_rate_multiplier() const;
  inline void set_learning_rate_multiplier(float value);

  // optional float weight_decay_multiplier = 11 [default = 1];
  inline bool has_weight_decay_multiplier() const;
  inline void clear_weight_decay_multiplier();
  static const int kWeightDecayMultiplierFieldNumber = 11;
  inline float weight_decay_multiplier() const;
  inline void set_weight_decay_multiplier(float value);

  // optional .lapis.DAryProto data = 13;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 13;
  inline const ::lapis::DAryProto& data() const;
  inline ::lapis::DAryProto* mutable_data();
  inline ::lapis::DAryProto* release_data();
  inline void set_allocated_data(::lapis::DAryProto* data);

  // optional .lapis.DAryProto grad = 14;
  inline bool has_grad() const;
  inline void clear_grad();
  static const int kGradFieldNumber = 14;
  inline const ::lapis::DAryProto& grad() const;
  inline ::lapis::DAryProto* mutable_grad();
  inline ::lapis::DAryProto* release_grad();
  inline void set_allocated_grad(::lapis::DAryProto* grad);

  // @@protoc_insertion_point(class_scope:lapis.ParamProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_init_method();
  inline void clear_has_init_method();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_std();
  inline void clear_has_std();
  inline void set_has_momentum_multiplier();
  inline void clear_has_momentum_multiplier();
  inline void set_has_learning_rate_multiplier();
  inline void clear_has_learning_rate_multiplier();
  inline void set_has_weight_decay_multiplier();
  inline void clear_has_weight_decay_multiplier();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_grad();
  inline void clear_has_grad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shape_;
  int init_method_;
  float value_;
  float low_;
  float high_;
  float mean_;
  float std_;
  float momentum_multiplier_;
  float learning_rate_multiplier_;
  ::lapis::DAryProto* data_;
  ::lapis::DAryProto* grad_;
  float weight_decay_multiplier_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static ParamProto* default_instance_;
};
// -------------------------------------------------------------------

class LayerProto : public ::google::protobuf::Message {
 public:
  LayerProto();
  virtual ~LayerProto();

  LayerProto(const LayerProto& from);

  inline LayerProto& operator=(const LayerProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerProto& default_instance();

  void Swap(LayerProto* other);

  // implements Message ----------------------------------------------

  LayerProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerProto& from);
  void MergeFrom(const LayerProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LayerProto_PoolingMethod PoolingMethod;
  static const PoolingMethod kMaxPooling = LayerProto_PoolingMethod_kMaxPooling;
  static const PoolingMethod kAvgPooling = LayerProto_PoolingMethod_kAvgPooling;
  static inline bool PoolingMethod_IsValid(int value) {
    return LayerProto_PoolingMethod_IsValid(value);
  }
  static const PoolingMethod PoolingMethod_MIN =
    LayerProto_PoolingMethod_PoolingMethod_MIN;
  static const PoolingMethod PoolingMethod_MAX =
    LayerProto_PoolingMethod_PoolingMethod_MAX;
  static const int PoolingMethod_ARRAYSIZE =
    LayerProto_PoolingMethod_PoolingMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolingMethod_descriptor() {
    return LayerProto_PoolingMethod_descriptor();
  }
  static inline const ::std::string& PoolingMethod_Name(PoolingMethod value) {
    return LayerProto_PoolingMethod_Name(value);
  }
  static inline bool PoolingMethod_Parse(const ::std::string& name,
      PoolingMethod* value) {
    return LayerProto_PoolingMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional int32 num_output = 3;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 3;
  inline ::google::protobuf::int32 num_output() const;
  inline void set_num_output(::google::protobuf::int32 value);

  // repeated .lapis.ParamProto param = 4;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 4;
  inline const ::lapis::ParamProto& param(int index) const;
  inline ::lapis::ParamProto* mutable_param(int index);
  inline ::lapis::ParamProto* add_param();
  inline const ::google::protobuf::RepeatedPtrField< ::lapis::ParamProto >&
      param() const;
  inline ::google::protobuf::RepeatedPtrField< ::lapis::ParamProto >*
      mutable_param();

  // optional int32 window_size = 8;
  inline bool has_window_size() const;
  inline void clear_window_size();
  static const int kWindowSizeFieldNumber = 8;
  inline ::google::protobuf::int32 window_size() const;
  inline void set_window_size(::google::protobuf::int32 value);

  // optional int32 stride = 9 [default = 1];
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 9;
  inline ::google::protobuf::int32 stride() const;
  inline void set_stride(::google::protobuf::int32 value);

  // optional int32 pad = 10 [default = 0];
  inline bool has_pad() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 10;
  inline ::google::protobuf::int32 pad() const;
  inline void set_pad(::google::protobuf::int32 value);

  // optional int32 num_groups = 11 [default = 1];
  inline bool has_num_groups() const;
  inline void clear_num_groups();
  static const int kNumGroupsFieldNumber = 11;
  inline ::google::protobuf::int32 num_groups() const;
  inline void set_num_groups(::google::protobuf::int32 value);

  // optional float alpha = 12;
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 12;
  inline float alpha() const;
  inline void set_alpha(float value);

  // optional float beta = 13;
  inline bool has_beta() const;
  inline void clear_beta();
  static const int kBetaFieldNumber = 13;
  inline float beta() const;
  inline void set_beta(float value);

  // optional float knorm = 14 [default = 1];
  inline bool has_knorm() const;
  inline void clear_knorm();
  static const int kKnormFieldNumber = 14;
  inline float knorm() const;
  inline void set_knorm(float value);

  // optional .lapis.LayerProto.PoolingMethod pooling_method = 16;
  inline bool has_pooling_method() const;
  inline void clear_pooling_method();
  static const int kPoolingMethodFieldNumber = 16;
  inline ::lapis::LayerProto_PoolingMethod pooling_method() const;
  inline void set_pooling_method(::lapis::LayerProto_PoolingMethod value);

  // optional int32 cropsize = 17;
  inline bool has_cropsize() const;
  inline void clear_cropsize();
  static const int kCropsizeFieldNumber = 17;
  inline ::google::protobuf::int32 cropsize() const;
  inline void set_cropsize(::google::protobuf::int32 value);

  // optional bool mirror = 18;
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 18;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional float drop_prob = 19 [default = 0];
  inline bool has_drop_prob() const;
  inline void clear_drop_prob();
  static const int kDropProbFieldNumber = 19;
  inline float drop_prob() const;
  inline void set_drop_prob(float value);

  // optional .lapis.DAryProto data = 20;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 20;
  inline const ::lapis::DAryProto& data() const;
  inline ::lapis::DAryProto* mutable_data();
  inline ::lapis::DAryProto* release_data();
  inline void set_allocated_data(::lapis::DAryProto* data);

  // optional .lapis.DAryProto grad = 21;
  inline bool has_grad() const;
  inline void clear_grad();
  static const int kGradFieldNumber = 21;
  inline const ::lapis::DAryProto& grad() const;
  inline ::lapis::DAryProto* mutable_grad();
  inline ::lapis::DAryProto* release_grad();
  inline void set_allocated_grad(::lapis::DAryProto* grad);

  // optional int32 topk = 23;
  inline bool has_topk() const;
  inline void clear_topk();
  static const int kTopkFieldNumber = 23;
  inline ::google::protobuf::int32 topk() const;
  inline void set_topk(::google::protobuf::int32 value);

  // repeated string top = 24;
  inline int top_size() const;
  inline void clear_top();
  static const int kTopFieldNumber = 24;
  inline const ::std::string& top(int index) const;
  inline ::std::string* mutable_top(int index);
  inline void set_top(int index, const ::std::string& value);
  inline void set_top(int index, const char* value);
  inline void set_top(int index, const char* value, size_t size);
  inline ::std::string* add_top();
  inline void add_top(const ::std::string& value);
  inline void add_top(const char* value);
  inline void add_top(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // repeated string bottom = 25;
  inline int bottom_size() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 25;
  inline const ::std::string& bottom(int index) const;
  inline ::std::string* mutable_bottom(int index);
  inline void set_bottom(int index, const ::std::string& value);
  inline void set_bottom(int index, const char* value);
  inline void set_bottom(int index, const char* value, size_t size);
  inline ::std::string* add_bottom();
  inline void add_bottom(const ::std::string& value);
  inline void add_bottom(const char* value);
  inline void add_bottom(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // @@protoc_insertion_point(class_scope:lapis.LayerProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_window_size();
  inline void clear_has_window_size();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_pad();
  inline void clear_has_pad();
  inline void set_has_num_groups();
  inline void clear_has_num_groups();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_knorm();
  inline void clear_has_knorm();
  inline void set_has_pooling_method();
  inline void clear_has_pooling_method();
  inline void set_has_cropsize();
  inline void clear_has_cropsize();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_drop_prob();
  inline void clear_has_drop_prob();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_grad();
  inline void clear_has_grad();
  inline void set_has_topk();
  inline void clear_has_topk();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* type_;
  ::google::protobuf::RepeatedPtrField< ::lapis::ParamProto > param_;
  ::google::protobuf::int32 num_output_;
  ::google::protobuf::int32 window_size_;
  ::google::protobuf::int32 stride_;
  ::google::protobuf::int32 pad_;
  ::google::protobuf::int32 num_groups_;
  float alpha_;
  float beta_;
  float knorm_;
  int pooling_method_;
  ::google::protobuf::int32 cropsize_;
  bool mirror_;
  float drop_prob_;
  ::lapis::DAryProto* data_;
  ::lapis::DAryProto* grad_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::int32 topk_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static LayerProto* default_instance_;
};
// -------------------------------------------------------------------

class MeanProto : public ::google::protobuf::Message {
 public:
  MeanProto();
  virtual ~MeanProto();

  MeanProto(const MeanProto& from);

  inline MeanProto& operator=(const MeanProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MeanProto& default_instance();

  void Swap(MeanProto* other);

  // implements Message ----------------------------------------------

  MeanProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MeanProto& from);
  void MergeFrom(const MeanProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num = 1 [default = 0];
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 channels = 2 [default = 0];
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 2;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 3 [default = 0];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 width = 4 [default = 0];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // repeated float data = 5 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 6 [packed = true];
  inline int diff_size() const;
  inline void clear_diff();
  static const int kDiffFieldNumber = 6;
  inline float diff(int index) const;
  inline void set_diff(int index, float value);
  inline void add_diff(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      diff() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_diff();

  // @@protoc_insertion_point(class_scope:lapis.MeanProto)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > diff_;
  mutable int _diff_cached_byte_size_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static MeanProto* default_instance_;
};
// -------------------------------------------------------------------

class DAryProto : public ::google::protobuf::Message {
 public:
  DAryProto();
  virtual ~DAryProto();

  DAryProto(const DAryProto& from);

  inline DAryProto& operator=(const DAryProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DAryProto& default_instance();

  void Swap(DAryProto* other);

  // implements Message ----------------------------------------------

  DAryProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DAryProto& from);
  void MergeFrom(const DAryProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 shape = 1;
  inline int shape_size() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 1;
  inline ::google::protobuf::int32 shape(int index) const;
  inline void set_shape(int index, ::google::protobuf::int32 value);
  inline void add_shape(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shape() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shape();

  // repeated int32 range_start = 2;
  inline int range_start_size() const;
  inline void clear_range_start();
  static const int kRangeStartFieldNumber = 2;
  inline ::google::protobuf::int32 range_start(int index) const;
  inline void set_range_start(int index, ::google::protobuf::int32 value);
  inline void add_range_start(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      range_start() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_range_start();

  // repeated int32 range_end = 3;
  inline int range_end_size() const;
  inline void clear_range_end();
  static const int kRangeEndFieldNumber = 3;
  inline ::google::protobuf::int32 range_end(int index) const;
  inline void set_range_end(int index, ::google::protobuf::int32 value);
  inline void add_range_end(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      range_end() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_range_end();

  // repeated float value = 4 [packed = true];
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline float value(int index) const;
  inline void set_value(int index, float value);
  inline void add_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:lapis.DAryProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shape_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > range_start_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > range_end_;
  ::google::protobuf::RepeatedField< float > value_;
  mutable int _value_cached_byte_size_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static DAryProto* default_instance_;
};
// -------------------------------------------------------------------

class NetProto : public ::google::protobuf::Message {
 public:
  NetProto();
  virtual ~NetProto();

  NetProto(const NetProto& from);

  inline NetProto& operator=(const NetProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto& default_instance();

  void Swap(NetProto* other);

  // implements Message ----------------------------------------------

  NetProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto& from);
  void MergeFrom(const NetProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .lapis.LayerProto layer = 1;
  inline int layer_size() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 1;
  inline const ::lapis::LayerProto& layer(int index) const;
  inline ::lapis::LayerProto* mutable_layer(int index);
  inline ::lapis::LayerProto* add_layer();
  inline const ::google::protobuf::RepeatedPtrField< ::lapis::LayerProto >&
      layer() const;
  inline ::google::protobuf::RepeatedPtrField< ::lapis::LayerProto >*
      mutable_layer();

  // @@protoc_insertion_point(class_scope:lapis.NetProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::lapis::LayerProto > layer_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static NetProto* default_instance_;
};
// -------------------------------------------------------------------

class PerformanceProto : public ::google::protobuf::Message {
 public:
  PerformanceProto();
  virtual ~PerformanceProto();

  PerformanceProto(const PerformanceProto& from);

  inline PerformanceProto& operator=(const PerformanceProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerformanceProto& default_instance();

  void Swap(PerformanceProto* other);

  // implements Message ----------------------------------------------

  PerformanceProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PerformanceProto& from);
  void MergeFrom(const PerformanceProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float precision = 1;
  inline bool has_precision() const;
  inline void clear_precision();
  static const int kPrecisionFieldNumber = 1;
  inline float precision() const;
  inline void set_precision(float value);

  // optional float loss = 2;
  inline bool has_loss() const;
  inline void clear_loss();
  static const int kLossFieldNumber = 2;
  inline float loss() const;
  inline void set_loss(float value);

  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 step = 4;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 4;
  inline ::google::protobuf::int32 step() const;
  inline void set_step(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lapis.PerformanceProto)
 private:
  inline void set_has_precision();
  inline void clear_has_precision();
  inline void set_has_loss();
  inline void clear_has_loss();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_step();
  inline void clear_has_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float precision_;
  float loss_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 step_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static PerformanceProto* default_instance_;
};
// -------------------------------------------------------------------

class SolverProto : public ::google::protobuf::Message {
 public:
  SolverProto();
  virtual ~SolverProto();

  SolverProto(const SolverProto& from);

  inline SolverProto& operator=(const SolverProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverProto& default_instance();

  void Swap(SolverProto* other);

  // implements Message ----------------------------------------------

  SolverProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverProto& from);
  void MergeFrom(const SolverProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SolverProto_Method Method;
  static const Method kSGD = SolverProto_Method_kSGD;
  static const Method kAdaGrad = SolverProto_Method_kAdaGrad;
  static inline bool Method_IsValid(int value) {
    return SolverProto_Method_IsValid(value);
  }
  static const Method Method_MIN =
    SolverProto_Method_Method_MIN;
  static const Method Method_MAX =
    SolverProto_Method_Method_MAX;
  static const int Method_ARRAYSIZE =
    SolverProto_Method_Method_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Method_descriptor() {
    return SolverProto_Method_descriptor();
  }
  static inline const ::std::string& Method_Name(Method value) {
    return SolverProto_Method_Name(value);
  }
  static inline bool Method_Parse(const ::std::string& name,
      Method* value) {
    return SolverProto_Method_Parse(name, value);
  }

  typedef SolverProto_GradAlg GradAlg;
  static const GradAlg kBackPropagation = SolverProto_GradAlg_kBackPropagation;
  static const GradAlg kContrastiveDivergence = SolverProto_GradAlg_kContrastiveDivergence;
  static inline bool GradAlg_IsValid(int value) {
    return SolverProto_GradAlg_IsValid(value);
  }
  static const GradAlg GradAlg_MIN =
    SolverProto_GradAlg_GradAlg_MIN;
  static const GradAlg GradAlg_MAX =
    SolverProto_GradAlg_GradAlg_MAX;
  static const int GradAlg_ARRAYSIZE =
    SolverProto_GradAlg_GradAlg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GradAlg_descriptor() {
    return SolverProto_GradAlg_descriptor();
  }
  static inline const ::std::string& GradAlg_Name(GradAlg value) {
    return SolverProto_GradAlg_Name(value);
  }
  static inline bool GradAlg_Parse(const ::std::string& name,
      GradAlg* value) {
    return SolverProto_GradAlg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .lapis.SolverProto.Method method = 1 [default = kSGD];
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 1;
  inline ::lapis::SolverProto_Method method() const;
  inline void set_method(::lapis::SolverProto_Method value);

  // optional int32 checkpoint_after_steps = 2 [default = 0];
  inline bool has_checkpoint_after_steps() const;
  inline void clear_checkpoint_after_steps();
  static const int kCheckpointAfterStepsFieldNumber = 2;
  inline ::google::protobuf::int32 checkpoint_after_steps() const;
  inline void set_checkpoint_after_steps(::google::protobuf::int32 value);

  // optional int32 checkpoint_every_steps = 3 [default = 0];
  inline bool has_checkpoint_every_steps() const;
  inline void clear_checkpoint_every_steps();
  static const int kCheckpointEveryStepsFieldNumber = 3;
  inline ::google::protobuf::int32 checkpoint_every_steps() const;
  inline void set_checkpoint_every_steps(::google::protobuf::int32 value);

  // optional string checkpoint_prefix = 4 [default = "tmp/checkpoint"];
  inline bool has_checkpoint_prefix() const;
  inline void clear_checkpoint_prefix();
  static const int kCheckpointPrefixFieldNumber = 4;
  inline const ::std::string& checkpoint_prefix() const;
  inline void set_checkpoint_prefix(const ::std::string& value);
  inline void set_checkpoint_prefix(const char* value);
  inline void set_checkpoint_prefix(const char* value, size_t size);
  inline ::std::string* mutable_checkpoint_prefix();
  inline ::std::string* release_checkpoint_prefix();
  inline void set_allocated_checkpoint_prefix(::std::string* checkpoint_prefix);

  // optional int32 checkpoint_step = 5 [default = 0];
  inline bool has_checkpoint_step() const;
  inline void clear_checkpoint_step();
  static const int kCheckpointStepFieldNumber = 5;
  inline ::google::protobuf::int32 checkpoint_step() const;
  inline void set_checkpoint_step(::google::protobuf::int32 value);

  // optional int32 display_after_steps = 6 [default = 0];
  inline bool has_display_after_steps() const;
  inline void clear_display_after_steps();
  static const int kDisplayAfterStepsFieldNumber = 6;
  inline ::google::protobuf::int32 display_after_steps() const;
  inline void set_display_after_steps(::google::protobuf::int32 value);

  // optional int32 display_every_steps = 7 [default = 0];
  inline bool has_display_every_steps() const;
  inline void clear_display_every_steps();
  static const int kDisplayEveryStepsFieldNumber = 7;
  inline ::google::protobuf::int32 display_every_steps() const;
  inline void set_display_every_steps(::google::protobuf::int32 value);

  // optional string display_prefix = 8 [default = "tmp/display"];
  inline bool has_display_prefix() const;
  inline void clear_display_prefix();
  static const int kDisplayPrefixFieldNumber = 8;
  inline const ::std::string& display_prefix() const;
  inline void set_display_prefix(const ::std::string& value);
  inline void set_display_prefix(const char* value);
  inline void set_display_prefix(const char* value, size_t size);
  inline ::std::string* mutable_display_prefix();
  inline ::std::string* release_display_prefix();
  inline void set_allocated_display_prefix(::std::string* display_prefix);

  // optional int32 validation_step = 9 [default = 0];
  inline bool has_validation_step() const;
  inline void clear_validation_step();
  static const int kValidationStepFieldNumber = 9;
  inline ::google::protobuf::int32 validation_step() const;
  inline void set_validation_step(::google::protobuf::int32 value);

  // optional int32 validation_after_steps = 10 [default = 0];
  inline bool has_validation_after_steps() const;
  inline void clear_validation_after_steps();
  static const int kValidationAfterStepsFieldNumber = 10;
  inline ::google::protobuf::int32 validation_after_steps() const;
  inline void set_validation_after_steps(::google::protobuf::int32 value);

  // optional int32 validation_every_steps = 11 [default = 0];
  inline bool has_validation_every_steps() const;
  inline void clear_validation_every_steps();
  static const int kValidationEveryStepsFieldNumber = 11;
  inline ::google::protobuf::int32 validation_every_steps() const;
  inline void set_validation_every_steps(::google::protobuf::int32 value);

  // optional string perf_prefix = 12 [default = "tmp/performance"];
  inline bool has_perf_prefix() const;
  inline void clear_perf_prefix();
  static const int kPerfPrefixFieldNumber = 12;
  inline const ::std::string& perf_prefix() const;
  inline void set_perf_prefix(const ::std::string& value);
  inline void set_perf_prefix(const char* value);
  inline void set_perf_prefix(const char* value, size_t size);
  inline ::std::string* mutable_perf_prefix();
  inline ::std::string* release_perf_prefix();
  inline void set_allocated_perf_prefix(::std::string* perf_prefix);

  // optional .lapis.SolverProto.GradAlg alg = 13 [default = kBackPropagation];
  inline bool has_alg() const;
  inline void clear_alg();
  static const int kAlgFieldNumber = 13;
  inline ::lapis::SolverProto_GradAlg alg() const;
  inline void set_alg(::lapis::SolverProto_GradAlg value);

  // optional int32 train_batchsize = 19;
  inline bool has_train_batchsize() const;
  inline void clear_train_batchsize();
  static const int kTrainBatchsizeFieldNumber = 19;
  inline ::google::protobuf::int32 train_batchsize() const;
  inline void set_train_batchsize(::google::protobuf::int32 value);

  // optional int32 train_steps = 20;
  inline bool has_train_steps() const;
  inline void clear_train_steps();
  static const int kTrainStepsFieldNumber = 20;
  inline ::google::protobuf::int32 train_steps() const;
  inline void set_train_steps(::google::protobuf::int32 value);

  // optional int32 validation_batchsize = 21;
  inline bool has_validation_batchsize() const;
  inline void clear_validation_batchsize();
  static const int kValidationBatchsizeFieldNumber = 21;
  inline ::google::protobuf::int32 validation_batchsize() const;
  inline void set_validation_batchsize(::google::protobuf::int32 value);

  // optional int32 validation_steps = 22;
  inline bool has_validation_steps() const;
  inline void clear_validation_steps();
  static const int kValidationStepsFieldNumber = 22;
  inline ::google::protobuf::int32 validation_steps() const;
  inline void set_validation_steps(::google::protobuf::int32 value);

  // optional .lapis.SGDValue sgd = 23;
  inline bool has_sgd() const;
  inline void clear_sgd();
  static const int kSgdFieldNumber = 23;
  inline const ::lapis::SGDValue& sgd() const;
  inline ::lapis::SGDValue* mutable_sgd();
  inline ::lapis::SGDValue* release_sgd();
  inline void set_allocated_sgd(::lapis::SGDValue* sgd);

  // optional .lapis.AdaGradValue adagrad = 24;
  inline bool has_adagrad() const;
  inline void clear_adagrad();
  static const int kAdagradFieldNumber = 24;
  inline const ::lapis::AdaGradValue& adagrad() const;
  inline ::lapis::AdaGradValue* mutable_adagrad();
  inline ::lapis::AdaGradValue* release_adagrad();
  inline void set_allocated_adagrad(::lapis::AdaGradValue* adagrad);

  // @@protoc_insertion_point(class_scope:lapis.SolverProto)
 private:
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_checkpoint_after_steps();
  inline void clear_has_checkpoint_after_steps();
  inline void set_has_checkpoint_every_steps();
  inline void clear_has_checkpoint_every_steps();
  inline void set_has_checkpoint_prefix();
  inline void clear_has_checkpoint_prefix();
  inline void set_has_checkpoint_step();
  inline void clear_has_checkpoint_step();
  inline void set_has_display_after_steps();
  inline void clear_has_display_after_steps();
  inline void set_has_display_every_steps();
  inline void clear_has_display_every_steps();
  inline void set_has_display_prefix();
  inline void clear_has_display_prefix();
  inline void set_has_validation_step();
  inline void clear_has_validation_step();
  inline void set_has_validation_after_steps();
  inline void clear_has_validation_after_steps();
  inline void set_has_validation_every_steps();
  inline void clear_has_validation_every_steps();
  inline void set_has_perf_prefix();
  inline void clear_has_perf_prefix();
  inline void set_has_alg();
  inline void clear_has_alg();
  inline void set_has_train_batchsize();
  inline void clear_has_train_batchsize();
  inline void set_has_train_steps();
  inline void clear_has_train_steps();
  inline void set_has_validation_batchsize();
  inline void clear_has_validation_batchsize();
  inline void set_has_validation_steps();
  inline void clear_has_validation_steps();
  inline void set_has_sgd();
  inline void clear_has_sgd();
  inline void set_has_adagrad();
  inline void clear_has_adagrad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int method_;
  ::google::protobuf::int32 checkpoint_after_steps_;
  static ::std::string* _default_checkpoint_prefix_;
  ::std::string* checkpoint_prefix_;
  ::google::protobuf::int32 checkpoint_every_steps_;
  ::google::protobuf::int32 checkpoint_step_;
  ::google::protobuf::int32 display_after_steps_;
  ::google::protobuf::int32 display_every_steps_;
  static ::std::string* _default_display_prefix_;
  ::std::string* display_prefix_;
  ::google::protobuf::int32 validation_step_;
  ::google::protobuf::int32 validation_after_steps_;
  static ::std::string* _default_perf_prefix_;
  ::std::string* perf_prefix_;
  ::google::protobuf::int32 validation_every_steps_;
  int alg_;
  ::google::protobuf::int32 train_batchsize_;
  ::google::protobuf::int32 train_steps_;
  ::google::protobuf::int32 validation_batchsize_;
  ::google::protobuf::int32 validation_steps_;
  ::lapis::SGDValue* sgd_;
  ::lapis::AdaGradValue* adagrad_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static SolverProto* default_instance_;
};
// -------------------------------------------------------------------

class DataProto : public ::google::protobuf::Message {
 public:
  DataProto();
  virtual ~DataProto();

  DataProto(const DataProto& from);

  inline DataProto& operator=(const DataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataProto& default_instance();

  void Swap(DataProto* other);

  // implements Message ----------------------------------------------

  DataProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataProto& from);
  void MergeFrom(const DataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .lapis.DataSourceProto train_data = 1;
  inline bool has_train_data() const;
  inline void clear_train_data();
  static const int kTrainDataFieldNumber = 1;
  inline const ::lapis::DataSourceProto& train_data() const;
  inline ::lapis::DataSourceProto* mutable_train_data();
  inline ::lapis::DataSourceProto* release_train_data();
  inline void set_allocated_train_data(::lapis::DataSourceProto* train_data);

  // optional .lapis.DataSourceProto validation_data = 2;
  inline bool has_validation_data() const;
  inline void clear_validation_data();
  static const int kValidationDataFieldNumber = 2;
  inline const ::lapis::DataSourceProto& validation_data() const;
  inline ::lapis::DataSourceProto* mutable_validation_data();
  inline ::lapis::DataSourceProto* release_validation_data();
  inline void set_allocated_validation_data(::lapis::DataSourceProto* validation_data);

  // optional .lapis.DataSourceProto test_data = 3;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 3;
  inline const ::lapis::DataSourceProto& test_data() const;
  inline ::lapis::DataSourceProto* mutable_test_data();
  inline ::lapis::DataSourceProto* release_test_data();
  inline void set_allocated_test_data(::lapis::DataSourceProto* test_data);

  // @@protoc_insertion_point(class_scope:lapis.DataProto)
 private:
  inline void set_has_train_data();
  inline void clear_has_train_data();
  inline void set_has_validation_data();
  inline void clear_has_validation_data();
  inline void set_has_test_data();
  inline void clear_has_test_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::lapis::DataSourceProto* train_data_;
  ::lapis::DataSourceProto* validation_data_;
  ::lapis::DataSourceProto* test_data_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static DataProto* default_instance_;
};
// -------------------------------------------------------------------

class ModelProto : public ::google::protobuf::Message {
 public:
  ModelProto();
  virtual ~ModelProto();

  ModelProto(const ModelProto& from);

  inline ModelProto& operator=(const ModelProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelProto& default_instance();

  void Swap(ModelProto* other);

  // implements Message ----------------------------------------------

  ModelProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelProto& from);
  void MergeFrom(const ModelProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .lapis.NetProto net = 2;
  inline bool has_net() const;
  inline void clear_net();
  static const int kNetFieldNumber = 2;
  inline const ::lapis::NetProto& net() const;
  inline ::lapis::NetProto* mutable_net();
  inline ::lapis::NetProto* release_net();
  inline void set_allocated_net(::lapis::NetProto* net);

  // optional .lapis.SolverProto solver = 3;
  inline bool has_solver() const;
  inline void clear_solver();
  static const int kSolverFieldNumber = 3;
  inline const ::lapis::SolverProto& solver() const;
  inline ::lapis::SolverProto* mutable_solver();
  inline ::lapis::SolverProto* release_solver();
  inline void set_allocated_solver(::lapis::SolverProto* solver);

  // optional .lapis.DataProto data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::lapis::DataProto& data() const;
  inline ::lapis::DataProto* mutable_data();
  inline ::lapis::DataProto* release_data();
  inline void set_allocated_data(::lapis::DataProto* data);

  // @@protoc_insertion_point(class_scope:lapis.ModelProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_net();
  inline void clear_has_net();
  inline void set_has_solver();
  inline void clear_has_solver();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::lapis::NetProto* net_;
  ::lapis::SolverProto* solver_;
  ::lapis::DataProto* data_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static ModelProto* default_instance_;
};
// -------------------------------------------------------------------

class Record : public ::google::protobuf::Message {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();

  void Swap(Record* other);

  // implements Message ----------------------------------------------

  Record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .lapis.DAryProto image = 1;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 1;
  inline const ::lapis::DAryProto& image() const;
  inline ::lapis::DAryProto* mutable_image();
  inline ::lapis::DAryProto* release_image();
  inline void set_allocated_image(::lapis::DAryProto* image);

  // optional int32 label = 2;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline ::google::protobuf::int32 label() const;
  inline void set_label(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lapis.Record)
 private:
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_label();
  inline void clear_has_label();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::lapis::DAryProto* image_;
  ::google::protobuf::int32 label_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static Record* default_instance_;
};
// -------------------------------------------------------------------

class AdaGradValue : public ::google::protobuf::Message {
 public:
  AdaGradValue();
  virtual ~AdaGradValue();

  AdaGradValue(const AdaGradValue& from);

  inline AdaGradValue& operator=(const AdaGradValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdaGradValue& default_instance();

  void Swap(AdaGradValue* other);

  // implements Message ----------------------------------------------

  AdaGradValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdaGradValue& from);
  void MergeFrom(const AdaGradValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 n_update = 1 [default = 0];
  inline bool has_n_update() const;
  inline void clear_n_update();
  static const int kNUpdateFieldNumber = 1;
  inline ::google::protobuf::int32 n_update() const;
  inline void set_n_update(::google::protobuf::int32 value);

  // optional int32 version = 2 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional .lapis.DAryProto data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::lapis::DAryProto& data() const;
  inline ::lapis::DAryProto* mutable_data();
  inline ::lapis::DAryProto* release_data();
  inline void set_allocated_data(::lapis::DAryProto* data);

  // optional .lapis.DAryProto grad = 5;
  inline bool has_grad() const;
  inline void clear_grad();
  static const int kGradFieldNumber = 5;
  inline const ::lapis::DAryProto& grad() const;
  inline ::lapis::DAryProto* mutable_grad();
  inline ::lapis::DAryProto* release_grad();
  inline void set_allocated_grad(::lapis::DAryProto* grad);

  // optional float base_learning_rate = 6;
  inline bool has_base_learning_rate() const;
  inline void clear_base_learning_rate();
  static const int kBaseLearningRateFieldNumber = 6;
  inline float base_learning_rate() const;
  inline void set_base_learning_rate(float value);

  // optional int32 threshold = 7;
  inline bool has_threshold() const;
  inline void clear_threshold();
  static const int kThresholdFieldNumber = 7;
  inline ::google::protobuf::int32 threshold() const;
  inline void set_threshold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lapis.AdaGradValue)
 private:
  inline void set_has_n_update();
  inline void clear_has_n_update();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_grad();
  inline void clear_has_grad();
  inline void set_has_base_learning_rate();
  inline void clear_has_base_learning_rate();
  inline void set_has_threshold();
  inline void clear_has_threshold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 n_update_;
  ::google::protobuf::int32 version_;
  ::lapis::DAryProto* data_;
  ::lapis::DAryProto* grad_;
  float base_learning_rate_;
  ::google::protobuf::int32 threshold_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static AdaGradValue* default_instance_;
};
// -------------------------------------------------------------------

class SGDValue : public ::google::protobuf::Message {
 public:
  SGDValue();
  virtual ~SGDValue();

  SGDValue(const SGDValue& from);

  inline SGDValue& operator=(const SGDValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SGDValue& default_instance();

  void Swap(SGDValue* other);

  // implements Message ----------------------------------------------

  SGDValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SGDValue& from);
  void MergeFrom(const SGDValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SGDValue_ChangeProto ChangeProto;
  static const ChangeProto kFixed = SGDValue_ChangeProto_kFixed;
  static const ChangeProto kInverse_t = SGDValue_ChangeProto_kInverse_t;
  static const ChangeProto kExponential = SGDValue_ChangeProto_kExponential;
  static const ChangeProto kLinear = SGDValue_ChangeProto_kLinear;
  static const ChangeProto kStep = SGDValue_ChangeProto_kStep;
  static inline bool ChangeProto_IsValid(int value) {
    return SGDValue_ChangeProto_IsValid(value);
  }
  static const ChangeProto ChangeProto_MIN =
    SGDValue_ChangeProto_ChangeProto_MIN;
  static const ChangeProto ChangeProto_MAX =
    SGDValue_ChangeProto_ChangeProto_MAX;
  static const int ChangeProto_ARRAYSIZE =
    SGDValue_ChangeProto_ChangeProto_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChangeProto_descriptor() {
    return SGDValue_ChangeProto_descriptor();
  }
  static inline const ::std::string& ChangeProto_Name(ChangeProto value) {
    return SGDValue_ChangeProto_Name(value);
  }
  static inline bool ChangeProto_Parse(const ::std::string& name,
      ChangeProto* value) {
    return SGDValue_ChangeProto_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required float base_learning_rate = 1;
  inline bool has_base_learning_rate() const;
  inline void clear_base_learning_rate();
  static const int kBaseLearningRateFieldNumber = 1;
  inline float base_learning_rate() const;
  inline void set_base_learning_rate(float value);

  // optional float momentum = 2 [default = 0];
  inline bool has_momentum() const;
  inline void clear_momentum();
  static const int kMomentumFieldNumber = 2;
  inline float momentum() const;
  inline void set_momentum(float value);

  // optional float weight_decay = 3 [default = 0];
  inline bool has_weight_decay() const;
  inline void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 3;
  inline float weight_decay() const;
  inline void set_weight_decay(float value);

  // optional float learning_rate_x = 4;
  inline bool has_learning_rate_x() const;
  inline void clear_learning_rate_x();
  static const int kLearningRateXFieldNumber = 4;
  inline float learning_rate_x() const;
  inline void set_learning_rate_x(float value);

  // optional int32 learning_rate_change_steps = 5;
  inline bool has_learning_rate_change_steps() const;
  inline void clear_learning_rate_change_steps();
  static const int kLearningRateChangeStepsFieldNumber = 5;
  inline ::google::protobuf::int32 learning_rate_change_steps() const;
  inline void set_learning_rate_change_steps(::google::protobuf::int32 value);

  // optional .lapis.SGDValue.ChangeProto learning_rate_change = 6 [default = kInverse_t];
  inline bool has_learning_rate_change() const;
  inline void clear_learning_rate_change();
  static const int kLearningRateChangeFieldNumber = 6;
  inline ::lapis::SGDValue_ChangeProto learning_rate_change() const;
  inline void set_learning_rate_change(::lapis::SGDValue_ChangeProto value);

  // optional .lapis.DAryProto data = 7;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 7;
  inline const ::lapis::DAryProto& data() const;
  inline ::lapis::DAryProto* mutable_data();
  inline ::lapis::DAryProto* release_data();
  inline void set_allocated_data(::lapis::DAryProto* data);

  // optional .lapis.DAryProto grad = 8;
  inline bool has_grad() const;
  inline void clear_grad();
  static const int kGradFieldNumber = 8;
  inline const ::lapis::DAryProto& grad() const;
  inline ::lapis::DAryProto* mutable_grad();
  inline ::lapis::DAryProto* release_grad();
  inline void set_allocated_grad(::lapis::DAryProto* grad);

  // optional int32 n_update = 9 [default = 0];
  inline bool has_n_update() const;
  inline void clear_n_update();
  static const int kNUpdateFieldNumber = 9;
  inline ::google::protobuf::int32 n_update() const;
  inline void set_n_update(::google::protobuf::int32 value);

  // optional int32 version = 10 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 10;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional float factor = 12;
  inline bool has_factor() const;
  inline void clear_factor();
  static const int kFactorFieldNumber = 12;
  inline float factor() const;
  inline void set_factor(float value);

  // optional int32 threshold = 13;
  inline bool has_threshold() const;
  inline void clear_threshold();
  static const int kThresholdFieldNumber = 13;
  inline ::google::protobuf::int32 threshold() const;
  inline void set_threshold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lapis.SGDValue)
 private:
  inline void set_has_base_learning_rate();
  inline void clear_has_base_learning_rate();
  inline void set_has_momentum();
  inline void clear_has_momentum();
  inline void set_has_weight_decay();
  inline void clear_has_weight_decay();
  inline void set_has_learning_rate_x();
  inline void clear_has_learning_rate_x();
  inline void set_has_learning_rate_change_steps();
  inline void clear_has_learning_rate_change_steps();
  inline void set_has_learning_rate_change();
  inline void clear_has_learning_rate_change();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_grad();
  inline void clear_has_grad();
  inline void set_has_n_update();
  inline void clear_has_n_update();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_factor();
  inline void clear_has_factor();
  inline void set_has_threshold();
  inline void clear_has_threshold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float base_learning_rate_;
  float momentum_;
  float weight_decay_;
  float learning_rate_x_;
  ::google::protobuf::int32 learning_rate_change_steps_;
  int learning_rate_change_;
  ::lapis::DAryProto* data_;
  ::lapis::DAryProto* grad_;
  ::google::protobuf::int32 n_update_;
  ::google::protobuf::int32 version_;
  float factor_;
  ::google::protobuf::int32 threshold_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static SGDValue* default_instance_;
};
// ===================================================================


// ===================================================================

// DataSourceProto_Shape

// repeated int32 s = 1;
inline int DataSourceProto_Shape::s_size() const {
  return s_.size();
}
inline void DataSourceProto_Shape::clear_s() {
  s_.Clear();
}
inline ::google::protobuf::int32 DataSourceProto_Shape::s(int index) const {
  // @@protoc_insertion_point(field_get:lapis.DataSourceProto.Shape.s)
  return s_.Get(index);
}
inline void DataSourceProto_Shape::set_s(int index, ::google::protobuf::int32 value) {
  s_.Set(index, value);
  // @@protoc_insertion_point(field_set:lapis.DataSourceProto.Shape.s)
}
inline void DataSourceProto_Shape::add_s(::google::protobuf::int32 value) {
  s_.Add(value);
  // @@protoc_insertion_point(field_add:lapis.DataSourceProto.Shape.s)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DataSourceProto_Shape::s() const {
  // @@protoc_insertion_point(field_list:lapis.DataSourceProto.Shape.s)
  return s_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DataSourceProto_Shape::mutable_s() {
  // @@protoc_insertion_point(field_mutable_list:lapis.DataSourceProto.Shape.s)
  return &s_;
}

// -------------------------------------------------------------------

// DataSourceProto

// required string name = 1;
inline bool DataSourceProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataSourceProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataSourceProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataSourceProto::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DataSourceProto::name() const {
  // @@protoc_insertion_point(field_get:lapis.DataSourceProto.name)
  return *name_;
}
inline void DataSourceProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.DataSourceProto.name)
}
inline void DataSourceProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.DataSourceProto.name)
}
inline void DataSourceProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.DataSourceProto.name)
}
inline ::std::string* DataSourceProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lapis.DataSourceProto.name)
  return name_;
}
inline ::std::string* DataSourceProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataSourceProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.DataSourceProto.name)
}

// required string type = 2;
inline bool DataSourceProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataSourceProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataSourceProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataSourceProto::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& DataSourceProto::type() const {
  // @@protoc_insertion_point(field_get:lapis.DataSourceProto.type)
  return *type_;
}
inline void DataSourceProto::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.DataSourceProto.type)
}
inline void DataSourceProto::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.DataSourceProto.type)
}
inline void DataSourceProto::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.DataSourceProto.type)
}
inline ::std::string* DataSourceProto::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lapis.DataSourceProto.type)
  return type_;
}
inline ::std::string* DataSourceProto::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataSourceProto::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.DataSourceProto.type)
}

// optional string image_folder = 3;
inline bool DataSourceProto::has_image_folder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataSourceProto::set_has_image_folder() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataSourceProto::clear_has_image_folder() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataSourceProto::clear_image_folder() {
  if (image_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_folder_->clear();
  }
  clear_has_image_folder();
}
inline const ::std::string& DataSourceProto::image_folder() const {
  // @@protoc_insertion_point(field_get:lapis.DataSourceProto.image_folder)
  return *image_folder_;
}
inline void DataSourceProto::set_image_folder(const ::std::string& value) {
  set_has_image_folder();
  if (image_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_folder_ = new ::std::string;
  }
  image_folder_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.DataSourceProto.image_folder)
}
inline void DataSourceProto::set_image_folder(const char* value) {
  set_has_image_folder();
  if (image_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_folder_ = new ::std::string;
  }
  image_folder_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.DataSourceProto.image_folder)
}
inline void DataSourceProto::set_image_folder(const char* value, size_t size) {
  set_has_image_folder();
  if (image_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_folder_ = new ::std::string;
  }
  image_folder_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.DataSourceProto.image_folder)
}
inline ::std::string* DataSourceProto::mutable_image_folder() {
  set_has_image_folder();
  if (image_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_folder_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lapis.DataSourceProto.image_folder)
  return image_folder_;
}
inline ::std::string* DataSourceProto::release_image_folder() {
  clear_has_image_folder();
  if (image_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_folder_;
    image_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataSourceProto::set_allocated_image_folder(::std::string* image_folder) {
  if (image_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_folder_;
  }
  if (image_folder) {
    set_has_image_folder();
    image_folder_ = image_folder;
  } else {
    clear_has_image_folder();
    image_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.DataSourceProto.image_folder)
}

// optional string label_path = 4;
inline bool DataSourceProto::has_label_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataSourceProto::set_has_label_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataSourceProto::clear_has_label_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataSourceProto::clear_label_path() {
  if (label_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_path_->clear();
  }
  clear_has_label_path();
}
inline const ::std::string& DataSourceProto::label_path() const {
  // @@protoc_insertion_point(field_get:lapis.DataSourceProto.label_path)
  return *label_path_;
}
inline void DataSourceProto::set_label_path(const ::std::string& value) {
  set_has_label_path();
  if (label_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_path_ = new ::std::string;
  }
  label_path_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.DataSourceProto.label_path)
}
inline void DataSourceProto::set_label_path(const char* value) {
  set_has_label_path();
  if (label_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_path_ = new ::std::string;
  }
  label_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.DataSourceProto.label_path)
}
inline void DataSourceProto::set_label_path(const char* value, size_t size) {
  set_has_label_path();
  if (label_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_path_ = new ::std::string;
  }
  label_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.DataSourceProto.label_path)
}
inline ::std::string* DataSourceProto::mutable_label_path() {
  set_has_label_path();
  if (label_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lapis.DataSourceProto.label_path)
  return label_path_;
}
inline ::std::string* DataSourceProto::release_label_path() {
  clear_has_label_path();
  if (label_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = label_path_;
    label_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataSourceProto::set_allocated_label_path(::std::string* label_path) {
  if (label_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_path_;
  }
  if (label_path) {
    set_has_label_path();
    label_path_ = label_path;
  } else {
    clear_has_label_path();
    label_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.DataSourceProto.label_path)
}

// repeated .lapis.DataSourceProto.Shape shape = 5;
inline int DataSourceProto::shape_size() const {
  return shape_.size();
}
inline void DataSourceProto::clear_shape() {
  shape_.Clear();
}
inline const ::lapis::DataSourceProto_Shape& DataSourceProto::shape(int index) const {
  // @@protoc_insertion_point(field_get:lapis.DataSourceProto.shape)
  return shape_.Get(index);
}
inline ::lapis::DataSourceProto_Shape* DataSourceProto::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:lapis.DataSourceProto.shape)
  return shape_.Mutable(index);
}
inline ::lapis::DataSourceProto_Shape* DataSourceProto::add_shape() {
  // @@protoc_insertion_point(field_add:lapis.DataSourceProto.shape)
  return shape_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lapis::DataSourceProto_Shape >&
DataSourceProto::shape() const {
  // @@protoc_insertion_point(field_list:lapis.DataSourceProto.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedPtrField< ::lapis::DataSourceProto_Shape >*
DataSourceProto::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:lapis.DataSourceProto.shape)
  return &shape_;
}

// optional int32 size = 6;
inline bool DataSourceProto::has_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataSourceProto::set_has_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataSourceProto::clear_has_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataSourceProto::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 DataSourceProto::size() const {
  // @@protoc_insertion_point(field_get:lapis.DataSourceProto.size)
  return size_;
}
inline void DataSourceProto::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:lapis.DataSourceProto.size)
}

// optional int32 offset = 9 [default = 0];
inline bool DataSourceProto::has_offset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataSourceProto::set_has_offset() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataSourceProto::clear_has_offset() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataSourceProto::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 DataSourceProto::offset() const {
  // @@protoc_insertion_point(field_get:lapis.DataSourceProto.offset)
  return offset_;
}
inline void DataSourceProto::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:lapis.DataSourceProto.offset)
}

// optional string mean_file = 10;
inline bool DataSourceProto::has_mean_file() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DataSourceProto::set_has_mean_file() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DataSourceProto::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DataSourceProto::clear_mean_file() {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_->clear();
  }
  clear_has_mean_file();
}
inline const ::std::string& DataSourceProto::mean_file() const {
  // @@protoc_insertion_point(field_get:lapis.DataSourceProto.mean_file)
  return *mean_file_;
}
inline void DataSourceProto::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.DataSourceProto.mean_file)
}
inline void DataSourceProto::set_mean_file(const char* value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.DataSourceProto.mean_file)
}
inline void DataSourceProto::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.DataSourceProto.mean_file)
}
inline ::std::string* DataSourceProto::mutable_mean_file() {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lapis.DataSourceProto.mean_file)
  return mean_file_;
}
inline ::std::string* DataSourceProto::release_mean_file() {
  clear_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mean_file_;
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataSourceProto::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mean_file_;
  }
  if (mean_file) {
    set_has_mean_file();
    mean_file_ = mean_file;
  } else {
    clear_has_mean_file();
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.DataSourceProto.mean_file)
}

// optional bool shuffle = 11 [default = true];
inline bool DataSourceProto::has_shuffle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DataSourceProto::set_has_shuffle() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DataSourceProto::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DataSourceProto::clear_shuffle() {
  shuffle_ = true;
  clear_has_shuffle();
}
inline bool DataSourceProto::shuffle() const {
  // @@protoc_insertion_point(field_get:lapis.DataSourceProto.shuffle)
  return shuffle_;
}
inline void DataSourceProto::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:lapis.DataSourceProto.shuffle)
}

// -------------------------------------------------------------------

// ParamProto

// required string name = 1;
inline bool ParamProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamProto::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ParamProto::name() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.name)
  return *name_;
}
inline void ParamProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.ParamProto.name)
}
inline void ParamProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.ParamProto.name)
}
inline void ParamProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.ParamProto.name)
}
inline ::std::string* ParamProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lapis.ParamProto.name)
  return name_;
}
inline ::std::string* ParamProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParamProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.ParamProto.name)
}

// repeated int32 shape = 2;
inline int ParamProto::shape_size() const {
  return shape_.size();
}
inline void ParamProto::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int32 ParamProto::shape(int index) const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.shape)
  return shape_.Get(index);
}
inline void ParamProto::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:lapis.ParamProto.shape)
}
inline void ParamProto::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:lapis.ParamProto.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ParamProto::shape() const {
  // @@protoc_insertion_point(field_list:lapis.ParamProto.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ParamProto::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:lapis.ParamProto.shape)
  return &shape_;
}

// optional .lapis.ParamProto.InitMethod init_method = 3 [default = kConstant];
inline bool ParamProto::has_init_method() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParamProto::set_has_init_method() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParamProto::clear_has_init_method() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParamProto::clear_init_method() {
  init_method_ = 0;
  clear_has_init_method();
}
inline ::lapis::ParamProto_InitMethod ParamProto::init_method() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.init_method)
  return static_cast< ::lapis::ParamProto_InitMethod >(init_method_);
}
inline void ParamProto::set_init_method(::lapis::ParamProto_InitMethod value) {
  assert(::lapis::ParamProto_InitMethod_IsValid(value));
  set_has_init_method();
  init_method_ = value;
  // @@protoc_insertion_point(field_set:lapis.ParamProto.init_method)
}

// optional float value = 4 [default = 1];
inline bool ParamProto::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParamProto::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParamProto::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParamProto::clear_value() {
  value_ = 1;
  clear_has_value();
}
inline float ParamProto::value() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.value)
  return value_;
}
inline void ParamProto::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:lapis.ParamProto.value)
}

// optional float low = 5 [default = -1];
inline bool ParamProto::has_low() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParamProto::set_has_low() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParamProto::clear_has_low() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParamProto::clear_low() {
  low_ = -1;
  clear_has_low();
}
inline float ParamProto::low() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.low)
  return low_;
}
inline void ParamProto::set_low(float value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:lapis.ParamProto.low)
}

// optional float high = 6 [default = 1];
inline bool ParamProto::has_high() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ParamProto::set_has_high() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ParamProto::clear_has_high() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ParamProto::clear_high() {
  high_ = 1;
  clear_has_high();
}
inline float ParamProto::high() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.high)
  return high_;
}
inline void ParamProto::set_high(float value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:lapis.ParamProto.high)
}

// optional float mean = 7 [default = 0];
inline bool ParamProto::has_mean() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ParamProto::set_has_mean() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ParamProto::clear_has_mean() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ParamProto::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float ParamProto::mean() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.mean)
  return mean_;
}
inline void ParamProto::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:lapis.ParamProto.mean)
}

// optional float std = 8 [default = 1];
inline bool ParamProto::has_std() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ParamProto::set_has_std() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ParamProto::clear_has_std() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ParamProto::clear_std() {
  std_ = 1;
  clear_has_std();
}
inline float ParamProto::std() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.std)
  return std_;
}
inline void ParamProto::set_std(float value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:lapis.ParamProto.std)
}

// optional float momentum_multiplier = 9 [default = 1];
inline bool ParamProto::has_momentum_multiplier() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ParamProto::set_has_momentum_multiplier() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ParamProto::clear_has_momentum_multiplier() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ParamProto::clear_momentum_multiplier() {
  momentum_multiplier_ = 1;
  clear_has_momentum_multiplier();
}
inline float ParamProto::momentum_multiplier() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.momentum_multiplier)
  return momentum_multiplier_;
}
inline void ParamProto::set_momentum_multiplier(float value) {
  set_has_momentum_multiplier();
  momentum_multiplier_ = value;
  // @@protoc_insertion_point(field_set:lapis.ParamProto.momentum_multiplier)
}

// optional float learning_rate_multiplier = 10 [default = 1];
inline bool ParamProto::has_learning_rate_multiplier() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ParamProto::set_has_learning_rate_multiplier() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ParamProto::clear_has_learning_rate_multiplier() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ParamProto::clear_learning_rate_multiplier() {
  learning_rate_multiplier_ = 1;
  clear_has_learning_rate_multiplier();
}
inline float ParamProto::learning_rate_multiplier() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.learning_rate_multiplier)
  return learning_rate_multiplier_;
}
inline void ParamProto::set_learning_rate_multiplier(float value) {
  set_has_learning_rate_multiplier();
  learning_rate_multiplier_ = value;
  // @@protoc_insertion_point(field_set:lapis.ParamProto.learning_rate_multiplier)
}

// optional float weight_decay_multiplier = 11 [default = 1];
inline bool ParamProto::has_weight_decay_multiplier() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ParamProto::set_has_weight_decay_multiplier() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ParamProto::clear_has_weight_decay_multiplier() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ParamProto::clear_weight_decay_multiplier() {
  weight_decay_multiplier_ = 1;
  clear_has_weight_decay_multiplier();
}
inline float ParamProto::weight_decay_multiplier() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.weight_decay_multiplier)
  return weight_decay_multiplier_;
}
inline void ParamProto::set_weight_decay_multiplier(float value) {
  set_has_weight_decay_multiplier();
  weight_decay_multiplier_ = value;
  // @@protoc_insertion_point(field_set:lapis.ParamProto.weight_decay_multiplier)
}

// optional .lapis.DAryProto data = 13;
inline bool ParamProto::has_data() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ParamProto::set_has_data() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ParamProto::clear_has_data() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ParamProto::clear_data() {
  if (data_ != NULL) data_->::lapis::DAryProto::Clear();
  clear_has_data();
}
inline const ::lapis::DAryProto& ParamProto::data() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::lapis::DAryProto* ParamProto::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::lapis::DAryProto;
  // @@protoc_insertion_point(field_mutable:lapis.ParamProto.data)
  return data_;
}
inline ::lapis::DAryProto* ParamProto::release_data() {
  clear_has_data();
  ::lapis::DAryProto* temp = data_;
  data_ = NULL;
  return temp;
}
inline void ParamProto::set_allocated_data(::lapis::DAryProto* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.ParamProto.data)
}

// optional .lapis.DAryProto grad = 14;
inline bool ParamProto::has_grad() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ParamProto::set_has_grad() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ParamProto::clear_has_grad() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ParamProto::clear_grad() {
  if (grad_ != NULL) grad_->::lapis::DAryProto::Clear();
  clear_has_grad();
}
inline const ::lapis::DAryProto& ParamProto::grad() const {
  // @@protoc_insertion_point(field_get:lapis.ParamProto.grad)
  return grad_ != NULL ? *grad_ : *default_instance_->grad_;
}
inline ::lapis::DAryProto* ParamProto::mutable_grad() {
  set_has_grad();
  if (grad_ == NULL) grad_ = new ::lapis::DAryProto;
  // @@protoc_insertion_point(field_mutable:lapis.ParamProto.grad)
  return grad_;
}
inline ::lapis::DAryProto* ParamProto::release_grad() {
  clear_has_grad();
  ::lapis::DAryProto* temp = grad_;
  grad_ = NULL;
  return temp;
}
inline void ParamProto::set_allocated_grad(::lapis::DAryProto* grad) {
  delete grad_;
  grad_ = grad;
  if (grad) {
    set_has_grad();
  } else {
    clear_has_grad();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.ParamProto.grad)
}

// -------------------------------------------------------------------

// LayerProto

// required string name = 1;
inline bool LayerProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerProto::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LayerProto::name() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.name)
  return *name_;
}
inline void LayerProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.LayerProto.name)
}
inline void LayerProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.LayerProto.name)
}
inline void LayerProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.LayerProto.name)
}
inline ::std::string* LayerProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lapis.LayerProto.name)
  return name_;
}
inline ::std::string* LayerProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.LayerProto.name)
}

// required string type = 2;
inline bool LayerProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerProto::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& LayerProto::type() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.type)
  return *type_;
}
inline void LayerProto::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.LayerProto.type)
}
inline void LayerProto::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.LayerProto.type)
}
inline void LayerProto::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.LayerProto.type)
}
inline ::std::string* LayerProto::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lapis.LayerProto.type)
  return type_;
}
inline ::std::string* LayerProto::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerProto::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.LayerProto.type)
}

// optional int32 num_output = 3;
inline bool LayerProto::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LayerProto::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LayerProto::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LayerProto::clear_num_output() {
  num_output_ = 0;
  clear_has_num_output();
}
inline ::google::protobuf::int32 LayerProto::num_output() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.num_output)
  return num_output_;
}
inline void LayerProto::set_num_output(::google::protobuf::int32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.num_output)
}

// repeated .lapis.ParamProto param = 4;
inline int LayerProto::param_size() const {
  return param_.size();
}
inline void LayerProto::clear_param() {
  param_.Clear();
}
inline const ::lapis::ParamProto& LayerProto::param(int index) const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.param)
  return param_.Get(index);
}
inline ::lapis::ParamProto* LayerProto::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:lapis.LayerProto.param)
  return param_.Mutable(index);
}
inline ::lapis::ParamProto* LayerProto::add_param() {
  // @@protoc_insertion_point(field_add:lapis.LayerProto.param)
  return param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lapis::ParamProto >&
LayerProto::param() const {
  // @@protoc_insertion_point(field_list:lapis.LayerProto.param)
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::lapis::ParamProto >*
LayerProto::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:lapis.LayerProto.param)
  return &param_;
}

// optional int32 window_size = 8;
inline bool LayerProto::has_window_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayerProto::set_has_window_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayerProto::clear_has_window_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayerProto::clear_window_size() {
  window_size_ = 0;
  clear_has_window_size();
}
inline ::google::protobuf::int32 LayerProto::window_size() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.window_size)
  return window_size_;
}
inline void LayerProto::set_window_size(::google::protobuf::int32 value) {
  set_has_window_size();
  window_size_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.window_size)
}

// optional int32 stride = 9 [default = 1];
inline bool LayerProto::has_stride() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LayerProto::set_has_stride() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LayerProto::clear_has_stride() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LayerProto::clear_stride() {
  stride_ = 1;
  clear_has_stride();
}
inline ::google::protobuf::int32 LayerProto::stride() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.stride)
  return stride_;
}
inline void LayerProto::set_stride(::google::protobuf::int32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.stride)
}

// optional int32 pad = 10 [default = 0];
inline bool LayerProto::has_pad() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LayerProto::set_has_pad() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LayerProto::clear_has_pad() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LayerProto::clear_pad() {
  pad_ = 0;
  clear_has_pad();
}
inline ::google::protobuf::int32 LayerProto::pad() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.pad)
  return pad_;
}
inline void LayerProto::set_pad(::google::protobuf::int32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.pad)
}

// optional int32 num_groups = 11 [default = 1];
inline bool LayerProto::has_num_groups() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LayerProto::set_has_num_groups() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LayerProto::clear_has_num_groups() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LayerProto::clear_num_groups() {
  num_groups_ = 1;
  clear_has_num_groups();
}
inline ::google::protobuf::int32 LayerProto::num_groups() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.num_groups)
  return num_groups_;
}
inline void LayerProto::set_num_groups(::google::protobuf::int32 value) {
  set_has_num_groups();
  num_groups_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.num_groups)
}

// optional float alpha = 12;
inline bool LayerProto::has_alpha() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LayerProto::set_has_alpha() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LayerProto::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LayerProto::clear_alpha() {
  alpha_ = 0;
  clear_has_alpha();
}
inline float LayerProto::alpha() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.alpha)
  return alpha_;
}
inline void LayerProto::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.alpha)
}

// optional float beta = 13;
inline bool LayerProto::has_beta() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LayerProto::set_has_beta() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LayerProto::clear_has_beta() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LayerProto::clear_beta() {
  beta_ = 0;
  clear_has_beta();
}
inline float LayerProto::beta() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.beta)
  return beta_;
}
inline void LayerProto::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.beta)
}

// optional float knorm = 14 [default = 1];
inline bool LayerProto::has_knorm() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LayerProto::set_has_knorm() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LayerProto::clear_has_knorm() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LayerProto::clear_knorm() {
  knorm_ = 1;
  clear_has_knorm();
}
inline float LayerProto::knorm() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.knorm)
  return knorm_;
}
inline void LayerProto::set_knorm(float value) {
  set_has_knorm();
  knorm_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.knorm)
}

// optional .lapis.LayerProto.PoolingMethod pooling_method = 16;
inline bool LayerProto::has_pooling_method() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LayerProto::set_has_pooling_method() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LayerProto::clear_has_pooling_method() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LayerProto::clear_pooling_method() {
  pooling_method_ = 1;
  clear_has_pooling_method();
}
inline ::lapis::LayerProto_PoolingMethod LayerProto::pooling_method() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.pooling_method)
  return static_cast< ::lapis::LayerProto_PoolingMethod >(pooling_method_);
}
inline void LayerProto::set_pooling_method(::lapis::LayerProto_PoolingMethod value) {
  assert(::lapis::LayerProto_PoolingMethod_IsValid(value));
  set_has_pooling_method();
  pooling_method_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.pooling_method)
}

// optional int32 cropsize = 17;
inline bool LayerProto::has_cropsize() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LayerProto::set_has_cropsize() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LayerProto::clear_has_cropsize() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LayerProto::clear_cropsize() {
  cropsize_ = 0;
  clear_has_cropsize();
}
inline ::google::protobuf::int32 LayerProto::cropsize() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.cropsize)
  return cropsize_;
}
inline void LayerProto::set_cropsize(::google::protobuf::int32 value) {
  set_has_cropsize();
  cropsize_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.cropsize)
}

// optional bool mirror = 18;
inline bool LayerProto::has_mirror() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LayerProto::set_has_mirror() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LayerProto::clear_has_mirror() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LayerProto::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool LayerProto::mirror() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.mirror)
  return mirror_;
}
inline void LayerProto::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.mirror)
}

// optional float drop_prob = 19 [default = 0];
inline bool LayerProto::has_drop_prob() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LayerProto::set_has_drop_prob() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LayerProto::clear_has_drop_prob() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LayerProto::clear_drop_prob() {
  drop_prob_ = 0;
  clear_has_drop_prob();
}
inline float LayerProto::drop_prob() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.drop_prob)
  return drop_prob_;
}
inline void LayerProto::set_drop_prob(float value) {
  set_has_drop_prob();
  drop_prob_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.drop_prob)
}

// optional .lapis.DAryProto data = 20;
inline bool LayerProto::has_data() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LayerProto::set_has_data() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LayerProto::clear_has_data() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LayerProto::clear_data() {
  if (data_ != NULL) data_->::lapis::DAryProto::Clear();
  clear_has_data();
}
inline const ::lapis::DAryProto& LayerProto::data() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::lapis::DAryProto* LayerProto::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::lapis::DAryProto;
  // @@protoc_insertion_point(field_mutable:lapis.LayerProto.data)
  return data_;
}
inline ::lapis::DAryProto* LayerProto::release_data() {
  clear_has_data();
  ::lapis::DAryProto* temp = data_;
  data_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_data(::lapis::DAryProto* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.LayerProto.data)
}

// optional .lapis.DAryProto grad = 21;
inline bool LayerProto::has_grad() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LayerProto::set_has_grad() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LayerProto::clear_has_grad() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LayerProto::clear_grad() {
  if (grad_ != NULL) grad_->::lapis::DAryProto::Clear();
  clear_has_grad();
}
inline const ::lapis::DAryProto& LayerProto::grad() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.grad)
  return grad_ != NULL ? *grad_ : *default_instance_->grad_;
}
inline ::lapis::DAryProto* LayerProto::mutable_grad() {
  set_has_grad();
  if (grad_ == NULL) grad_ = new ::lapis::DAryProto;
  // @@protoc_insertion_point(field_mutable:lapis.LayerProto.grad)
  return grad_;
}
inline ::lapis::DAryProto* LayerProto::release_grad() {
  clear_has_grad();
  ::lapis::DAryProto* temp = grad_;
  grad_ = NULL;
  return temp;
}
inline void LayerProto::set_allocated_grad(::lapis::DAryProto* grad) {
  delete grad_;
  grad_ = grad;
  if (grad) {
    set_has_grad();
  } else {
    clear_has_grad();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.LayerProto.grad)
}

// optional int32 topk = 23;
inline bool LayerProto::has_topk() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LayerProto::set_has_topk() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LayerProto::clear_has_topk() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LayerProto::clear_topk() {
  topk_ = 0;
  clear_has_topk();
}
inline ::google::protobuf::int32 LayerProto::topk() const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.topk)
  return topk_;
}
inline void LayerProto::set_topk(::google::protobuf::int32 value) {
  set_has_topk();
  topk_ = value;
  // @@protoc_insertion_point(field_set:lapis.LayerProto.topk)
}

// repeated string top = 24;
inline int LayerProto::top_size() const {
  return top_.size();
}
inline void LayerProto::clear_top() {
  top_.Clear();
}
inline const ::std::string& LayerProto::top(int index) const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.top)
  return top_.Get(index);
}
inline ::std::string* LayerProto::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:lapis.LayerProto.top)
  return top_.Mutable(index);
}
inline void LayerProto::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lapis.LayerProto.top)
  top_.Mutable(index)->assign(value);
}
inline void LayerProto::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.LayerProto.top)
}
inline void LayerProto::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.LayerProto.top)
}
inline ::std::string* LayerProto::add_top() {
  return top_.Add();
}
inline void LayerProto::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lapis.LayerProto.top)
}
inline void LayerProto::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lapis.LayerProto.top)
}
inline void LayerProto::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lapis.LayerProto.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerProto::top() const {
  // @@protoc_insertion_point(field_list:lapis.LayerProto.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerProto::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:lapis.LayerProto.top)
  return &top_;
}

// repeated string bottom = 25;
inline int LayerProto::bottom_size() const {
  return bottom_.size();
}
inline void LayerProto::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& LayerProto::bottom(int index) const {
  // @@protoc_insertion_point(field_get:lapis.LayerProto.bottom)
  return bottom_.Get(index);
}
inline ::std::string* LayerProto::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:lapis.LayerProto.bottom)
  return bottom_.Mutable(index);
}
inline void LayerProto::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lapis.LayerProto.bottom)
  bottom_.Mutable(index)->assign(value);
}
inline void LayerProto::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.LayerProto.bottom)
}
inline void LayerProto::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.LayerProto.bottom)
}
inline ::std::string* LayerProto::add_bottom() {
  return bottom_.Add();
}
inline void LayerProto::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lapis.LayerProto.bottom)
}
inline void LayerProto::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lapis.LayerProto.bottom)
}
inline void LayerProto::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lapis.LayerProto.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerProto::bottom() const {
  // @@protoc_insertion_point(field_list:lapis.LayerProto.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerProto::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:lapis.LayerProto.bottom)
  return &bottom_;
}

// -------------------------------------------------------------------

// MeanProto

// optional int32 num = 1 [default = 0];
inline bool MeanProto::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeanProto::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MeanProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MeanProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 MeanProto::num() const {
  // @@protoc_insertion_point(field_get:lapis.MeanProto.num)
  return num_;
}
inline void MeanProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:lapis.MeanProto.num)
}

// optional int32 channels = 2 [default = 0];
inline bool MeanProto::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MeanProto::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MeanProto::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MeanProto::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 MeanProto::channels() const {
  // @@protoc_insertion_point(field_get:lapis.MeanProto.channels)
  return channels_;
}
inline void MeanProto::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:lapis.MeanProto.channels)
}

// optional int32 height = 3 [default = 0];
inline bool MeanProto::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MeanProto::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MeanProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MeanProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 MeanProto::height() const {
  // @@protoc_insertion_point(field_get:lapis.MeanProto.height)
  return height_;
}
inline void MeanProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:lapis.MeanProto.height)
}

// optional int32 width = 4 [default = 0];
inline bool MeanProto::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MeanProto::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MeanProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MeanProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 MeanProto::width() const {
  // @@protoc_insertion_point(field_get:lapis.MeanProto.width)
  return width_;
}
inline void MeanProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:lapis.MeanProto.width)
}

// repeated float data = 5 [packed = true];
inline int MeanProto::data_size() const {
  return data_.size();
}
inline void MeanProto::clear_data() {
  data_.Clear();
}
inline float MeanProto::data(int index) const {
  // @@protoc_insertion_point(field_get:lapis.MeanProto.data)
  return data_.Get(index);
}
inline void MeanProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:lapis.MeanProto.data)
}
inline void MeanProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:lapis.MeanProto.data)
}
inline const ::google::protobuf::RepeatedField< float >&
MeanProto::data() const {
  // @@protoc_insertion_point(field_list:lapis.MeanProto.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
MeanProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:lapis.MeanProto.data)
  return &data_;
}

// repeated float diff = 6 [packed = true];
inline int MeanProto::diff_size() const {
  return diff_.size();
}
inline void MeanProto::clear_diff() {
  diff_.Clear();
}
inline float MeanProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:lapis.MeanProto.diff)
  return diff_.Get(index);
}
inline void MeanProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:lapis.MeanProto.diff)
}
inline void MeanProto::add_diff(float value) {
  diff_.Add(value);
  // @@protoc_insertion_point(field_add:lapis.MeanProto.diff)
}
inline const ::google::protobuf::RepeatedField< float >&
MeanProto::diff() const {
  // @@protoc_insertion_point(field_list:lapis.MeanProto.diff)
  return diff_;
}
inline ::google::protobuf::RepeatedField< float >*
MeanProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:lapis.MeanProto.diff)
  return &diff_;
}

// -------------------------------------------------------------------

// DAryProto

// repeated int32 shape = 1;
inline int DAryProto::shape_size() const {
  return shape_.size();
}
inline void DAryProto::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int32 DAryProto::shape(int index) const {
  // @@protoc_insertion_point(field_get:lapis.DAryProto.shape)
  return shape_.Get(index);
}
inline void DAryProto::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:lapis.DAryProto.shape)
}
inline void DAryProto::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:lapis.DAryProto.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DAryProto::shape() const {
  // @@protoc_insertion_point(field_list:lapis.DAryProto.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DAryProto::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:lapis.DAryProto.shape)
  return &shape_;
}

// repeated int32 range_start = 2;
inline int DAryProto::range_start_size() const {
  return range_start_.size();
}
inline void DAryProto::clear_range_start() {
  range_start_.Clear();
}
inline ::google::protobuf::int32 DAryProto::range_start(int index) const {
  // @@protoc_insertion_point(field_get:lapis.DAryProto.range_start)
  return range_start_.Get(index);
}
inline void DAryProto::set_range_start(int index, ::google::protobuf::int32 value) {
  range_start_.Set(index, value);
  // @@protoc_insertion_point(field_set:lapis.DAryProto.range_start)
}
inline void DAryProto::add_range_start(::google::protobuf::int32 value) {
  range_start_.Add(value);
  // @@protoc_insertion_point(field_add:lapis.DAryProto.range_start)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DAryProto::range_start() const {
  // @@protoc_insertion_point(field_list:lapis.DAryProto.range_start)
  return range_start_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DAryProto::mutable_range_start() {
  // @@protoc_insertion_point(field_mutable_list:lapis.DAryProto.range_start)
  return &range_start_;
}

// repeated int32 range_end = 3;
inline int DAryProto::range_end_size() const {
  return range_end_.size();
}
inline void DAryProto::clear_range_end() {
  range_end_.Clear();
}
inline ::google::protobuf::int32 DAryProto::range_end(int index) const {
  // @@protoc_insertion_point(field_get:lapis.DAryProto.range_end)
  return range_end_.Get(index);
}
inline void DAryProto::set_range_end(int index, ::google::protobuf::int32 value) {
  range_end_.Set(index, value);
  // @@protoc_insertion_point(field_set:lapis.DAryProto.range_end)
}
inline void DAryProto::add_range_end(::google::protobuf::int32 value) {
  range_end_.Add(value);
  // @@protoc_insertion_point(field_add:lapis.DAryProto.range_end)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DAryProto::range_end() const {
  // @@protoc_insertion_point(field_list:lapis.DAryProto.range_end)
  return range_end_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DAryProto::mutable_range_end() {
  // @@protoc_insertion_point(field_mutable_list:lapis.DAryProto.range_end)
  return &range_end_;
}

// repeated float value = 4 [packed = true];
inline int DAryProto::value_size() const {
  return value_.size();
}
inline void DAryProto::clear_value() {
  value_.Clear();
}
inline float DAryProto::value(int index) const {
  // @@protoc_insertion_point(field_get:lapis.DAryProto.value)
  return value_.Get(index);
}
inline void DAryProto::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:lapis.DAryProto.value)
}
inline void DAryProto::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:lapis.DAryProto.value)
}
inline const ::google::protobuf::RepeatedField< float >&
DAryProto::value() const {
  // @@protoc_insertion_point(field_list:lapis.DAryProto.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
DAryProto::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:lapis.DAryProto.value)
  return &value_;
}

// -------------------------------------------------------------------

// NetProto

// repeated .lapis.LayerProto layer = 1;
inline int NetProto::layer_size() const {
  return layer_.size();
}
inline void NetProto::clear_layer() {
  layer_.Clear();
}
inline const ::lapis::LayerProto& NetProto::layer(int index) const {
  // @@protoc_insertion_point(field_get:lapis.NetProto.layer)
  return layer_.Get(index);
}
inline ::lapis::LayerProto* NetProto::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:lapis.NetProto.layer)
  return layer_.Mutable(index);
}
inline ::lapis::LayerProto* NetProto::add_layer() {
  // @@protoc_insertion_point(field_add:lapis.NetProto.layer)
  return layer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lapis::LayerProto >&
NetProto::layer() const {
  // @@protoc_insertion_point(field_list:lapis.NetProto.layer)
  return layer_;
}
inline ::google::protobuf::RepeatedPtrField< ::lapis::LayerProto >*
NetProto::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:lapis.NetProto.layer)
  return &layer_;
}

// -------------------------------------------------------------------

// PerformanceProto

// optional float precision = 1;
inline bool PerformanceProto::has_precision() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerformanceProto::set_has_precision() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PerformanceProto::clear_has_precision() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PerformanceProto::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
inline float PerformanceProto::precision() const {
  // @@protoc_insertion_point(field_get:lapis.PerformanceProto.precision)
  return precision_;
}
inline void PerformanceProto::set_precision(float value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:lapis.PerformanceProto.precision)
}

// optional float loss = 2;
inline bool PerformanceProto::has_loss() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerformanceProto::set_has_loss() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PerformanceProto::clear_has_loss() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PerformanceProto::clear_loss() {
  loss_ = 0;
  clear_has_loss();
}
inline float PerformanceProto::loss() const {
  // @@protoc_insertion_point(field_get:lapis.PerformanceProto.loss)
  return loss_;
}
inline void PerformanceProto::set_loss(float value) {
  set_has_loss();
  loss_ = value;
  // @@protoc_insertion_point(field_set:lapis.PerformanceProto.loss)
}

// optional int32 count = 3;
inline bool PerformanceProto::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerformanceProto::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PerformanceProto::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PerformanceProto::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 PerformanceProto::count() const {
  // @@protoc_insertion_point(field_get:lapis.PerformanceProto.count)
  return count_;
}
inline void PerformanceProto::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:lapis.PerformanceProto.count)
}

// optional int32 step = 4;
inline bool PerformanceProto::has_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerformanceProto::set_has_step() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PerformanceProto::clear_has_step() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PerformanceProto::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::google::protobuf::int32 PerformanceProto::step() const {
  // @@protoc_insertion_point(field_get:lapis.PerformanceProto.step)
  return step_;
}
inline void PerformanceProto::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:lapis.PerformanceProto.step)
}

// -------------------------------------------------------------------

// SolverProto

// optional .lapis.SolverProto.Method method = 1 [default = kSGD];
inline bool SolverProto::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverProto::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverProto::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverProto::clear_method() {
  method_ = 1;
  clear_has_method();
}
inline ::lapis::SolverProto_Method SolverProto::method() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.method)
  return static_cast< ::lapis::SolverProto_Method >(method_);
}
inline void SolverProto::set_method(::lapis::SolverProto_Method value) {
  assert(::lapis::SolverProto_Method_IsValid(value));
  set_has_method();
  method_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.method)
}

// optional int32 checkpoint_after_steps = 2 [default = 0];
inline bool SolverProto::has_checkpoint_after_steps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverProto::set_has_checkpoint_after_steps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverProto::clear_has_checkpoint_after_steps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverProto::clear_checkpoint_after_steps() {
  checkpoint_after_steps_ = 0;
  clear_has_checkpoint_after_steps();
}
inline ::google::protobuf::int32 SolverProto::checkpoint_after_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.checkpoint_after_steps)
  return checkpoint_after_steps_;
}
inline void SolverProto::set_checkpoint_after_steps(::google::protobuf::int32 value) {
  set_has_checkpoint_after_steps();
  checkpoint_after_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.checkpoint_after_steps)
}

// optional int32 checkpoint_every_steps = 3 [default = 0];
inline bool SolverProto::has_checkpoint_every_steps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolverProto::set_has_checkpoint_every_steps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolverProto::clear_has_checkpoint_every_steps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolverProto::clear_checkpoint_every_steps() {
  checkpoint_every_steps_ = 0;
  clear_has_checkpoint_every_steps();
}
inline ::google::protobuf::int32 SolverProto::checkpoint_every_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.checkpoint_every_steps)
  return checkpoint_every_steps_;
}
inline void SolverProto::set_checkpoint_every_steps(::google::protobuf::int32 value) {
  set_has_checkpoint_every_steps();
  checkpoint_every_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.checkpoint_every_steps)
}

// optional string checkpoint_prefix = 4 [default = "tmp/checkpoint"];
inline bool SolverProto::has_checkpoint_prefix() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolverProto::set_has_checkpoint_prefix() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolverProto::clear_has_checkpoint_prefix() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolverProto::clear_checkpoint_prefix() {
  if (checkpoint_prefix_ != _default_checkpoint_prefix_) {
    checkpoint_prefix_->assign(*_default_checkpoint_prefix_);
  }
  clear_has_checkpoint_prefix();
}
inline const ::std::string& SolverProto::checkpoint_prefix() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.checkpoint_prefix)
  return *checkpoint_prefix_;
}
inline void SolverProto::set_checkpoint_prefix(const ::std::string& value) {
  set_has_checkpoint_prefix();
  if (checkpoint_prefix_ == _default_checkpoint_prefix_) {
    checkpoint_prefix_ = new ::std::string;
  }
  checkpoint_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.SolverProto.checkpoint_prefix)
}
inline void SolverProto::set_checkpoint_prefix(const char* value) {
  set_has_checkpoint_prefix();
  if (checkpoint_prefix_ == _default_checkpoint_prefix_) {
    checkpoint_prefix_ = new ::std::string;
  }
  checkpoint_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.SolverProto.checkpoint_prefix)
}
inline void SolverProto::set_checkpoint_prefix(const char* value, size_t size) {
  set_has_checkpoint_prefix();
  if (checkpoint_prefix_ == _default_checkpoint_prefix_) {
    checkpoint_prefix_ = new ::std::string;
  }
  checkpoint_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.SolverProto.checkpoint_prefix)
}
inline ::std::string* SolverProto::mutable_checkpoint_prefix() {
  set_has_checkpoint_prefix();
  if (checkpoint_prefix_ == _default_checkpoint_prefix_) {
    checkpoint_prefix_ = new ::std::string(*_default_checkpoint_prefix_);
  }
  // @@protoc_insertion_point(field_mutable:lapis.SolverProto.checkpoint_prefix)
  return checkpoint_prefix_;
}
inline ::std::string* SolverProto::release_checkpoint_prefix() {
  clear_has_checkpoint_prefix();
  if (checkpoint_prefix_ == _default_checkpoint_prefix_) {
    return NULL;
  } else {
    ::std::string* temp = checkpoint_prefix_;
    checkpoint_prefix_ = const_cast< ::std::string*>(_default_checkpoint_prefix_);
    return temp;
  }
}
inline void SolverProto::set_allocated_checkpoint_prefix(::std::string* checkpoint_prefix) {
  if (checkpoint_prefix_ != _default_checkpoint_prefix_) {
    delete checkpoint_prefix_;
  }
  if (checkpoint_prefix) {
    set_has_checkpoint_prefix();
    checkpoint_prefix_ = checkpoint_prefix;
  } else {
    clear_has_checkpoint_prefix();
    checkpoint_prefix_ = const_cast< ::std::string*>(_default_checkpoint_prefix_);
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.SolverProto.checkpoint_prefix)
}

// optional int32 checkpoint_step = 5 [default = 0];
inline bool SolverProto::has_checkpoint_step() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SolverProto::set_has_checkpoint_step() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SolverProto::clear_has_checkpoint_step() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SolverProto::clear_checkpoint_step() {
  checkpoint_step_ = 0;
  clear_has_checkpoint_step();
}
inline ::google::protobuf::int32 SolverProto::checkpoint_step() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.checkpoint_step)
  return checkpoint_step_;
}
inline void SolverProto::set_checkpoint_step(::google::protobuf::int32 value) {
  set_has_checkpoint_step();
  checkpoint_step_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.checkpoint_step)
}

// optional int32 display_after_steps = 6 [default = 0];
inline bool SolverProto::has_display_after_steps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SolverProto::set_has_display_after_steps() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SolverProto::clear_has_display_after_steps() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SolverProto::clear_display_after_steps() {
  display_after_steps_ = 0;
  clear_has_display_after_steps();
}
inline ::google::protobuf::int32 SolverProto::display_after_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.display_after_steps)
  return display_after_steps_;
}
inline void SolverProto::set_display_after_steps(::google::protobuf::int32 value) {
  set_has_display_after_steps();
  display_after_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.display_after_steps)
}

// optional int32 display_every_steps = 7 [default = 0];
inline bool SolverProto::has_display_every_steps() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SolverProto::set_has_display_every_steps() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SolverProto::clear_has_display_every_steps() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SolverProto::clear_display_every_steps() {
  display_every_steps_ = 0;
  clear_has_display_every_steps();
}
inline ::google::protobuf::int32 SolverProto::display_every_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.display_every_steps)
  return display_every_steps_;
}
inline void SolverProto::set_display_every_steps(::google::protobuf::int32 value) {
  set_has_display_every_steps();
  display_every_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.display_every_steps)
}

// optional string display_prefix = 8 [default = "tmp/display"];
inline bool SolverProto::has_display_prefix() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SolverProto::set_has_display_prefix() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SolverProto::clear_has_display_prefix() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SolverProto::clear_display_prefix() {
  if (display_prefix_ != _default_display_prefix_) {
    display_prefix_->assign(*_default_display_prefix_);
  }
  clear_has_display_prefix();
}
inline const ::std::string& SolverProto::display_prefix() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.display_prefix)
  return *display_prefix_;
}
inline void SolverProto::set_display_prefix(const ::std::string& value) {
  set_has_display_prefix();
  if (display_prefix_ == _default_display_prefix_) {
    display_prefix_ = new ::std::string;
  }
  display_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.SolverProto.display_prefix)
}
inline void SolverProto::set_display_prefix(const char* value) {
  set_has_display_prefix();
  if (display_prefix_ == _default_display_prefix_) {
    display_prefix_ = new ::std::string;
  }
  display_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.SolverProto.display_prefix)
}
inline void SolverProto::set_display_prefix(const char* value, size_t size) {
  set_has_display_prefix();
  if (display_prefix_ == _default_display_prefix_) {
    display_prefix_ = new ::std::string;
  }
  display_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.SolverProto.display_prefix)
}
inline ::std::string* SolverProto::mutable_display_prefix() {
  set_has_display_prefix();
  if (display_prefix_ == _default_display_prefix_) {
    display_prefix_ = new ::std::string(*_default_display_prefix_);
  }
  // @@protoc_insertion_point(field_mutable:lapis.SolverProto.display_prefix)
  return display_prefix_;
}
inline ::std::string* SolverProto::release_display_prefix() {
  clear_has_display_prefix();
  if (display_prefix_ == _default_display_prefix_) {
    return NULL;
  } else {
    ::std::string* temp = display_prefix_;
    display_prefix_ = const_cast< ::std::string*>(_default_display_prefix_);
    return temp;
  }
}
inline void SolverProto::set_allocated_display_prefix(::std::string* display_prefix) {
  if (display_prefix_ != _default_display_prefix_) {
    delete display_prefix_;
  }
  if (display_prefix) {
    set_has_display_prefix();
    display_prefix_ = display_prefix;
  } else {
    clear_has_display_prefix();
    display_prefix_ = const_cast< ::std::string*>(_default_display_prefix_);
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.SolverProto.display_prefix)
}

// optional int32 validation_step = 9 [default = 0];
inline bool SolverProto::has_validation_step() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SolverProto::set_has_validation_step() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SolverProto::clear_has_validation_step() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SolverProto::clear_validation_step() {
  validation_step_ = 0;
  clear_has_validation_step();
}
inline ::google::protobuf::int32 SolverProto::validation_step() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.validation_step)
  return validation_step_;
}
inline void SolverProto::set_validation_step(::google::protobuf::int32 value) {
  set_has_validation_step();
  validation_step_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.validation_step)
}

// optional int32 validation_after_steps = 10 [default = 0];
inline bool SolverProto::has_validation_after_steps() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SolverProto::set_has_validation_after_steps() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SolverProto::clear_has_validation_after_steps() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SolverProto::clear_validation_after_steps() {
  validation_after_steps_ = 0;
  clear_has_validation_after_steps();
}
inline ::google::protobuf::int32 SolverProto::validation_after_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.validation_after_steps)
  return validation_after_steps_;
}
inline void SolverProto::set_validation_after_steps(::google::protobuf::int32 value) {
  set_has_validation_after_steps();
  validation_after_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.validation_after_steps)
}

// optional int32 validation_every_steps = 11 [default = 0];
inline bool SolverProto::has_validation_every_steps() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SolverProto::set_has_validation_every_steps() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SolverProto::clear_has_validation_every_steps() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SolverProto::clear_validation_every_steps() {
  validation_every_steps_ = 0;
  clear_has_validation_every_steps();
}
inline ::google::protobuf::int32 SolverProto::validation_every_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.validation_every_steps)
  return validation_every_steps_;
}
inline void SolverProto::set_validation_every_steps(::google::protobuf::int32 value) {
  set_has_validation_every_steps();
  validation_every_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.validation_every_steps)
}

// optional string perf_prefix = 12 [default = "tmp/performance"];
inline bool SolverProto::has_perf_prefix() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SolverProto::set_has_perf_prefix() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SolverProto::clear_has_perf_prefix() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SolverProto::clear_perf_prefix() {
  if (perf_prefix_ != _default_perf_prefix_) {
    perf_prefix_->assign(*_default_perf_prefix_);
  }
  clear_has_perf_prefix();
}
inline const ::std::string& SolverProto::perf_prefix() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.perf_prefix)
  return *perf_prefix_;
}
inline void SolverProto::set_perf_prefix(const ::std::string& value) {
  set_has_perf_prefix();
  if (perf_prefix_ == _default_perf_prefix_) {
    perf_prefix_ = new ::std::string;
  }
  perf_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.SolverProto.perf_prefix)
}
inline void SolverProto::set_perf_prefix(const char* value) {
  set_has_perf_prefix();
  if (perf_prefix_ == _default_perf_prefix_) {
    perf_prefix_ = new ::std::string;
  }
  perf_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.SolverProto.perf_prefix)
}
inline void SolverProto::set_perf_prefix(const char* value, size_t size) {
  set_has_perf_prefix();
  if (perf_prefix_ == _default_perf_prefix_) {
    perf_prefix_ = new ::std::string;
  }
  perf_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.SolverProto.perf_prefix)
}
inline ::std::string* SolverProto::mutable_perf_prefix() {
  set_has_perf_prefix();
  if (perf_prefix_ == _default_perf_prefix_) {
    perf_prefix_ = new ::std::string(*_default_perf_prefix_);
  }
  // @@protoc_insertion_point(field_mutable:lapis.SolverProto.perf_prefix)
  return perf_prefix_;
}
inline ::std::string* SolverProto::release_perf_prefix() {
  clear_has_perf_prefix();
  if (perf_prefix_ == _default_perf_prefix_) {
    return NULL;
  } else {
    ::std::string* temp = perf_prefix_;
    perf_prefix_ = const_cast< ::std::string*>(_default_perf_prefix_);
    return temp;
  }
}
inline void SolverProto::set_allocated_perf_prefix(::std::string* perf_prefix) {
  if (perf_prefix_ != _default_perf_prefix_) {
    delete perf_prefix_;
  }
  if (perf_prefix) {
    set_has_perf_prefix();
    perf_prefix_ = perf_prefix;
  } else {
    clear_has_perf_prefix();
    perf_prefix_ = const_cast< ::std::string*>(_default_perf_prefix_);
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.SolverProto.perf_prefix)
}

// optional .lapis.SolverProto.GradAlg alg = 13 [default = kBackPropagation];
inline bool SolverProto::has_alg() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SolverProto::set_has_alg() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SolverProto::clear_has_alg() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SolverProto::clear_alg() {
  alg_ = 1;
  clear_has_alg();
}
inline ::lapis::SolverProto_GradAlg SolverProto::alg() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.alg)
  return static_cast< ::lapis::SolverProto_GradAlg >(alg_);
}
inline void SolverProto::set_alg(::lapis::SolverProto_GradAlg value) {
  assert(::lapis::SolverProto_GradAlg_IsValid(value));
  set_has_alg();
  alg_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.alg)
}

// optional int32 train_batchsize = 19;
inline bool SolverProto::has_train_batchsize() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SolverProto::set_has_train_batchsize() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SolverProto::clear_has_train_batchsize() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SolverProto::clear_train_batchsize() {
  train_batchsize_ = 0;
  clear_has_train_batchsize();
}
inline ::google::protobuf::int32 SolverProto::train_batchsize() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.train_batchsize)
  return train_batchsize_;
}
inline void SolverProto::set_train_batchsize(::google::protobuf::int32 value) {
  set_has_train_batchsize();
  train_batchsize_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.train_batchsize)
}

// optional int32 train_steps = 20;
inline bool SolverProto::has_train_steps() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SolverProto::set_has_train_steps() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SolverProto::clear_has_train_steps() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SolverProto::clear_train_steps() {
  train_steps_ = 0;
  clear_has_train_steps();
}
inline ::google::protobuf::int32 SolverProto::train_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.train_steps)
  return train_steps_;
}
inline void SolverProto::set_train_steps(::google::protobuf::int32 value) {
  set_has_train_steps();
  train_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.train_steps)
}

// optional int32 validation_batchsize = 21;
inline bool SolverProto::has_validation_batchsize() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SolverProto::set_has_validation_batchsize() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SolverProto::clear_has_validation_batchsize() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SolverProto::clear_validation_batchsize() {
  validation_batchsize_ = 0;
  clear_has_validation_batchsize();
}
inline ::google::protobuf::int32 SolverProto::validation_batchsize() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.validation_batchsize)
  return validation_batchsize_;
}
inline void SolverProto::set_validation_batchsize(::google::protobuf::int32 value) {
  set_has_validation_batchsize();
  validation_batchsize_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.validation_batchsize)
}

// optional int32 validation_steps = 22;
inline bool SolverProto::has_validation_steps() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SolverProto::set_has_validation_steps() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SolverProto::clear_has_validation_steps() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SolverProto::clear_validation_steps() {
  validation_steps_ = 0;
  clear_has_validation_steps();
}
inline ::google::protobuf::int32 SolverProto::validation_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.validation_steps)
  return validation_steps_;
}
inline void SolverProto::set_validation_steps(::google::protobuf::int32 value) {
  set_has_validation_steps();
  validation_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SolverProto.validation_steps)
}

// optional .lapis.SGDValue sgd = 23;
inline bool SolverProto::has_sgd() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SolverProto::set_has_sgd() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SolverProto::clear_has_sgd() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SolverProto::clear_sgd() {
  if (sgd_ != NULL) sgd_->::lapis::SGDValue::Clear();
  clear_has_sgd();
}
inline const ::lapis::SGDValue& SolverProto::sgd() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.sgd)
  return sgd_ != NULL ? *sgd_ : *default_instance_->sgd_;
}
inline ::lapis::SGDValue* SolverProto::mutable_sgd() {
  set_has_sgd();
  if (sgd_ == NULL) sgd_ = new ::lapis::SGDValue;
  // @@protoc_insertion_point(field_mutable:lapis.SolverProto.sgd)
  return sgd_;
}
inline ::lapis::SGDValue* SolverProto::release_sgd() {
  clear_has_sgd();
  ::lapis::SGDValue* temp = sgd_;
  sgd_ = NULL;
  return temp;
}
inline void SolverProto::set_allocated_sgd(::lapis::SGDValue* sgd) {
  delete sgd_;
  sgd_ = sgd;
  if (sgd) {
    set_has_sgd();
  } else {
    clear_has_sgd();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.SolverProto.sgd)
}

// optional .lapis.AdaGradValue adagrad = 24;
inline bool SolverProto::has_adagrad() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SolverProto::set_has_adagrad() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SolverProto::clear_has_adagrad() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SolverProto::clear_adagrad() {
  if (adagrad_ != NULL) adagrad_->::lapis::AdaGradValue::Clear();
  clear_has_adagrad();
}
inline const ::lapis::AdaGradValue& SolverProto::adagrad() const {
  // @@protoc_insertion_point(field_get:lapis.SolverProto.adagrad)
  return adagrad_ != NULL ? *adagrad_ : *default_instance_->adagrad_;
}
inline ::lapis::AdaGradValue* SolverProto::mutable_adagrad() {
  set_has_adagrad();
  if (adagrad_ == NULL) adagrad_ = new ::lapis::AdaGradValue;
  // @@protoc_insertion_point(field_mutable:lapis.SolverProto.adagrad)
  return adagrad_;
}
inline ::lapis::AdaGradValue* SolverProto::release_adagrad() {
  clear_has_adagrad();
  ::lapis::AdaGradValue* temp = adagrad_;
  adagrad_ = NULL;
  return temp;
}
inline void SolverProto::set_allocated_adagrad(::lapis::AdaGradValue* adagrad) {
  delete adagrad_;
  adagrad_ = adagrad;
  if (adagrad) {
    set_has_adagrad();
  } else {
    clear_has_adagrad();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.SolverProto.adagrad)
}

// -------------------------------------------------------------------

// DataProto

// optional .lapis.DataSourceProto train_data = 1;
inline bool DataProto::has_train_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataProto::set_has_train_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataProto::clear_has_train_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataProto::clear_train_data() {
  if (train_data_ != NULL) train_data_->::lapis::DataSourceProto::Clear();
  clear_has_train_data();
}
inline const ::lapis::DataSourceProto& DataProto::train_data() const {
  // @@protoc_insertion_point(field_get:lapis.DataProto.train_data)
  return train_data_ != NULL ? *train_data_ : *default_instance_->train_data_;
}
inline ::lapis::DataSourceProto* DataProto::mutable_train_data() {
  set_has_train_data();
  if (train_data_ == NULL) train_data_ = new ::lapis::DataSourceProto;
  // @@protoc_insertion_point(field_mutable:lapis.DataProto.train_data)
  return train_data_;
}
inline ::lapis::DataSourceProto* DataProto::release_train_data() {
  clear_has_train_data();
  ::lapis::DataSourceProto* temp = train_data_;
  train_data_ = NULL;
  return temp;
}
inline void DataProto::set_allocated_train_data(::lapis::DataSourceProto* train_data) {
  delete train_data_;
  train_data_ = train_data;
  if (train_data) {
    set_has_train_data();
  } else {
    clear_has_train_data();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.DataProto.train_data)
}

// optional .lapis.DataSourceProto validation_data = 2;
inline bool DataProto::has_validation_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataProto::set_has_validation_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataProto::clear_has_validation_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataProto::clear_validation_data() {
  if (validation_data_ != NULL) validation_data_->::lapis::DataSourceProto::Clear();
  clear_has_validation_data();
}
inline const ::lapis::DataSourceProto& DataProto::validation_data() const {
  // @@protoc_insertion_point(field_get:lapis.DataProto.validation_data)
  return validation_data_ != NULL ? *validation_data_ : *default_instance_->validation_data_;
}
inline ::lapis::DataSourceProto* DataProto::mutable_validation_data() {
  set_has_validation_data();
  if (validation_data_ == NULL) validation_data_ = new ::lapis::DataSourceProto;
  // @@protoc_insertion_point(field_mutable:lapis.DataProto.validation_data)
  return validation_data_;
}
inline ::lapis::DataSourceProto* DataProto::release_validation_data() {
  clear_has_validation_data();
  ::lapis::DataSourceProto* temp = validation_data_;
  validation_data_ = NULL;
  return temp;
}
inline void DataProto::set_allocated_validation_data(::lapis::DataSourceProto* validation_data) {
  delete validation_data_;
  validation_data_ = validation_data;
  if (validation_data) {
    set_has_validation_data();
  } else {
    clear_has_validation_data();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.DataProto.validation_data)
}

// optional .lapis.DataSourceProto test_data = 3;
inline bool DataProto::has_test_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataProto::set_has_test_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataProto::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataProto::clear_test_data() {
  if (test_data_ != NULL) test_data_->::lapis::DataSourceProto::Clear();
  clear_has_test_data();
}
inline const ::lapis::DataSourceProto& DataProto::test_data() const {
  // @@protoc_insertion_point(field_get:lapis.DataProto.test_data)
  return test_data_ != NULL ? *test_data_ : *default_instance_->test_data_;
}
inline ::lapis::DataSourceProto* DataProto::mutable_test_data() {
  set_has_test_data();
  if (test_data_ == NULL) test_data_ = new ::lapis::DataSourceProto;
  // @@protoc_insertion_point(field_mutable:lapis.DataProto.test_data)
  return test_data_;
}
inline ::lapis::DataSourceProto* DataProto::release_test_data() {
  clear_has_test_data();
  ::lapis::DataSourceProto* temp = test_data_;
  test_data_ = NULL;
  return temp;
}
inline void DataProto::set_allocated_test_data(::lapis::DataSourceProto* test_data) {
  delete test_data_;
  test_data_ = test_data;
  if (test_data) {
    set_has_test_data();
  } else {
    clear_has_test_data();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.DataProto.test_data)
}

// -------------------------------------------------------------------

// ModelProto

// optional string name = 1;
inline bool ModelProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelProto::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ModelProto::name() const {
  // @@protoc_insertion_point(field_get:lapis.ModelProto.name)
  return *name_;
}
inline void ModelProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:lapis.ModelProto.name)
}
inline void ModelProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:lapis.ModelProto.name)
}
inline void ModelProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lapis.ModelProto.name)
}
inline ::std::string* ModelProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lapis.ModelProto.name)
  return name_;
}
inline ::std::string* ModelProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ModelProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.ModelProto.name)
}

// optional .lapis.NetProto net = 2;
inline bool ModelProto::has_net() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelProto::set_has_net() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelProto::clear_has_net() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelProto::clear_net() {
  if (net_ != NULL) net_->::lapis::NetProto::Clear();
  clear_has_net();
}
inline const ::lapis::NetProto& ModelProto::net() const {
  // @@protoc_insertion_point(field_get:lapis.ModelProto.net)
  return net_ != NULL ? *net_ : *default_instance_->net_;
}
inline ::lapis::NetProto* ModelProto::mutable_net() {
  set_has_net();
  if (net_ == NULL) net_ = new ::lapis::NetProto;
  // @@protoc_insertion_point(field_mutable:lapis.ModelProto.net)
  return net_;
}
inline ::lapis::NetProto* ModelProto::release_net() {
  clear_has_net();
  ::lapis::NetProto* temp = net_;
  net_ = NULL;
  return temp;
}
inline void ModelProto::set_allocated_net(::lapis::NetProto* net) {
  delete net_;
  net_ = net;
  if (net) {
    set_has_net();
  } else {
    clear_has_net();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.ModelProto.net)
}

// optional .lapis.SolverProto solver = 3;
inline bool ModelProto::has_solver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelProto::set_has_solver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelProto::clear_has_solver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelProto::clear_solver() {
  if (solver_ != NULL) solver_->::lapis::SolverProto::Clear();
  clear_has_solver();
}
inline const ::lapis::SolverProto& ModelProto::solver() const {
  // @@protoc_insertion_point(field_get:lapis.ModelProto.solver)
  return solver_ != NULL ? *solver_ : *default_instance_->solver_;
}
inline ::lapis::SolverProto* ModelProto::mutable_solver() {
  set_has_solver();
  if (solver_ == NULL) solver_ = new ::lapis::SolverProto;
  // @@protoc_insertion_point(field_mutable:lapis.ModelProto.solver)
  return solver_;
}
inline ::lapis::SolverProto* ModelProto::release_solver() {
  clear_has_solver();
  ::lapis::SolverProto* temp = solver_;
  solver_ = NULL;
  return temp;
}
inline void ModelProto::set_allocated_solver(::lapis::SolverProto* solver) {
  delete solver_;
  solver_ = solver;
  if (solver) {
    set_has_solver();
  } else {
    clear_has_solver();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.ModelProto.solver)
}

// optional .lapis.DataProto data = 4;
inline bool ModelProto::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModelProto::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModelProto::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModelProto::clear_data() {
  if (data_ != NULL) data_->::lapis::DataProto::Clear();
  clear_has_data();
}
inline const ::lapis::DataProto& ModelProto::data() const {
  // @@protoc_insertion_point(field_get:lapis.ModelProto.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::lapis::DataProto* ModelProto::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::lapis::DataProto;
  // @@protoc_insertion_point(field_mutable:lapis.ModelProto.data)
  return data_;
}
inline ::lapis::DataProto* ModelProto::release_data() {
  clear_has_data();
  ::lapis::DataProto* temp = data_;
  data_ = NULL;
  return temp;
}
inline void ModelProto::set_allocated_data(::lapis::DataProto* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.ModelProto.data)
}

// -------------------------------------------------------------------

// Record

// optional .lapis.DAryProto image = 1;
inline bool Record::has_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Record::set_has_image() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Record::clear_has_image() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Record::clear_image() {
  if (image_ != NULL) image_->::lapis::DAryProto::Clear();
  clear_has_image();
}
inline const ::lapis::DAryProto& Record::image() const {
  // @@protoc_insertion_point(field_get:lapis.Record.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::lapis::DAryProto* Record::mutable_image() {
  set_has_image();
  if (image_ == NULL) image_ = new ::lapis::DAryProto;
  // @@protoc_insertion_point(field_mutable:lapis.Record.image)
  return image_;
}
inline ::lapis::DAryProto* Record::release_image() {
  clear_has_image();
  ::lapis::DAryProto* temp = image_;
  image_ = NULL;
  return temp;
}
inline void Record::set_allocated_image(::lapis::DAryProto* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.Record.image)
}

// optional int32 label = 2;
inline bool Record::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Record::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Record::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Record::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 Record::label() const {
  // @@protoc_insertion_point(field_get:lapis.Record.label)
  return label_;
}
inline void Record::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:lapis.Record.label)
}

// -------------------------------------------------------------------

// AdaGradValue

// optional int32 n_update = 1 [default = 0];
inline bool AdaGradValue::has_n_update() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdaGradValue::set_has_n_update() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdaGradValue::clear_has_n_update() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdaGradValue::clear_n_update() {
  n_update_ = 0;
  clear_has_n_update();
}
inline ::google::protobuf::int32 AdaGradValue::n_update() const {
  // @@protoc_insertion_point(field_get:lapis.AdaGradValue.n_update)
  return n_update_;
}
inline void AdaGradValue::set_n_update(::google::protobuf::int32 value) {
  set_has_n_update();
  n_update_ = value;
  // @@protoc_insertion_point(field_set:lapis.AdaGradValue.n_update)
}

// optional int32 version = 2 [default = 0];
inline bool AdaGradValue::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdaGradValue::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdaGradValue::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdaGradValue::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 AdaGradValue::version() const {
  // @@protoc_insertion_point(field_get:lapis.AdaGradValue.version)
  return version_;
}
inline void AdaGradValue::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:lapis.AdaGradValue.version)
}

// optional .lapis.DAryProto data = 4;
inline bool AdaGradValue::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdaGradValue::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdaGradValue::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdaGradValue::clear_data() {
  if (data_ != NULL) data_->::lapis::DAryProto::Clear();
  clear_has_data();
}
inline const ::lapis::DAryProto& AdaGradValue::data() const {
  // @@protoc_insertion_point(field_get:lapis.AdaGradValue.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::lapis::DAryProto* AdaGradValue::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::lapis::DAryProto;
  // @@protoc_insertion_point(field_mutable:lapis.AdaGradValue.data)
  return data_;
}
inline ::lapis::DAryProto* AdaGradValue::release_data() {
  clear_has_data();
  ::lapis::DAryProto* temp = data_;
  data_ = NULL;
  return temp;
}
inline void AdaGradValue::set_allocated_data(::lapis::DAryProto* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.AdaGradValue.data)
}

// optional .lapis.DAryProto grad = 5;
inline bool AdaGradValue::has_grad() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdaGradValue::set_has_grad() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdaGradValue::clear_has_grad() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdaGradValue::clear_grad() {
  if (grad_ != NULL) grad_->::lapis::DAryProto::Clear();
  clear_has_grad();
}
inline const ::lapis::DAryProto& AdaGradValue::grad() const {
  // @@protoc_insertion_point(field_get:lapis.AdaGradValue.grad)
  return grad_ != NULL ? *grad_ : *default_instance_->grad_;
}
inline ::lapis::DAryProto* AdaGradValue::mutable_grad() {
  set_has_grad();
  if (grad_ == NULL) grad_ = new ::lapis::DAryProto;
  // @@protoc_insertion_point(field_mutable:lapis.AdaGradValue.grad)
  return grad_;
}
inline ::lapis::DAryProto* AdaGradValue::release_grad() {
  clear_has_grad();
  ::lapis::DAryProto* temp = grad_;
  grad_ = NULL;
  return temp;
}
inline void AdaGradValue::set_allocated_grad(::lapis::DAryProto* grad) {
  delete grad_;
  grad_ = grad;
  if (grad) {
    set_has_grad();
  } else {
    clear_has_grad();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.AdaGradValue.grad)
}

// optional float base_learning_rate = 6;
inline bool AdaGradValue::has_base_learning_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdaGradValue::set_has_base_learning_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdaGradValue::clear_has_base_learning_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdaGradValue::clear_base_learning_rate() {
  base_learning_rate_ = 0;
  clear_has_base_learning_rate();
}
inline float AdaGradValue::base_learning_rate() const {
  // @@protoc_insertion_point(field_get:lapis.AdaGradValue.base_learning_rate)
  return base_learning_rate_;
}
inline void AdaGradValue::set_base_learning_rate(float value) {
  set_has_base_learning_rate();
  base_learning_rate_ = value;
  // @@protoc_insertion_point(field_set:lapis.AdaGradValue.base_learning_rate)
}

// optional int32 threshold = 7;
inline bool AdaGradValue::has_threshold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AdaGradValue::set_has_threshold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AdaGradValue::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AdaGradValue::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline ::google::protobuf::int32 AdaGradValue::threshold() const {
  // @@protoc_insertion_point(field_get:lapis.AdaGradValue.threshold)
  return threshold_;
}
inline void AdaGradValue::set_threshold(::google::protobuf::int32 value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:lapis.AdaGradValue.threshold)
}

// -------------------------------------------------------------------

// SGDValue

// required float base_learning_rate = 1;
inline bool SGDValue::has_base_learning_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SGDValue::set_has_base_learning_rate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SGDValue::clear_has_base_learning_rate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SGDValue::clear_base_learning_rate() {
  base_learning_rate_ = 0;
  clear_has_base_learning_rate();
}
inline float SGDValue::base_learning_rate() const {
  // @@protoc_insertion_point(field_get:lapis.SGDValue.base_learning_rate)
  return base_learning_rate_;
}
inline void SGDValue::set_base_learning_rate(float value) {
  set_has_base_learning_rate();
  base_learning_rate_ = value;
  // @@protoc_insertion_point(field_set:lapis.SGDValue.base_learning_rate)
}

// optional float momentum = 2 [default = 0];
inline bool SGDValue::has_momentum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SGDValue::set_has_momentum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SGDValue::clear_has_momentum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SGDValue::clear_momentum() {
  momentum_ = 0;
  clear_has_momentum();
}
inline float SGDValue::momentum() const {
  // @@protoc_insertion_point(field_get:lapis.SGDValue.momentum)
  return momentum_;
}
inline void SGDValue::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:lapis.SGDValue.momentum)
}

// optional float weight_decay = 3 [default = 0];
inline bool SGDValue::has_weight_decay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SGDValue::set_has_weight_decay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SGDValue::clear_has_weight_decay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SGDValue::clear_weight_decay() {
  weight_decay_ = 0;
  clear_has_weight_decay();
}
inline float SGDValue::weight_decay() const {
  // @@protoc_insertion_point(field_get:lapis.SGDValue.weight_decay)
  return weight_decay_;
}
inline void SGDValue::set_weight_decay(float value) {
  set_has_weight_decay();
  weight_decay_ = value;
  // @@protoc_insertion_point(field_set:lapis.SGDValue.weight_decay)
}

// optional float learning_rate_x = 4;
inline bool SGDValue::has_learning_rate_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SGDValue::set_has_learning_rate_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SGDValue::clear_has_learning_rate_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SGDValue::clear_learning_rate_x() {
  learning_rate_x_ = 0;
  clear_has_learning_rate_x();
}
inline float SGDValue::learning_rate_x() const {
  // @@protoc_insertion_point(field_get:lapis.SGDValue.learning_rate_x)
  return learning_rate_x_;
}
inline void SGDValue::set_learning_rate_x(float value) {
  set_has_learning_rate_x();
  learning_rate_x_ = value;
  // @@protoc_insertion_point(field_set:lapis.SGDValue.learning_rate_x)
}

// optional int32 learning_rate_change_steps = 5;
inline bool SGDValue::has_learning_rate_change_steps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SGDValue::set_has_learning_rate_change_steps() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SGDValue::clear_has_learning_rate_change_steps() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SGDValue::clear_learning_rate_change_steps() {
  learning_rate_change_steps_ = 0;
  clear_has_learning_rate_change_steps();
}
inline ::google::protobuf::int32 SGDValue::learning_rate_change_steps() const {
  // @@protoc_insertion_point(field_get:lapis.SGDValue.learning_rate_change_steps)
  return learning_rate_change_steps_;
}
inline void SGDValue::set_learning_rate_change_steps(::google::protobuf::int32 value) {
  set_has_learning_rate_change_steps();
  learning_rate_change_steps_ = value;
  // @@protoc_insertion_point(field_set:lapis.SGDValue.learning_rate_change_steps)
}

// optional .lapis.SGDValue.ChangeProto learning_rate_change = 6 [default = kInverse_t];
inline bool SGDValue::has_learning_rate_change() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SGDValue::set_has_learning_rate_change() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SGDValue::clear_has_learning_rate_change() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SGDValue::clear_learning_rate_change() {
  learning_rate_change_ = 1;
  clear_has_learning_rate_change();
}
inline ::lapis::SGDValue_ChangeProto SGDValue::learning_rate_change() const {
  // @@protoc_insertion_point(field_get:lapis.SGDValue.learning_rate_change)
  return static_cast< ::lapis::SGDValue_ChangeProto >(learning_rate_change_);
}
inline void SGDValue::set_learning_rate_change(::lapis::SGDValue_ChangeProto value) {
  assert(::lapis::SGDValue_ChangeProto_IsValid(value));
  set_has_learning_rate_change();
  learning_rate_change_ = value;
  // @@protoc_insertion_point(field_set:lapis.SGDValue.learning_rate_change)
}

// optional .lapis.DAryProto data = 7;
inline bool SGDValue::has_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SGDValue::set_has_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SGDValue::clear_has_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SGDValue::clear_data() {
  if (data_ != NULL) data_->::lapis::DAryProto::Clear();
  clear_has_data();
}
inline const ::lapis::DAryProto& SGDValue::data() const {
  // @@protoc_insertion_point(field_get:lapis.SGDValue.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::lapis::DAryProto* SGDValue::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::lapis::DAryProto;
  // @@protoc_insertion_point(field_mutable:lapis.SGDValue.data)
  return data_;
}
inline ::lapis::DAryProto* SGDValue::release_data() {
  clear_has_data();
  ::lapis::DAryProto* temp = data_;
  data_ = NULL;
  return temp;
}
inline void SGDValue::set_allocated_data(::lapis::DAryProto* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.SGDValue.data)
}

// optional .lapis.DAryProto grad = 8;
inline bool SGDValue::has_grad() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SGDValue::set_has_grad() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SGDValue::clear_has_grad() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SGDValue::clear_grad() {
  if (grad_ != NULL) grad_->::lapis::DAryProto::Clear();
  clear_has_grad();
}
inline const ::lapis::DAryProto& SGDValue::grad() const {
  // @@protoc_insertion_point(field_get:lapis.SGDValue.grad)
  return grad_ != NULL ? *grad_ : *default_instance_->grad_;
}
inline ::lapis::DAryProto* SGDValue::mutable_grad() {
  set_has_grad();
  if (grad_ == NULL) grad_ = new ::lapis::DAryProto;
  // @@protoc_insertion_point(field_mutable:lapis.SGDValue.grad)
  return grad_;
}
inline ::lapis::DAryProto* SGDValue::release_grad() {
  clear_has_grad();
  ::lapis::DAryProto* temp = grad_;
  grad_ = NULL;
  return temp;
}
inline void SGDValue::set_allocated_grad(::lapis::DAryProto* grad) {
  delete grad_;
  grad_ = grad;
  if (grad) {
    set_has_grad();
  } else {
    clear_has_grad();
  }
  // @@protoc_insertion_point(field_set_allocated:lapis.SGDValue.grad)
}

// optional int32 n_update = 9 [default = 0];
inline bool SGDValue::has_n_update() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SGDValue::set_has_n_update() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SGDValue::clear_has_n_update() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SGDValue::clear_n_update() {
  n_update_ = 0;
  clear_has_n_update();
}
inline ::google::protobuf::int32 SGDValue::n_update() const {
  // @@protoc_insertion_point(field_get:lapis.SGDValue.n_update)
  return n_update_;
}
inline void SGDValue::set_n_update(::google::protobuf::int32 value) {
  set_has_n_update();
  n_update_ = value;
  // @@protoc_insertion_point(field_set:lapis.SGDValue.n_update)
}

// optional int32 version = 10 [default = 0];
inline bool SGDValue::has_version() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SGDValue::set_has_version() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SGDValue::clear_has_version() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SGDValue::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 SGDValue::version() const {
  // @@protoc_insertion_point(field_get:lapis.SGDValue.version)
  return version_;
}
inline void SGDValue::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:lapis.SGDValue.version)
}

// optional float factor = 12;
inline bool SGDValue::has_factor() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SGDValue::set_has_factor() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SGDValue::clear_has_factor() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SGDValue::clear_factor() {
  factor_ = 0;
  clear_has_factor();
}
inline float SGDValue::factor() const {
  // @@protoc_insertion_point(field_get:lapis.SGDValue.factor)
  return factor_;
}
inline void SGDValue::set_factor(float value) {
  set_has_factor();
  factor_ = value;
  // @@protoc_insertion_point(field_set:lapis.SGDValue.factor)
}

// optional int32 threshold = 13;
inline bool SGDValue::has_threshold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SGDValue::set_has_threshold() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SGDValue::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SGDValue::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline ::google::protobuf::int32 SGDValue::threshold() const {
  // @@protoc_insertion_point(field_get:lapis.SGDValue.threshold)
  return threshold_;
}
inline void SGDValue::set_threshold(::google::protobuf::int32 value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:lapis.SGDValue.threshold)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lapis

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::lapis::ParamProto_InitMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lapis::ParamProto_InitMethod>() {
  return ::lapis::ParamProto_InitMethod_descriptor();
}
template <> struct is_proto_enum< ::lapis::LayerProto_PoolingMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lapis::LayerProto_PoolingMethod>() {
  return ::lapis::LayerProto_PoolingMethod_descriptor();
}
template <> struct is_proto_enum< ::lapis::SolverProto_Method> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lapis::SolverProto_Method>() {
  return ::lapis::SolverProto_Method_descriptor();
}
template <> struct is_proto_enum< ::lapis::SolverProto_GradAlg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lapis::SolverProto_GradAlg>() {
  return ::lapis::SolverProto_GradAlg_descriptor();
}
template <> struct is_proto_enum< ::lapis::SGDValue_ChangeProto> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lapis::SGDValue_ChangeProto>() {
  return ::lapis::SGDValue_ChangeProto_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_model_2eproto__INCLUDED
