// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worker.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "worker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lapis {

namespace {

const ::google::protobuf::Descriptor* RegisterWorkerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterWorkerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShardAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShardAssignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShardAssignmentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShardAssignmentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MethodStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MethodStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_worker_2eproto() {
  protobuf_AddDesc_worker_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "worker.proto");
  GOOGLE_CHECK(file != NULL);
  RegisterWorkerRequest_descriptor_ = file->message_type(0);
  static const int RegisterWorkerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterWorkerRequest, id_),
  };
  RegisterWorkerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterWorkerRequest_descriptor_,
      RegisterWorkerRequest::default_instance_,
      RegisterWorkerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterWorkerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterWorkerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterWorkerRequest));
  ShardAssignment_descriptor_ = file->message_type(1);
  static const int ShardAssignment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignment, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignment, shard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignment, new_worker_),
  };
  ShardAssignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShardAssignment_descriptor_,
      ShardAssignment::default_instance_,
      ShardAssignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShardAssignment));
  ShardAssignmentRequest_descriptor_ = file->message_type(2);
  static const int ShardAssignmentRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignmentRequest, assign_),
  };
  ShardAssignmentRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShardAssignmentRequest_descriptor_,
      ShardAssignmentRequest::default_instance_,
      ShardAssignmentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignmentRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignmentRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShardAssignmentRequest));
  ShardInfo_descriptor_ = file->message_type(3);
  static const int ShardInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardInfo, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardInfo, shard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardInfo, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardInfo, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardInfo, type_),
  };
  ShardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShardInfo_descriptor_,
      ShardInfo::default_instance_,
      ShardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShardInfo));
  MethodStats_descriptor_ = file->message_type(4);
  static const int MethodStats_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStats, total_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStats, shard_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStats, calls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStats, shard_calls_),
  };
  MethodStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MethodStats_descriptor_,
      MethodStats::default_instance_,
      MethodStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MethodStats));
  RequestBase_descriptor_ = file->message_type(5);
  static const int RequestBase_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBase, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBase, source_),
  };
  RequestBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestBase_descriptor_,
      RequestBase::default_instance_,
      RequestBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBase, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBase, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestBase));
  GetRequest_descriptor_ = file->message_type(6);
  static const int GetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, shard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, key_),
  };
  GetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRequest_descriptor_,
      GetRequest::default_instance_,
      GetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRequest));
  PutRequest_descriptor_ = file->message_type(7);
  static const int PutRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, shard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, data_),
  };
  PutRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutRequest_descriptor_,
      PutRequest::default_instance_,
      PutRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutRequest));
  UpdateRequest_descriptor_ = file->message_type(8);
  static const int UpdateRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, shard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, data_),
  };
  UpdateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateRequest_descriptor_,
      UpdateRequest::default_instance_,
      UpdateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateRequest));
  TableData_descriptor_ = file->message_type(9);
  static const int TableData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, value_),
  };
  TableData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableData_descriptor_,
      TableData::default_instance_,
      TableData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_worker_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterWorkerRequest_descriptor_, &RegisterWorkerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShardAssignment_descriptor_, &ShardAssignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShardAssignmentRequest_descriptor_, &ShardAssignmentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShardInfo_descriptor_, &ShardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MethodStats_descriptor_, &MethodStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestBase_descriptor_, &RequestBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRequest_descriptor_, &GetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutRequest_descriptor_, &PutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateRequest_descriptor_, &UpdateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableData_descriptor_, &TableData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_worker_2eproto() {
  delete RegisterWorkerRequest::default_instance_;
  delete RegisterWorkerRequest_reflection_;
  delete ShardAssignment::default_instance_;
  delete ShardAssignment_reflection_;
  delete ShardAssignmentRequest::default_instance_;
  delete ShardAssignmentRequest_reflection_;
  delete ShardInfo::default_instance_;
  delete ShardInfo_reflection_;
  delete MethodStats::default_instance_;
  delete MethodStats_reflection_;
  delete RequestBase::default_instance_;
  delete RequestBase_reflection_;
  delete GetRequest::default_instance_;
  delete GetRequest_reflection_;
  delete PutRequest::default_instance_;
  delete PutRequest_reflection_;
  delete UpdateRequest::default_instance_;
  delete UpdateRequest_reflection_;
  delete TableData::default_instance_;
  delete TableData_reflection_;
}

void protobuf_AddDesc_worker_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::lapis::protobuf_AddDesc_common_2eproto();
  ::lapis::protobuf_AddDesc_model_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014worker.proto\022\005lapis\032\014common.proto\032\013mod"
    "el.proto\"#\n\025RegisterWorkerRequest\022\n\n\002id\030"
    "\001 \002(\005\"C\n\017ShardAssignment\022\r\n\005table\030\001 \002(\005\022"
    "\r\n\005shard\030\002 \002(\005\022\022\n\nnew_worker\030\004 \002(\005\"@\n\026Sh"
    "ardAssignmentRequest\022&\n\006assign\030\001 \003(\0132\026.l"
    "apis.ShardAssignment\"W\n\tShardInfo\022\r\n\005tab"
    "le\030\001 \002(\r\022\r\n\005shard\030\002 \002(\r\022\017\n\007entries\030\003 \002(\004"
    "\022\r\n\005owner\030\004 \002(\r\022\014\n\004type\030\005 \002(\005\"Y\n\013MethodS"
    "tats\022\022\n\ntotal_time\030\001 \002(\001\022\022\n\nshard_time\030\002"
    " \002(\001\022\r\n\005calls\030\003 \002(\005\022\023\n\013shard_calls\030\004 \002(\005"
    "\"3\n\013RequestBase\022\r\n\005table\030\001 \002(\005\022\016\n\006source"
    "\030\002 \002(\005*\005\010d\020\310\001\"j\n\nGetRequest\022\r\n\005shard\030\001 \001"
    "(\r\022\030\n\003key\030\002 \001(\0132\013.lapis.TKey23\n\004name\022\022.l"
    "apis.RequestBase\030e \001(\0132\021.lapis.GetReques"
    "t\"p\n\nPutRequest\022\r\n\005shard\030\001 \001(\r\022\036\n\004data\030\002"
    " \001(\0132\020.lapis.TableData23\n\004name\022\022.lapis.R"
    "equestBase\030f \001(\0132\021.lapis.PutRequest\"v\n\rU"
    "pdateRequest\022\r\n\005shard\030\001 \001(\r\022\036\n\004data\030\002 \001("
    "\0132\020.lapis.TableData26\n\004name\022\022.lapis.Requ"
    "estBase\030g \001(\0132\024.lapis.UpdateRequest\"A\n\tT"
    "ableData\022\030\n\003key\030\001 \001(\0132\013.lapis.TKey\022\032\n\005va"
    "lue\030\002 \001(\0132\013.lapis.TValB\002H\001", 866);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "worker.proto", &protobuf_RegisterTypes);
  RegisterWorkerRequest::default_instance_ = new RegisterWorkerRequest();
  ShardAssignment::default_instance_ = new ShardAssignment();
  ShardAssignmentRequest::default_instance_ = new ShardAssignmentRequest();
  ShardInfo::default_instance_ = new ShardInfo();
  MethodStats::default_instance_ = new MethodStats();
  RequestBase::default_instance_ = new RequestBase();
  GetRequest::default_instance_ = new GetRequest();
  PutRequest::default_instance_ = new PutRequest();
  UpdateRequest::default_instance_ = new UpdateRequest();
  TableData::default_instance_ = new TableData();
  RegisterWorkerRequest::default_instance_->InitAsDefaultInstance();
  ShardAssignment::default_instance_->InitAsDefaultInstance();
  ShardAssignmentRequest::default_instance_->InitAsDefaultInstance();
  ShardInfo::default_instance_->InitAsDefaultInstance();
  MethodStats::default_instance_->InitAsDefaultInstance();
  RequestBase::default_instance_->InitAsDefaultInstance();
  GetRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::lapis::RequestBase::default_instance(),
    101, 11, false, false,
    &::lapis::GetRequest::default_instance());
  PutRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::lapis::RequestBase::default_instance(),
    102, 11, false, false,
    &::lapis::PutRequest::default_instance());
  UpdateRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::lapis::RequestBase::default_instance(),
    103, 11, false, false,
    &::lapis::UpdateRequest::default_instance());
  TableData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_worker_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_worker_2eproto {
  StaticDescriptorInitializer_worker_2eproto() {
    protobuf_AddDesc_worker_2eproto();
  }
} static_descriptor_initializer_worker_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RegisterWorkerRequest::kIdFieldNumber;
#endif  // !_MSC_VER

RegisterWorkerRequest::RegisterWorkerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.RegisterWorkerRequest)
}

void RegisterWorkerRequest::InitAsDefaultInstance() {
}

RegisterWorkerRequest::RegisterWorkerRequest(const RegisterWorkerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.RegisterWorkerRequest)
}

void RegisterWorkerRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterWorkerRequest::~RegisterWorkerRequest() {
  // @@protoc_insertion_point(destructor:lapis.RegisterWorkerRequest)
  SharedDtor();
}

void RegisterWorkerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterWorkerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterWorkerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterWorkerRequest_descriptor_;
}

const RegisterWorkerRequest& RegisterWorkerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2eproto();
  return *default_instance_;
}

RegisterWorkerRequest* RegisterWorkerRequest::default_instance_ = NULL;

RegisterWorkerRequest* RegisterWorkerRequest::New() const {
  return new RegisterWorkerRequest;
}

void RegisterWorkerRequest::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterWorkerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.RegisterWorkerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.RegisterWorkerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.RegisterWorkerRequest)
  return false;
#undef DO_
}

void RegisterWorkerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.RegisterWorkerRequest)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.RegisterWorkerRequest)
}

::google::protobuf::uint8* RegisterWorkerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.RegisterWorkerRequest)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.RegisterWorkerRequest)
  return target;
}

int RegisterWorkerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterWorkerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterWorkerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterWorkerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterWorkerRequest::MergeFrom(const RegisterWorkerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterWorkerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterWorkerRequest::CopyFrom(const RegisterWorkerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterWorkerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RegisterWorkerRequest::Swap(RegisterWorkerRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterWorkerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterWorkerRequest_descriptor_;
  metadata.reflection = RegisterWorkerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShardAssignment::kTableFieldNumber;
const int ShardAssignment::kShardFieldNumber;
const int ShardAssignment::kNewWorkerFieldNumber;
#endif  // !_MSC_VER

ShardAssignment::ShardAssignment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.ShardAssignment)
}

void ShardAssignment::InitAsDefaultInstance() {
}

ShardAssignment::ShardAssignment(const ShardAssignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.ShardAssignment)
}

void ShardAssignment::SharedCtor() {
  _cached_size_ = 0;
  table_ = 0;
  shard_ = 0;
  new_worker_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShardAssignment::~ShardAssignment() {
  // @@protoc_insertion_point(destructor:lapis.ShardAssignment)
  SharedDtor();
}

void ShardAssignment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShardAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShardAssignment_descriptor_;
}

const ShardAssignment& ShardAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2eproto();
  return *default_instance_;
}

ShardAssignment* ShardAssignment::default_instance_ = NULL;

ShardAssignment* ShardAssignment::New() const {
  return new ShardAssignment;
}

void ShardAssignment::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShardAssignment*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(table_, new_worker_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShardAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.ShardAssignment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 table = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_)));
          set_has_table();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shard;
        break;
      }

      // required int32 shard = 2;
      case 2: {
        if (tag == 16) {
         parse_shard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shard_)));
          set_has_shard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_new_worker;
        break;
      }

      // required int32 new_worker = 4;
      case 4: {
        if (tag == 32) {
         parse_new_worker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_worker_)));
          set_has_new_worker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.ShardAssignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.ShardAssignment)
  return false;
#undef DO_
}

void ShardAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.ShardAssignment)
  // required int32 table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->table(), output);
  }

  // required int32 shard = 2;
  if (has_shard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shard(), output);
  }

  // required int32 new_worker = 4;
  if (has_new_worker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->new_worker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.ShardAssignment)
}

::google::protobuf::uint8* ShardAssignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.ShardAssignment)
  // required int32 table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->table(), target);
  }

  // required int32 shard = 2;
  if (has_shard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shard(), target);
  }

  // required int32 new_worker = 4;
  if (has_new_worker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->new_worker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.ShardAssignment)
  return target;
}

int ShardAssignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table());
    }

    // required int32 shard = 2;
    if (has_shard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shard());
    }

    // required int32 new_worker = 4;
    if (has_new_worker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_worker());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardAssignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShardAssignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShardAssignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShardAssignment::MergeFrom(const ShardAssignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_shard()) {
      set_shard(from.shard());
    }
    if (from.has_new_worker()) {
      set_new_worker(from.new_worker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShardAssignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardAssignment::CopyFrom(const ShardAssignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardAssignment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ShardAssignment::Swap(ShardAssignment* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    std::swap(shard_, other->shard_);
    std::swap(new_worker_, other->new_worker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShardAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShardAssignment_descriptor_;
  metadata.reflection = ShardAssignment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShardAssignmentRequest::kAssignFieldNumber;
#endif  // !_MSC_VER

ShardAssignmentRequest::ShardAssignmentRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.ShardAssignmentRequest)
}

void ShardAssignmentRequest::InitAsDefaultInstance() {
}

ShardAssignmentRequest::ShardAssignmentRequest(const ShardAssignmentRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.ShardAssignmentRequest)
}

void ShardAssignmentRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShardAssignmentRequest::~ShardAssignmentRequest() {
  // @@protoc_insertion_point(destructor:lapis.ShardAssignmentRequest)
  SharedDtor();
}

void ShardAssignmentRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShardAssignmentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardAssignmentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShardAssignmentRequest_descriptor_;
}

const ShardAssignmentRequest& ShardAssignmentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2eproto();
  return *default_instance_;
}

ShardAssignmentRequest* ShardAssignmentRequest::default_instance_ = NULL;

ShardAssignmentRequest* ShardAssignmentRequest::New() const {
  return new ShardAssignmentRequest;
}

void ShardAssignmentRequest::Clear() {
  assign_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShardAssignmentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.ShardAssignmentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lapis.ShardAssignment assign = 1;
      case 1: {
        if (tag == 10) {
         parse_assign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_assign;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.ShardAssignmentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.ShardAssignmentRequest)
  return false;
#undef DO_
}

void ShardAssignmentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.ShardAssignmentRequest)
  // repeated .lapis.ShardAssignment assign = 1;
  for (int i = 0; i < this->assign_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->assign(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.ShardAssignmentRequest)
}

::google::protobuf::uint8* ShardAssignmentRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.ShardAssignmentRequest)
  // repeated .lapis.ShardAssignment assign = 1;
  for (int i = 0; i < this->assign_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->assign(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.ShardAssignmentRequest)
  return target;
}

int ShardAssignmentRequest::ByteSize() const {
  int total_size = 0;

  // repeated .lapis.ShardAssignment assign = 1;
  total_size += 1 * this->assign_size();
  for (int i = 0; i < this->assign_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assign(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardAssignmentRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShardAssignmentRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShardAssignmentRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShardAssignmentRequest::MergeFrom(const ShardAssignmentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  assign_.MergeFrom(from.assign_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShardAssignmentRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardAssignmentRequest::CopyFrom(const ShardAssignmentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardAssignmentRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->assign())) return false;
  return true;
}

void ShardAssignmentRequest::Swap(ShardAssignmentRequest* other) {
  if (other != this) {
    assign_.Swap(&other->assign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShardAssignmentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShardAssignmentRequest_descriptor_;
  metadata.reflection = ShardAssignmentRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShardInfo::kTableFieldNumber;
const int ShardInfo::kShardFieldNumber;
const int ShardInfo::kEntriesFieldNumber;
const int ShardInfo::kOwnerFieldNumber;
const int ShardInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

ShardInfo::ShardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.ShardInfo)
}

void ShardInfo::InitAsDefaultInstance() {
}

ShardInfo::ShardInfo(const ShardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.ShardInfo)
}

void ShardInfo::SharedCtor() {
  _cached_size_ = 0;
  table_ = 0u;
  shard_ = 0u;
  entries_ = GOOGLE_ULONGLONG(0);
  owner_ = 0u;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShardInfo::~ShardInfo() {
  // @@protoc_insertion_point(destructor:lapis.ShardInfo)
  SharedDtor();
}

void ShardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShardInfo_descriptor_;
}

const ShardInfo& ShardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2eproto();
  return *default_instance_;
}

ShardInfo* ShardInfo::default_instance_ = NULL;

ShardInfo* ShardInfo::New() const {
  return new ShardInfo;
}

void ShardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(table_, type_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.ShardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 table = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_)));
          set_has_table();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shard;
        break;
      }

      // required uint32 shard = 2;
      case 2: {
        if (tag == 16) {
         parse_shard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shard_)));
          set_has_shard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_entries;
        break;
      }

      // required uint64 entries = 3;
      case 3: {
        if (tag == 24) {
         parse_entries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entries_)));
          set_has_entries();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_owner;
        break;
      }

      // required uint32 owner = 4;
      case 4: {
        if (tag == 32) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required int32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.ShardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.ShardInfo)
  return false;
#undef DO_
}

void ShardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.ShardInfo)
  // required uint32 table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table(), output);
  }

  // required uint32 shard = 2;
  if (has_shard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shard(), output);
  }

  // required uint64 entries = 3;
  if (has_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->entries(), output);
  }

  // required uint32 owner = 4;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->owner(), output);
  }

  // required int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.ShardInfo)
}

::google::protobuf::uint8* ShardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.ShardInfo)
  // required uint32 table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table(), target);
  }

  // required uint32 shard = 2;
  if (has_shard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shard(), target);
  }

  // required uint64 entries = 3;
  if (has_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->entries(), target);
  }

  // required uint32 owner = 4;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->owner(), target);
  }

  // required int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.ShardInfo)
  return target;
}

int ShardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table());
    }

    // required uint32 shard = 2;
    if (has_shard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shard());
    }

    // required uint64 entries = 3;
    if (has_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entries());
    }

    // required uint32 owner = 4;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner());
    }

    // required int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShardInfo::MergeFrom(const ShardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_shard()) {
      set_shard(from.shard());
    }
    if (from.has_entries()) {
      set_entries(from.entries());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardInfo::CopyFrom(const ShardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ShardInfo::Swap(ShardInfo* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    std::swap(shard_, other->shard_);
    std::swap(entries_, other->entries_);
    std::swap(owner_, other->owner_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShardInfo_descriptor_;
  metadata.reflection = ShardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MethodStats::kTotalTimeFieldNumber;
const int MethodStats::kShardTimeFieldNumber;
const int MethodStats::kCallsFieldNumber;
const int MethodStats::kShardCallsFieldNumber;
#endif  // !_MSC_VER

MethodStats::MethodStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.MethodStats)
}

void MethodStats::InitAsDefaultInstance() {
}

MethodStats::MethodStats(const MethodStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.MethodStats)
}

void MethodStats::SharedCtor() {
  _cached_size_ = 0;
  total_time_ = 0;
  shard_time_ = 0;
  calls_ = 0;
  shard_calls_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MethodStats::~MethodStats() {
  // @@protoc_insertion_point(destructor:lapis.MethodStats)
  SharedDtor();
}

void MethodStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MethodStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MethodStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MethodStats_descriptor_;
}

const MethodStats& MethodStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2eproto();
  return *default_instance_;
}

MethodStats* MethodStats::default_instance_ = NULL;

MethodStats* MethodStats::New() const {
  return new MethodStats;
}

void MethodStats::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MethodStats*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(total_time_, shard_calls_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MethodStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.MethodStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double total_time = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_)));
          set_has_total_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_shard_time;
        break;
      }

      // required double shard_time = 2;
      case 2: {
        if (tag == 17) {
         parse_shard_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shard_time_)));
          set_has_shard_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_calls;
        break;
      }

      // required int32 calls = 3;
      case 3: {
        if (tag == 24) {
         parse_calls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &calls_)));
          set_has_calls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_shard_calls;
        break;
      }

      // required int32 shard_calls = 4;
      case 4: {
        if (tag == 32) {
         parse_shard_calls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shard_calls_)));
          set_has_shard_calls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.MethodStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.MethodStats)
  return false;
#undef DO_
}

void MethodStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.MethodStats)
  // required double total_time = 1;
  if (has_total_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_time(), output);
  }

  // required double shard_time = 2;
  if (has_shard_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->shard_time(), output);
  }

  // required int32 calls = 3;
  if (has_calls()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->calls(), output);
  }

  // required int32 shard_calls = 4;
  if (has_shard_calls()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shard_calls(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.MethodStats)
}

::google::protobuf::uint8* MethodStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.MethodStats)
  // required double total_time = 1;
  if (has_total_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_time(), target);
  }

  // required double shard_time = 2;
  if (has_shard_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->shard_time(), target);
  }

  // required int32 calls = 3;
  if (has_calls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->calls(), target);
  }

  // required int32 shard_calls = 4;
  if (has_shard_calls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->shard_calls(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.MethodStats)
  return target;
}

int MethodStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double total_time = 1;
    if (has_total_time()) {
      total_size += 1 + 8;
    }

    // required double shard_time = 2;
    if (has_shard_time()) {
      total_size += 1 + 8;
    }

    // required int32 calls = 3;
    if (has_calls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->calls());
    }

    // required int32 shard_calls = 4;
    if (has_shard_calls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shard_calls());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MethodStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MethodStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MethodStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MethodStats::MergeFrom(const MethodStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_time()) {
      set_total_time(from.total_time());
    }
    if (from.has_shard_time()) {
      set_shard_time(from.shard_time());
    }
    if (from.has_calls()) {
      set_calls(from.calls());
    }
    if (from.has_shard_calls()) {
      set_shard_calls(from.shard_calls());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MethodStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MethodStats::CopyFrom(const MethodStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MethodStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MethodStats::Swap(MethodStats* other) {
  if (other != this) {
    std::swap(total_time_, other->total_time_);
    std::swap(shard_time_, other->shard_time_);
    std::swap(calls_, other->calls_);
    std::swap(shard_calls_, other->shard_calls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MethodStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MethodStats_descriptor_;
  metadata.reflection = MethodStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestBase::kTableFieldNumber;
const int RequestBase::kSourceFieldNumber;
#endif  // !_MSC_VER

RequestBase::RequestBase()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.RequestBase)
}

void RequestBase::InitAsDefaultInstance() {
}

RequestBase::RequestBase(const RequestBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.RequestBase)
}

void RequestBase::SharedCtor() {
  _cached_size_ = 0;
  table_ = 0;
  source_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBase::~RequestBase() {
  // @@protoc_insertion_point(destructor:lapis.RequestBase)
  SharedDtor();
}

void RequestBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestBase_descriptor_;
}

const RequestBase& RequestBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2eproto();
  return *default_instance_;
}

RequestBase* RequestBase::default_instance_ = NULL;

RequestBase* RequestBase::New() const {
  return new RequestBase;
}

void RequestBase::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestBase*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(table_, source_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.RequestBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 table = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_)));
          set_has_table();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_source;
        break;
      }

      // required int32 source = 2;
      case 2: {
        if (tag == 16) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 1600u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.RequestBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.RequestBase)
  return false;
#undef DO_
}

void RequestBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.RequestBase)
  // required int32 table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->table(), output);
  }

  // required int32 source = 2;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->source(), output);
  }

  // Extension range [100, 200)
  _extensions_.SerializeWithCachedSizes(
      100, 200, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.RequestBase)
}

::google::protobuf::uint8* RequestBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.RequestBase)
  // required int32 table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->table(), target);
  }

  // required int32 source = 2;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->source(), target);
  }

  // Extension range [100, 200)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 200, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.RequestBase)
  return target;
}

int RequestBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table());
    }

    // required int32 source = 2;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestBase::MergeFrom(const RequestBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBase::CopyFrom(const RequestBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void RequestBase::Swap(RequestBase* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    std::swap(source_, other->source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata RequestBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestBase_descriptor_;
  metadata.reflection = RequestBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRequest::kShardFieldNumber;
const int GetRequest::kKeyFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int GetRequest::kNameFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::lapis::RequestBase,
    ::google::protobuf::internal::MessageTypeTraits< ::lapis::GetRequest >, 11, false >
  GetRequest::name(kNameFieldNumber, ::lapis::GetRequest::default_instance());
GetRequest::GetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.GetRequest)
}

void GetRequest::InitAsDefaultInstance() {
  key_ = const_cast< ::lapis::TKey*>(&::lapis::TKey::default_instance());
}

GetRequest::GetRequest(const GetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.GetRequest)
}

void GetRequest::SharedCtor() {
  _cached_size_ = 0;
  shard_ = 0u;
  key_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:lapis.GetRequest)
  SharedDtor();
}

void GetRequest::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
  }
}

void GetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRequest_descriptor_;
}

const GetRequest& GetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2eproto();
  return *default_instance_;
}

GetRequest* GetRequest::default_instance_ = NULL;

GetRequest* GetRequest::New() const {
  return new GetRequest;
}

void GetRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    shard_ = 0u;
    if (has_key()) {
      if (key_ != NULL) key_->::lapis::TKey::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.GetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shard = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shard_)));
          set_has_shard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .lapis.TKey key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.GetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.GetRequest)
  return false;
#undef DO_
}

void GetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.GetRequest)
  // optional uint32 shard = 1;
  if (has_shard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shard(), output);
  }

  // optional .lapis.TKey key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.GetRequest)
}

::google::protobuf::uint8* GetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.GetRequest)
  // optional uint32 shard = 1;
  if (has_shard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shard(), target);
  }

  // optional .lapis.TKey key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.GetRequest)
  return target;
}

int GetRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 shard = 1;
    if (has_shard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shard());
    }

    // optional .lapis.TKey key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shard()) {
      set_shard(from.shard());
    }
    if (from.has_key()) {
      mutable_key()->::lapis::TKey::MergeFrom(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {

  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  return true;
}

void GetRequest::Swap(GetRequest* other) {
  if (other != this) {
    std::swap(shard_, other->shard_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRequest_descriptor_;
  metadata.reflection = GetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutRequest::kShardFieldNumber;
const int PutRequest::kDataFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int PutRequest::kNameFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::lapis::RequestBase,
    ::google::protobuf::internal::MessageTypeTraits< ::lapis::PutRequest >, 11, false >
  PutRequest::name(kNameFieldNumber, ::lapis::PutRequest::default_instance());
PutRequest::PutRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.PutRequest)
}

void PutRequest::InitAsDefaultInstance() {
  data_ = const_cast< ::lapis::TableData*>(&::lapis::TableData::default_instance());
}

PutRequest::PutRequest(const PutRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.PutRequest)
}

void PutRequest::SharedCtor() {
  _cached_size_ = 0;
  shard_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutRequest::~PutRequest() {
  // @@protoc_insertion_point(destructor:lapis.PutRequest)
  SharedDtor();
}

void PutRequest::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void PutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutRequest_descriptor_;
}

const PutRequest& PutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2eproto();
  return *default_instance_;
}

PutRequest* PutRequest::default_instance_ = NULL;

PutRequest* PutRequest::New() const {
  return new PutRequest;
}

void PutRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    shard_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::lapis::TableData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.PutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shard = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shard_)));
          set_has_shard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .lapis.TableData data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.PutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.PutRequest)
  return false;
#undef DO_
}

void PutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.PutRequest)
  // optional uint32 shard = 1;
  if (has_shard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shard(), output);
  }

  // optional .lapis.TableData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.PutRequest)
}

::google::protobuf::uint8* PutRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.PutRequest)
  // optional uint32 shard = 1;
  if (has_shard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shard(), target);
  }

  // optional .lapis.TableData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.PutRequest)
  return target;
}

int PutRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 shard = 1;
    if (has_shard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shard());
    }

    // optional .lapis.TableData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutRequest::MergeFrom(const PutRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shard()) {
      set_shard(from.shard());
    }
    if (from.has_data()) {
      mutable_data()->::lapis::TableData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutRequest::CopyFrom(const PutRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutRequest::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void PutRequest::Swap(PutRequest* other) {
  if (other != this) {
    std::swap(shard_, other->shard_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutRequest_descriptor_;
  metadata.reflection = PutRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateRequest::kShardFieldNumber;
const int UpdateRequest::kDataFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int UpdateRequest::kNameFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::lapis::RequestBase,
    ::google::protobuf::internal::MessageTypeTraits< ::lapis::UpdateRequest >, 11, false >
  UpdateRequest::name(kNameFieldNumber, ::lapis::UpdateRequest::default_instance());
UpdateRequest::UpdateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.UpdateRequest)
}

void UpdateRequest::InitAsDefaultInstance() {
  data_ = const_cast< ::lapis::TableData*>(&::lapis::TableData::default_instance());
}

UpdateRequest::UpdateRequest(const UpdateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.UpdateRequest)
}

void UpdateRequest::SharedCtor() {
  _cached_size_ = 0;
  shard_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateRequest::~UpdateRequest() {
  // @@protoc_insertion_point(destructor:lapis.UpdateRequest)
  SharedDtor();
}

void UpdateRequest::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void UpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateRequest_descriptor_;
}

const UpdateRequest& UpdateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2eproto();
  return *default_instance_;
}

UpdateRequest* UpdateRequest::default_instance_ = NULL;

UpdateRequest* UpdateRequest::New() const {
  return new UpdateRequest;
}

void UpdateRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    shard_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::lapis::TableData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.UpdateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shard = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shard_)));
          set_has_shard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .lapis.TableData data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.UpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.UpdateRequest)
  return false;
#undef DO_
}

void UpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.UpdateRequest)
  // optional uint32 shard = 1;
  if (has_shard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shard(), output);
  }

  // optional .lapis.TableData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.UpdateRequest)
}

::google::protobuf::uint8* UpdateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.UpdateRequest)
  // optional uint32 shard = 1;
  if (has_shard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shard(), target);
  }

  // optional .lapis.TableData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.UpdateRequest)
  return target;
}

int UpdateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 shard = 1;
    if (has_shard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shard());
    }

    // optional .lapis.TableData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateRequest::MergeFrom(const UpdateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shard()) {
      set_shard(from.shard());
    }
    if (from.has_data()) {
      mutable_data()->::lapis::TableData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRequest::CopyFrom(const UpdateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRequest::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void UpdateRequest::Swap(UpdateRequest* other) {
  if (other != this) {
    std::swap(shard_, other->shard_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateRequest_descriptor_;
  metadata.reflection = UpdateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableData::kKeyFieldNumber;
const int TableData::kValueFieldNumber;
#endif  // !_MSC_VER

TableData::TableData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.TableData)
}

void TableData::InitAsDefaultInstance() {
  key_ = const_cast< ::lapis::TKey*>(&::lapis::TKey::default_instance());
  value_ = const_cast< ::lapis::TVal*>(&::lapis::TVal::default_instance());
}

TableData::TableData(const TableData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.TableData)
}

void TableData::SharedCtor() {
  _cached_size_ = 0;
  key_ = NULL;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableData::~TableData() {
  // @@protoc_insertion_point(destructor:lapis.TableData)
  SharedDtor();
}

void TableData::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
    delete value_;
  }
}

void TableData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableData_descriptor_;
}

const TableData& TableData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2eproto();
  return *default_instance_;
}

TableData* TableData::default_instance_ = NULL;

TableData* TableData::New() const {
  return new TableData;
}

void TableData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != NULL) key_->::lapis::TKey::Clear();
    }
    if (has_value()) {
      if (value_ != NULL) value_->::lapis::TVal::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.TableData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lapis.TKey key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .lapis.TVal value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.TableData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.TableData)
  return false;
#undef DO_
}

void TableData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.TableData)
  // optional .lapis.TKey key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->key(), output);
  }

  // optional .lapis.TVal value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.TableData)
}

::google::protobuf::uint8* TableData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.TableData)
  // optional .lapis.TKey key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->key(), target);
  }

  // optional .lapis.TVal value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.TableData)
  return target;
}

int TableData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .lapis.TKey key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

    // optional .lapis.TVal value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableData::MergeFrom(const TableData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      mutable_key()->::lapis::TKey::MergeFrom(from.key());
    }
    if (from.has_value()) {
      mutable_value()->::lapis::TVal::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableData::CopyFrom(const TableData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableData::IsInitialized() const {

  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void TableData::Swap(TableData* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableData_descriptor_;
  metadata.reflection = TableData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lapis

// @@protoc_insertion_point(global_scope)
