// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "worker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lapis {

namespace {

const ::google::protobuf::Descriptor* RegisterWorkerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterWorkerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShardAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShardAssignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShardAssignmentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShardAssignmentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MethodStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MethodStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiskData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_worker_2eproto() {
  protobuf_AddDesc_worker_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "worker.proto");
  GOOGLE_CHECK(file != NULL);
  RegisterWorkerRequest_descriptor_ = file->message_type(0);
  static const int RegisterWorkerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterWorkerRequest, id_),
  };
  RegisterWorkerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterWorkerRequest_descriptor_,
      RegisterWorkerRequest::default_instance_,
      RegisterWorkerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterWorkerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterWorkerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterWorkerRequest));
  ShardAssignment_descriptor_ = file->message_type(1);
  static const int ShardAssignment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignment, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignment, shard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignment, new_worker_),
  };
  ShardAssignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShardAssignment_descriptor_,
      ShardAssignment::default_instance_,
      ShardAssignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShardAssignment));
  ShardAssignmentRequest_descriptor_ = file->message_type(2);
  static const int ShardAssignmentRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignmentRequest, assign_),
  };
  ShardAssignmentRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShardAssignmentRequest_descriptor_,
      ShardAssignmentRequest::default_instance_,
      ShardAssignmentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignmentRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignmentRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShardAssignmentRequest));
  ShardInfo_descriptor_ = file->message_type(3);
  static const int ShardInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardInfo, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardInfo, shard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardInfo, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardInfo, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardInfo, type_),
  };
  ShardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShardInfo_descriptor_,
      ShardInfo::default_instance_,
      ShardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShardInfo));
  MethodStats_descriptor_ = file->message_type(4);
  static const int MethodStats_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStats, total_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStats, shard_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStats, calls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStats, shard_calls_),
  };
  MethodStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MethodStats_descriptor_,
      MethodStats::default_instance_,
      MethodStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MethodStats));
  HashGet_descriptor_ = file->message_type(5);
  static const int HashGet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGet, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGet, shard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGet, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGet, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGet, index_),
  };
  HashGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HashGet_descriptor_,
      HashGet::default_instance_,
      HashGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HashGet));
  TableData_descriptor_ = file->message_type(6);
  static const int TableData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, shard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, table_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, kv_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, missing_key_),
  };
  TableData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableData_descriptor_,
      TableData::default_instance_,
      TableData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableData));
  DiskData_descriptor_ = file->message_type(7);
  static const int DiskData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskData, block_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskData, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskData, records_),
  };
  DiskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiskData_descriptor_,
      DiskData::default_instance_,
      DiskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiskData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_worker_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterWorkerRequest_descriptor_, &RegisterWorkerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShardAssignment_descriptor_, &ShardAssignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShardAssignmentRequest_descriptor_, &ShardAssignmentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShardInfo_descriptor_, &ShardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MethodStats_descriptor_, &MethodStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HashGet_descriptor_, &HashGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableData_descriptor_, &TableData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiskData_descriptor_, &DiskData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_worker_2eproto() {
  delete RegisterWorkerRequest::default_instance_;
  delete RegisterWorkerRequest_reflection_;
  delete ShardAssignment::default_instance_;
  delete ShardAssignment_reflection_;
  delete ShardAssignmentRequest::default_instance_;
  delete ShardAssignmentRequest_reflection_;
  delete ShardInfo::default_instance_;
  delete ShardInfo_reflection_;
  delete MethodStats::default_instance_;
  delete MethodStats_reflection_;
  delete HashGet::default_instance_;
  delete HashGet_reflection_;
  delete TableData::default_instance_;
  delete TableData_reflection_;
  delete DiskData::default_instance_;
  delete DiskData_reflection_;
}

void protobuf_AddDesc_worker_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::lapis::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014worker.proto\022\005lapis\032\014common.proto\"#\n\025R"
    "egisterWorkerRequest\022\n\n\002id\030\001 \002(\005\"C\n\017Shar"
    "dAssignment\022\r\n\005table\030\001 \002(\005\022\r\n\005shard\030\002 \002("
    "\005\022\022\n\nnew_worker\030\004 \002(\005\"@\n\026ShardAssignment"
    "Request\022&\n\006assign\030\001 \003(\0132\026.lapis.ShardAss"
    "ignment\"W\n\tShardInfo\022\r\n\005table\030\001 \002(\r\022\r\n\005s"
    "hard\030\002 \002(\r\022\017\n\007entries\030\003 \002(\004\022\r\n\005owner\030\004 \002"
    "(\r\022\014\n\004type\030\005 \002(\005\"Y\n\013MethodStats\022\022\n\ntotal"
    "_time\030\001 \002(\001\022\022\n\nshard_time\030\002 \002(\001\022\r\n\005calls"
    "\030\003 \002(\005\022\023\n\013shard_calls\030\004 \002(\005\"S\n\007HashGet\022\r"
    "\n\005table\030\001 \002(\r\022\r\n\005shard\030\002 \002(\r\022\016\n\006source\030\003"
    " \002(\r\022\013\n\003key\030\004 \001(\014\022\r\n\005index\030\005 \001(\r\"\232\001\n\tTab"
    "leData\022\016\n\006source\030\001 \002(\r\022\r\n\005table\030\002 \002(\r\022\r\n"
    "\005shard\030\003 \002(\r\022\014\n\004done\030\004 \002(\010\022\013\n\003key\030\005 \002(\014\022"
    "\022\n\ntable_data\030\006 \001(\014\022\033\n\007kv_data\030\007 \003(\0132\n.l"
    "apis.Arg\022\023\n\013missing_key\030\010 \001(\010\"L\n\010DiskDat"
    "a\022\024\n\014block_number\030\001 \002(\r\022\r\n\005table\030\002 \002(\r\022\033"
    "\n\007records\030\003 \003(\0132\n.lapis.ArgB\002H\001", 711);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "worker.proto", &protobuf_RegisterTypes);
  RegisterWorkerRequest::default_instance_ = new RegisterWorkerRequest();
  ShardAssignment::default_instance_ = new ShardAssignment();
  ShardAssignmentRequest::default_instance_ = new ShardAssignmentRequest();
  ShardInfo::default_instance_ = new ShardInfo();
  MethodStats::default_instance_ = new MethodStats();
  HashGet::default_instance_ = new HashGet();
  TableData::default_instance_ = new TableData();
  DiskData::default_instance_ = new DiskData();
  RegisterWorkerRequest::default_instance_->InitAsDefaultInstance();
  ShardAssignment::default_instance_->InitAsDefaultInstance();
  ShardAssignmentRequest::default_instance_->InitAsDefaultInstance();
  ShardInfo::default_instance_->InitAsDefaultInstance();
  MethodStats::default_instance_->InitAsDefaultInstance();
  HashGet::default_instance_->InitAsDefaultInstance();
  TableData::default_instance_->InitAsDefaultInstance();
  DiskData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_worker_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_worker_2eproto {
  StaticDescriptorInitializer_worker_2eproto() {
    protobuf_AddDesc_worker_2eproto();
  }
} static_descriptor_initializer_worker_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RegisterWorkerRequest::kIdFieldNumber;
#endif  // !_MSC_VER

RegisterWorkerRequest::RegisterWorkerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterWorkerRequest::InitAsDefaultInstance() {
}

RegisterWorkerRequest::RegisterWorkerRequest(const RegisterWorkerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterWorkerRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterWorkerRequest::~RegisterWorkerRequest() {
  SharedDtor();
}

void RegisterWorkerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterWorkerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterWorkerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterWorkerRequest_descriptor_;
}

const RegisterWorkerRequest& RegisterWorkerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2eproto();  return *default_instance_;
}

RegisterWorkerRequest* RegisterWorkerRequest::default_instance_ = NULL;

RegisterWorkerRequest* RegisterWorkerRequest::New() const {
  return new RegisterWorkerRequest;
}

void RegisterWorkerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterWorkerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterWorkerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterWorkerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterWorkerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterWorkerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterWorkerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterWorkerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterWorkerRequest::MergeFrom(const RegisterWorkerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterWorkerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterWorkerRequest::CopyFrom(const RegisterWorkerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterWorkerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RegisterWorkerRequest::Swap(RegisterWorkerRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterWorkerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterWorkerRequest_descriptor_;
  metadata.reflection = RegisterWorkerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShardAssignment::kTableFieldNumber;
const int ShardAssignment::kShardFieldNumber;
const int ShardAssignment::kNewWorkerFieldNumber;
#endif  // !_MSC_VER

ShardAssignment::ShardAssignment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShardAssignment::InitAsDefaultInstance() {
}

ShardAssignment::ShardAssignment(const ShardAssignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShardAssignment::SharedCtor() {
  _cached_size_ = 0;
  table_ = 0;
  shard_ = 0;
  new_worker_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShardAssignment::~ShardAssignment() {
  SharedDtor();
}

void ShardAssignment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShardAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShardAssignment_descriptor_;
}

const ShardAssignment& ShardAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2eproto();  return *default_instance_;
}

ShardAssignment* ShardAssignment::default_instance_ = NULL;

ShardAssignment* ShardAssignment::New() const {
  return new ShardAssignment;
}

void ShardAssignment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_ = 0;
    shard_ = 0;
    new_worker_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShardAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_)));
          set_has_table();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shard;
        break;
      }
      
      // required int32 shard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shard_)));
          set_has_shard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_new_worker;
        break;
      }
      
      // required int32 new_worker = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_worker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_worker_)));
          set_has_new_worker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShardAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->table(), output);
  }
  
  // required int32 shard = 2;
  if (has_shard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shard(), output);
  }
  
  // required int32 new_worker = 4;
  if (has_new_worker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->new_worker(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShardAssignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->table(), target);
  }
  
  // required int32 shard = 2;
  if (has_shard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shard(), target);
  }
  
  // required int32 new_worker = 4;
  if (has_new_worker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->new_worker(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShardAssignment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table());
    }
    
    // required int32 shard = 2;
    if (has_shard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shard());
    }
    
    // required int32 new_worker = 4;
    if (has_new_worker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_worker());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardAssignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShardAssignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShardAssignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShardAssignment::MergeFrom(const ShardAssignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_shard()) {
      set_shard(from.shard());
    }
    if (from.has_new_worker()) {
      set_new_worker(from.new_worker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShardAssignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardAssignment::CopyFrom(const ShardAssignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardAssignment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ShardAssignment::Swap(ShardAssignment* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    std::swap(shard_, other->shard_);
    std::swap(new_worker_, other->new_worker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShardAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShardAssignment_descriptor_;
  metadata.reflection = ShardAssignment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShardAssignmentRequest::kAssignFieldNumber;
#endif  // !_MSC_VER

ShardAssignmentRequest::ShardAssignmentRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShardAssignmentRequest::InitAsDefaultInstance() {
}

ShardAssignmentRequest::ShardAssignmentRequest(const ShardAssignmentRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShardAssignmentRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShardAssignmentRequest::~ShardAssignmentRequest() {
  SharedDtor();
}

void ShardAssignmentRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShardAssignmentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardAssignmentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShardAssignmentRequest_descriptor_;
}

const ShardAssignmentRequest& ShardAssignmentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2eproto();  return *default_instance_;
}

ShardAssignmentRequest* ShardAssignmentRequest::default_instance_ = NULL;

ShardAssignmentRequest* ShardAssignmentRequest::New() const {
  return new ShardAssignmentRequest;
}

void ShardAssignmentRequest::Clear() {
  assign_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShardAssignmentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lapis.ShardAssignment assign = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assign()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_assign;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShardAssignmentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lapis.ShardAssignment assign = 1;
  for (int i = 0; i < this->assign_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->assign(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShardAssignmentRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lapis.ShardAssignment assign = 1;
  for (int i = 0; i < this->assign_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->assign(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShardAssignmentRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .lapis.ShardAssignment assign = 1;
  total_size += 1 * this->assign_size();
  for (int i = 0; i < this->assign_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assign(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardAssignmentRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShardAssignmentRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShardAssignmentRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShardAssignmentRequest::MergeFrom(const ShardAssignmentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  assign_.MergeFrom(from.assign_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShardAssignmentRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardAssignmentRequest::CopyFrom(const ShardAssignmentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardAssignmentRequest::IsInitialized() const {
  
  for (int i = 0; i < assign_size(); i++) {
    if (!this->assign(i).IsInitialized()) return false;
  }
  return true;
}

void ShardAssignmentRequest::Swap(ShardAssignmentRequest* other) {
  if (other != this) {
    assign_.Swap(&other->assign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShardAssignmentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShardAssignmentRequest_descriptor_;
  metadata.reflection = ShardAssignmentRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShardInfo::kTableFieldNumber;
const int ShardInfo::kShardFieldNumber;
const int ShardInfo::kEntriesFieldNumber;
const int ShardInfo::kOwnerFieldNumber;
const int ShardInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

ShardInfo::ShardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShardInfo::InitAsDefaultInstance() {
}

ShardInfo::ShardInfo(const ShardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShardInfo::SharedCtor() {
  _cached_size_ = 0;
  table_ = 0u;
  shard_ = 0u;
  entries_ = GOOGLE_ULONGLONG(0);
  owner_ = 0u;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShardInfo::~ShardInfo() {
  SharedDtor();
}

void ShardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShardInfo_descriptor_;
}

const ShardInfo& ShardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2eproto();  return *default_instance_;
}

ShardInfo* ShardInfo::default_instance_ = NULL;

ShardInfo* ShardInfo::New() const {
  return new ShardInfo;
}

void ShardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_ = 0u;
    shard_ = 0u;
    entries_ = GOOGLE_ULONGLONG(0);
    owner_ = 0u;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_)));
          set_has_table();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shard;
        break;
      }
      
      // required uint32 shard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shard_)));
          set_has_shard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_entries;
        break;
      }
      
      // required uint64 entries = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entries_)));
          set_has_entries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_owner;
        break;
      }
      
      // required uint32 owner = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // required int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table(), output);
  }
  
  // required uint32 shard = 2;
  if (has_shard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shard(), output);
  }
  
  // required uint64 entries = 3;
  if (has_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->entries(), output);
  }
  
  // required uint32 owner = 4;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->owner(), output);
  }
  
  // required int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table(), target);
  }
  
  // required uint32 shard = 2;
  if (has_shard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shard(), target);
  }
  
  // required uint64 entries = 3;
  if (has_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->entries(), target);
  }
  
  // required uint32 owner = 4;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->owner(), target);
  }
  
  // required int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShardInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table());
    }
    
    // required uint32 shard = 2;
    if (has_shard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shard());
    }
    
    // required uint64 entries = 3;
    if (has_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entries());
    }
    
    // required uint32 owner = 4;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner());
    }
    
    // required int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShardInfo::MergeFrom(const ShardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_shard()) {
      set_shard(from.shard());
    }
    if (from.has_entries()) {
      set_entries(from.entries());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardInfo::CopyFrom(const ShardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void ShardInfo::Swap(ShardInfo* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    std::swap(shard_, other->shard_);
    std::swap(entries_, other->entries_);
    std::swap(owner_, other->owner_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShardInfo_descriptor_;
  metadata.reflection = ShardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MethodStats::kTotalTimeFieldNumber;
const int MethodStats::kShardTimeFieldNumber;
const int MethodStats::kCallsFieldNumber;
const int MethodStats::kShardCallsFieldNumber;
#endif  // !_MSC_VER

MethodStats::MethodStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MethodStats::InitAsDefaultInstance() {
}

MethodStats::MethodStats(const MethodStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MethodStats::SharedCtor() {
  _cached_size_ = 0;
  total_time_ = 0;
  shard_time_ = 0;
  calls_ = 0;
  shard_calls_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MethodStats::~MethodStats() {
  SharedDtor();
}

void MethodStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MethodStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MethodStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MethodStats_descriptor_;
}

const MethodStats& MethodStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2eproto();  return *default_instance_;
}

MethodStats* MethodStats::default_instance_ = NULL;

MethodStats* MethodStats::New() const {
  return new MethodStats;
}

void MethodStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_time_ = 0;
    shard_time_ = 0;
    calls_ = 0;
    shard_calls_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MethodStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double total_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_)));
          set_has_total_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_shard_time;
        break;
      }
      
      // required double shard_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_shard_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shard_time_)));
          set_has_shard_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_calls;
        break;
      }
      
      // required int32 calls = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &calls_)));
          set_has_calls();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_shard_calls;
        break;
      }
      
      // required int32 shard_calls = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shard_calls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shard_calls_)));
          set_has_shard_calls();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MethodStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double total_time = 1;
  if (has_total_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_time(), output);
  }
  
  // required double shard_time = 2;
  if (has_shard_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->shard_time(), output);
  }
  
  // required int32 calls = 3;
  if (has_calls()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->calls(), output);
  }
  
  // required int32 shard_calls = 4;
  if (has_shard_calls()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shard_calls(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MethodStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double total_time = 1;
  if (has_total_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_time(), target);
  }
  
  // required double shard_time = 2;
  if (has_shard_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->shard_time(), target);
  }
  
  // required int32 calls = 3;
  if (has_calls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->calls(), target);
  }
  
  // required int32 shard_calls = 4;
  if (has_shard_calls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->shard_calls(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MethodStats::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double total_time = 1;
    if (has_total_time()) {
      total_size += 1 + 8;
    }
    
    // required double shard_time = 2;
    if (has_shard_time()) {
      total_size += 1 + 8;
    }
    
    // required int32 calls = 3;
    if (has_calls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->calls());
    }
    
    // required int32 shard_calls = 4;
    if (has_shard_calls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shard_calls());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MethodStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MethodStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MethodStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MethodStats::MergeFrom(const MethodStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_time()) {
      set_total_time(from.total_time());
    }
    if (from.has_shard_time()) {
      set_shard_time(from.shard_time());
    }
    if (from.has_calls()) {
      set_calls(from.calls());
    }
    if (from.has_shard_calls()) {
      set_shard_calls(from.shard_calls());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MethodStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MethodStats::CopyFrom(const MethodStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MethodStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MethodStats::Swap(MethodStats* other) {
  if (other != this) {
    std::swap(total_time_, other->total_time_);
    std::swap(shard_time_, other->shard_time_);
    std::swap(calls_, other->calls_);
    std::swap(shard_calls_, other->shard_calls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MethodStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MethodStats_descriptor_;
  metadata.reflection = MethodStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HashGet::kTableFieldNumber;
const int HashGet::kShardFieldNumber;
const int HashGet::kSourceFieldNumber;
const int HashGet::kKeyFieldNumber;
const int HashGet::kIndexFieldNumber;
#endif  // !_MSC_VER

HashGet::HashGet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HashGet::InitAsDefaultInstance() {
}

HashGet::HashGet(const HashGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HashGet::SharedCtor() {
  _cached_size_ = 0;
  table_ = 0u;
  shard_ = 0u;
  source_ = 0u;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HashGet::~HashGet() {
  SharedDtor();
}

void HashGet::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void HashGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashGet_descriptor_;
}

const HashGet& HashGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2eproto();  return *default_instance_;
}

HashGet* HashGet::default_instance_ = NULL;

HashGet* HashGet::New() const {
  return new HashGet;
}

void HashGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_ = 0u;
    shard_ = 0u;
    source_ = 0u;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HashGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_)));
          set_has_table();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shard;
        break;
      }
      
      // required uint32 shard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shard_)));
          set_has_shard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_source;
        break;
      }
      
      // required uint32 source = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }
      
      // optional bytes key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }
      
      // optional uint32 index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HashGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table(), output);
  }
  
  // required uint32 shard = 2;
  if (has_shard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shard(), output);
  }
  
  // required uint32 source = 3;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->source(), output);
  }
  
  // optional bytes key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->key(), output);
  }
  
  // optional uint32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HashGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table(), target);
  }
  
  // required uint32 shard = 2;
  if (has_shard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shard(), target);
  }
  
  // required uint32 source = 3;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->source(), target);
  }
  
  // optional bytes key = 4;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }
  
  // optional uint32 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HashGet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table());
    }
    
    // required uint32 shard = 2;
    if (has_shard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shard());
    }
    
    // required uint32 source = 3;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source());
    }
    
    // optional bytes key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
    // optional uint32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HashGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HashGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HashGet::MergeFrom(const HashGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_shard()) {
      set_shard(from.shard());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HashGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashGet::CopyFrom(const HashGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashGet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void HashGet::Swap(HashGet* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    std::swap(shard_, other->shard_);
    std::swap(source_, other->source_);
    std::swap(key_, other->key_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HashGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashGet_descriptor_;
  metadata.reflection = HashGet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableData::kSourceFieldNumber;
const int TableData::kTableFieldNumber;
const int TableData::kShardFieldNumber;
const int TableData::kDoneFieldNumber;
const int TableData::kKeyFieldNumber;
const int TableData::kTableDataFieldNumber;
const int TableData::kKvDataFieldNumber;
const int TableData::kMissingKeyFieldNumber;
#endif  // !_MSC_VER

TableData::TableData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableData::InitAsDefaultInstance() {
}

TableData::TableData(const TableData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableData::SharedCtor() {
  _cached_size_ = 0;
  source_ = 0u;
  table_ = 0u;
  shard_ = 0u;
  done_ = false;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  table_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  missing_key_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableData::~TableData() {
  SharedDtor();
}

void TableData::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (table_data_ != &::google::protobuf::internal::kEmptyString) {
    delete table_data_;
  }
  if (this != default_instance_) {
  }
}

void TableData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableData_descriptor_;
}

const TableData& TableData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2eproto();  return *default_instance_;
}

TableData* TableData::default_instance_ = NULL;

TableData* TableData::New() const {
  return new TableData;
}

void TableData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_ = 0u;
    table_ = 0u;
    shard_ = 0u;
    done_ = false;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_table_data()) {
      if (table_data_ != &::google::protobuf::internal::kEmptyString) {
        table_data_->clear();
      }
    }
    missing_key_ = false;
  }
  kv_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table;
        break;
      }
      
      // required uint32 table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_)));
          set_has_table();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_shard;
        break;
      }
      
      // required uint32 shard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shard_)));
          set_has_shard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_done;
        break;
      }
      
      // required bool done = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_key;
        break;
      }
      
      // required bytes key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_table_data;
        break;
      }
      
      // optional bytes table_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_kv_data;
        break;
      }
      
      // repeated .lapis.Arg kv_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kv_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kv_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_kv_data;
        if (input->ExpectTag(64)) goto parse_missing_key;
        break;
      }
      
      // optional bool missing_key = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missing_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &missing_key_)));
          set_has_missing_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source(), output);
  }
  
  // required uint32 table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->table(), output);
  }
  
  // required uint32 shard = 3;
  if (has_shard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shard(), output);
  }
  
  // required bool done = 4;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->done(), output);
  }
  
  // required bytes key = 5;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->key(), output);
  }
  
  // optional bytes table_data = 6;
  if (has_table_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->table_data(), output);
  }
  
  // repeated .lapis.Arg kv_data = 7;
  for (int i = 0; i < this->kv_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->kv_data(i), output);
  }
  
  // optional bool missing_key = 8;
  if (has_missing_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->missing_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 source = 1;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source(), target);
  }
  
  // required uint32 table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->table(), target);
  }
  
  // required uint32 shard = 3;
  if (has_shard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->shard(), target);
  }
  
  // required bool done = 4;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->done(), target);
  }
  
  // required bytes key = 5;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->key(), target);
  }
  
  // optional bytes table_data = 6;
  if (has_table_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->table_data(), target);
  }
  
  // repeated .lapis.Arg kv_data = 7;
  for (int i = 0; i < this->kv_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->kv_data(i), target);
  }
  
  // optional bool missing_key = 8;
  if (has_missing_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->missing_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source());
    }
    
    // required uint32 table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table());
    }
    
    // required uint32 shard = 3;
    if (has_shard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shard());
    }
    
    // required bool done = 4;
    if (has_done()) {
      total_size += 1 + 1;
    }
    
    // required bytes key = 5;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
    // optional bytes table_data = 6;
    if (has_table_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_data());
    }
    
    // optional bool missing_key = 8;
    if (has_missing_key()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .lapis.Arg kv_data = 7;
  total_size += 1 * this->kv_data_size();
  for (int i = 0; i < this->kv_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kv_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableData::MergeFrom(const TableData& from) {
  GOOGLE_CHECK_NE(&from, this);
  kv_data_.MergeFrom(from.kv_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_shard()) {
      set_shard(from.shard());
    }
    if (from.has_done()) {
      set_done(from.done());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_table_data()) {
      set_table_data(from.table_data());
    }
    if (from.has_missing_key()) {
      set_missing_key(from.missing_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableData::CopyFrom(const TableData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  for (int i = 0; i < kv_data_size(); i++) {
    if (!this->kv_data(i).IsInitialized()) return false;
  }
  return true;
}

void TableData::Swap(TableData* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(table_, other->table_);
    std::swap(shard_, other->shard_);
    std::swap(done_, other->done_);
    std::swap(key_, other->key_);
    std::swap(table_data_, other->table_data_);
    kv_data_.Swap(&other->kv_data_);
    std::swap(missing_key_, other->missing_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableData_descriptor_;
  metadata.reflection = TableData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiskData::kBlockNumberFieldNumber;
const int DiskData::kTableFieldNumber;
const int DiskData::kRecordsFieldNumber;
#endif  // !_MSC_VER

DiskData::DiskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiskData::InitAsDefaultInstance() {
}

DiskData::DiskData(const DiskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiskData::SharedCtor() {
  _cached_size_ = 0;
  block_number_ = 0u;
  table_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiskData::~DiskData() {
  SharedDtor();
}

void DiskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiskData_descriptor_;
}

const DiskData& DiskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2eproto();  return *default_instance_;
}

DiskData* DiskData::default_instance_ = NULL;

DiskData* DiskData::New() const {
  return new DiskData;
}

void DiskData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    block_number_ = 0u;
    table_ = 0u;
  }
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 block_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_number_)));
          set_has_block_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table;
        break;
      }
      
      // required uint32 table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_)));
          set_has_table();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_records;
        break;
      }
      
      // repeated .lapis.Arg records = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_records;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 block_number = 1;
  if (has_block_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->block_number(), output);
  }
  
  // required uint32 table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->table(), output);
  }
  
  // repeated .lapis.Arg records = 3;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->records(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 block_number = 1;
  if (has_block_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->block_number(), target);
  }
  
  // required uint32 table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->table(), target);
  }
  
  // repeated .lapis.Arg records = 3;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->records(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiskData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 block_number = 1;
    if (has_block_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->block_number());
    }
    
    // required uint32 table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table());
    }
    
  }
  // repeated .lapis.Arg records = 3;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiskData::MergeFrom(const DiskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_number()) {
      set_block_number(from.block_number());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiskData::CopyFrom(const DiskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < records_size(); i++) {
    if (!this->records(i).IsInitialized()) return false;
  }
  return true;
}

void DiskData::Swap(DiskData* other) {
  if (other != this) {
    std::swap(block_number_, other->block_number_);
    std::swap(table_, other->table_);
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiskData_descriptor_;
  metadata.reflection = DiskData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lapis

// @@protoc_insertion_point(global_scope)
