package lapis;


message SystemConfProto {
  //rank for coordinator
  required int32 coordinator = 1;
  //start rank for worker, both start and end ranks are included.
  required int32 worker_start = 2;
  //end rank for worker
  required int32 worker_end = 3;

  //if the following fields are omitted, then use the setting of workers

  //start rank for distributed memory table
  optional int32 memory_start = 4;
  //end rank for distributed memory table
  optional int32 memory_end = 5;
  //start rank for distributed disk table
  optional int32 disk_start = 6;
  //end rank for distributed disk table
  optional int32 disk_end = 7;
}

message DataMetaProto {
  required string name = 1;
  required string parser = 2;
  optional string path = 3;
  optional int64 size = 4;

  enum DataType {
    FEATURE = 0;
    LABEL = 1;
  }

  optional DataType type = 5;

  // following three fields will be used for rgb image feature
  optional int32 channels = 6;
  optional int32 height = 7;
  optional int32 width = 8;
}

message RGBDatum {
  optional int32 channels = 1 [default = 3];

  // size of the cropped image, default setting is no crop
  optional int32 height = 2 [default = 0];
  optional int32 width = 3 [default = 0];

  required string content = 4;
}

message ParamProto {
  required string name = 1;
  optional string initializer = 2;
  // for vector, shape is <1, n>; for matrix, it is <m, n>
  repeated int32 shape = 3;
  optional string partitioner = 4; // e.g., row or column partition
}

message BlobProto{
}

// both edge and layer may have params and data blob
message EdgeProto {
  optional string name = 1;
  repeated ParamProto params = 2;
  optional BlobProto blob = 3;
}



message LayerProto {
  required string name = 1;
  repeated ParamProto params = 2;
  optional BlobProto blob = 3;
  repeated EdgeProto out_edges = 4;
  repeated EdgeProto in_edges = 5;
}

message ModelConfProto {
  // model name
  optional string name = 1;
  repeated DataMetaProto data = 2;
  repeated LayerProto layers = 3;
}