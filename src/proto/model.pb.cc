// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lapis {

namespace {

const ::google::protobuf::Descriptor* ParamProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParamProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ParamProto_InitMethod_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LayerProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayerProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LayerProto_PoolingMethod_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MeanProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeanProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DAryProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DAryProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PerformanceProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PerformanceProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SolverProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolverProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SolverProto_Method_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SolverProto_GradAlg_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Model_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Model_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdaGradValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdaGradValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* SGDValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SGDValue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SGDValue_ChangeProto_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VKey_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_model_2eproto() {
  protobuf_AddDesc_model_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "model.proto");
  GOOGLE_CHECK(file != NULL);
  ParamProto_descriptor_ = file->message_type(0);
  static const int ParamProto_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, init_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, std_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, momentum_multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, learning_rate_multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, weight_decay_multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, split_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, grad_),
  };
  ParamProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParamProto_descriptor_,
      ParamProto::default_instance_,
      ParamProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParamProto));
  ParamProto_InitMethod_descriptor_ = ParamProto_descriptor_->enum_type(0);
  LayerProto_descriptor_ = file->message_type(1);
  static const int LayerProto_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, window_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, num_groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, knorm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, pooling_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, cropsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, drop_prob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, grad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, col_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, split_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, split_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, split_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, concat_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, topk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, bottom_),
  };
  LayerProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LayerProto_descriptor_,
      LayerProto::default_instance_,
      LayerProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LayerProto));
  LayerProto_PoolingMethod_descriptor_ = LayerProto_descriptor_->enum_type(0);
  MeanProto_descriptor_ = file->message_type(2);
  static const int MeanProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanProto, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanProto, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanProto, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanProto, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanProto, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanProto, diff_),
  };
  MeanProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MeanProto_descriptor_,
      MeanProto::default_instance_,
      MeanProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MeanProto));
  DAryProto_descriptor_ = file->message_type(3);
  static const int DAryProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DAryProto, partition_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DAryProto, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DAryProto, value_),
  };
  DAryProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DAryProto_descriptor_,
      DAryProto::default_instance_,
      DAryProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DAryProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DAryProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DAryProto));
  NetProto_descriptor_ = file->message_type(4);
  static const int NetProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto, layer_),
  };
  NetProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_descriptor_,
      NetProto::default_instance_,
      NetProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto));
  PerformanceProto_descriptor_ = file->message_type(5);
  static const int PerformanceProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerformanceProto, topk_precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerformanceProto, top_precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerformanceProto, loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerformanceProto, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerformanceProto, step_),
  };
  PerformanceProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PerformanceProto_descriptor_,
      PerformanceProto::default_instance_,
      PerformanceProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerformanceProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerformanceProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PerformanceProto));
  SolverProto_descriptor_ = file->message_type(6);
  static const int SolverProto_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, checkpoint_after_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, checkpoint_every_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, checkpoint_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, checkpoint_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, display_after_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, display_every_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, display_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, validation_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, validation_after_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, validation_every_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, test_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, test_after_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, test_every_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, perf_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, alg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, batchsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, train_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, validation_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, test_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, max_splits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, sgd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, adagrad_),
  };
  SolverProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SolverProto_descriptor_,
      SolverProto::default_instance_,
      SolverProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SolverProto));
  SolverProto_Method_descriptor_ = SolverProto_descriptor_->enum_type(0);
  SolverProto_GradAlg_descriptor_ = SolverProto_descriptor_->enum_type(1);
  Model_descriptor_ = file->message_type(7);
  static const int Model_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, solver_),
  };
  Model_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Model_descriptor_,
      Model::default_instance_,
      Model_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Model));
  Record_descriptor_ = file->message_type(8);
  static const int Record_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, id_),
  };
  Record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_descriptor_,
      Record::default_instance_,
      Record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record));
  AdaGradValue_descriptor_ = file->message_type(9);
  static const int AdaGradValue_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaGradValue, n_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaGradValue, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaGradValue, learning_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaGradValue, kinit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaGradValue, threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaGradValue, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaGradValue, history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaGradValue, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaGradValue, grad_),
  };
  AdaGradValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdaGradValue_descriptor_,
      AdaGradValue::default_instance_,
      AdaGradValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaGradValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaGradValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdaGradValue));
  SGDValue_descriptor_ = file->message_type(10);
  static const int SGDValue_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDValue, base_learning_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDValue, momentum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDValue, weight_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDValue, gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDValue, learning_rate_change_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDValue, learning_rate_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDValue, learning_rate_multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDValue, weight_decay_multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDValue, n_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDValue, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDValue, threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDValue, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDValue, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDValue, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDValue, grad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDValue, history_),
  };
  SGDValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SGDValue_descriptor_,
      SGDValue::default_instance_,
      SGDValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SGDValue));
  SGDValue_ChangeProto_descriptor_ = SGDValue_descriptor_->enum_type(0);
  VKey_descriptor_ = file->message_type(11);
  static const int VKey_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VKey, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VKey, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VKey, gid_),
  };
  VKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VKey_descriptor_,
      VKey::default_instance_,
      VKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VKey));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_model_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParamProto_descriptor_, &ParamProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LayerProto_descriptor_, &LayerProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MeanProto_descriptor_, &MeanProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DAryProto_descriptor_, &DAryProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_descriptor_, &NetProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PerformanceProto_descriptor_, &PerformanceProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SolverProto_descriptor_, &SolverProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Model_descriptor_, &Model::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_descriptor_, &Record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdaGradValue_descriptor_, &AdaGradValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SGDValue_descriptor_, &SGDValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VKey_descriptor_, &VKey::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_model_2eproto() {
  delete ParamProto::default_instance_;
  delete ParamProto_reflection_;
  delete LayerProto::default_instance_;
  delete LayerProto_reflection_;
  delete MeanProto::default_instance_;
  delete MeanProto_reflection_;
  delete DAryProto::default_instance_;
  delete DAryProto_reflection_;
  delete NetProto::default_instance_;
  delete NetProto_reflection_;
  delete PerformanceProto::default_instance_;
  delete PerformanceProto_reflection_;
  delete SolverProto::default_instance_;
  delete SolverProto_reflection_;
  delete SolverProto::_default_checkpoint_prefix_;
  delete SolverProto::_default_display_prefix_;
  delete SolverProto::_default_perf_prefix_;
  delete Model::default_instance_;
  delete Model_reflection_;
  delete Record::default_instance_;
  delete Record_reflection_;
  delete AdaGradValue::default_instance_;
  delete AdaGradValue_reflection_;
  delete SGDValue::default_instance_;
  delete SGDValue_reflection_;
  delete VKey::default_instance_;
  delete VKey_reflection_;
}

void protobuf_AddDesc_model_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013model.proto\022\005lapis\"\266\004\n\nParamProto\022\014\n\004n"
    "ame\030\001 \002(\t\022\r\n\005shape\030\002 \003(\005\022<\n\013init_method\030"
    "\003 \001(\0162\034.lapis.ParamProto.InitMethod:\tkCo"
    "nstant\022\020\n\005value\030\004 \001(\002:\0011\022\017\n\003low\030\005 \001(\002:\002-"
    "1\022\017\n\004high\030\006 \001(\002:\0011\022\017\n\004mean\030\007 \001(\002:\0010\022\016\n\003s"
    "td\030\010 \001(\002:\0011\022\036\n\023momentum_multiplier\030\t \001(\002"
    ":\0011\022#\n\030learning_rate_multiplier\030\n \001(\002:\0011"
    "\022\"\n\027weight_decay_multiplier\030\013 \001(\002:\0011\022 \n\017"
    "split_threshold\030\014 \001(\005:\0075000000\022\030\n\tpartit"
    "ion\030\r \001(\010:\005false\022\036\n\004data\030\016 \001(\0132\020.lapis.D"
    "AryProto\022\036\n\004grad\030\017 \001(\0132\020.lapis.DAryProto"
    "\"\222\001\n\nInitMethod\022\r\n\tkConstant\020\000\022\r\n\tkGauss"
    "ain\020\001\022\014\n\010kUniform\020\002\022\017\n\013kPretrained\020\003\022\026\n\022"
    "kGaussainSqrtFanIn\020\004\022\025\n\021kUniformSqrtFanI"
    "n\020\005\022\030\n\024kUniformSqrtFanInOut\020\006\"\373\004\n\nLayerP"
    "roto\022\014\n\004name\030\001 \002(\t\022\014\n\004type\030\002 \002(\t\022\022\n\nnum_"
    "output\030\003 \001(\005\022 \n\005param\030\004 \003(\0132\021.lapis.Para"
    "mProto\022\023\n\013window_size\030\010 \001(\005\022\021\n\006stride\030\t "
    "\001(\005:\0011\022\016\n\003pad\030\n \001(\005:\0010\022\025\n\nnum_groups\030\013 \001"
    "(\005:\0011\022\r\n\005alpha\030\014 \001(\002\022\014\n\004beta\030\r \001(\002\022\020\n\005kn"
    "orm\030\016 \001(\002:\0011\0227\n\016pooling_method\030\020 \001(\0162\037.l"
    "apis.LayerProto.PoolingMethod\022\020\n\010cropsiz"
    "e\030\021 \001(\005\022\016\n\006mirror\030\022 \001(\010\022\026\n\tdrop_prob\030\023 \001"
    "(\002:\0030.5\022\036\n\004data\030\024 \001(\0132\020.lapis.DAryProto\022"
    "\036\n\004grad\030\025 \001(\0132\020.lapis.DAryProto\022\"\n\010col_d"
    "ata\030\026 \001(\0132\020.lapis.DAryProto\022$\n\nsplit_dat"
    "a\030\027 \001(\0132\020.lapis.DAryProto\022\022\n\nsplit_size\030"
    "\030 \001(\005\022\024\n\tsplit_dim\030\031 \001(\005:\0011\022\025\n\nconcat_di"
    "m\030\032 \001(\005:\0011\022\017\n\004topk\030\033 \001(\005:\0015\022\013\n\003top\030\034 \003(\t"
    "\022\016\n\006bottom\030\035 \003(\t\"1\n\rPoolingMethod\022\017\n\013kMa"
    "xPooling\020\001\022\017\n\013kAvgPooling\020\002\"y\n\tMeanProto"
    "\022\016\n\003num\030\001 \001(\005:\0010\022\023\n\010channels\030\002 \001(\005:\0010\022\021\n"
    "\006height\030\003 \001(\005:\0010\022\020\n\005width\030\004 \001(\005:\0010\022\020\n\004da"
    "ta\030\005 \003(\002B\002\020\001\022\020\n\004diff\030\006 \003(\002B\002\020\001\"D\n\tDAryPr"
    "oto\022\025\n\rpartition_dim\030\001 \001(\005\022\r\n\005shape\030\002 \003("
    "\005\022\021\n\005value\030\003 \003(\002B\002\020\001\",\n\010NetProto\022 \n\005laye"
    "r\030\002 \003(\0132\021.lapis.LayerProto\"{\n\020Performanc"
    "eProto\022\031\n\016topk_precision\030\001 \001(\002:\0010\022\030\n\rtop"
    "_precision\030\002 \001(\002:\0010\022\017\n\004loss\030\003 \001(\002:\0010\022\020\n\005"
    "count\030\004 \001(\005:\0010\022\017\n\004step\030\005 \001(\005:\0010\"\326\006\n\013Solv"
    "erProto\022/\n\006method\030\001 \001(\0162\031.lapis.SolverPr"
    "oto.Method:\004kSGD\022!\n\026checkpoint_after_ste"
    "ps\030\002 \001(\005:\0010\022!\n\026checkpoint_every_steps\030\003 "
    "\001(\005:\0010\022)\n\021checkpoint_prefix\030\004 \001(\t:\016tmp/c"
    "heckpoint\022\032\n\017checkpoint_step\030\005 \001(\005:\0010\022\036\n"
    "\023display_after_steps\030\006 \001(\005:\0010\022\036\n\023display"
    "_every_steps\030\007 \001(\005:\0010\022#\n\016display_prefix\030"
    "\010 \001(\t:\013tmp/display\022\032\n\017validation_step\030\t "
    "\001(\005:\0010\022!\n\026validation_after_steps\030\n \001(\005:\001"
    "0\022!\n\026validation_every_steps\030\013 \001(\005:\0010\022\024\n\t"
    "test_step\030\014 \001(\005:\0010\022\033\n\020test_after_steps\030\r"
    " \001(\005:\0010\022\033\n\020test_every_steps\030\016 \001(\005:\0010\022$\n\013"
    "perf_prefix\030\017 \001(\t:\017tmp/performance\0229\n\003al"
    "g\030\020 \001(\0162\032.lapis.SolverProto.GradAlg:\020kBa"
    "ckPropagation\022\021\n\tbatchsize\030\023 \001(\005\022\023\n\013trai"
    "n_steps\030\024 \001(\005\022\030\n\020validation_steps\030\025 \001(\005\022"
    "\022\n\ntest_steps\030\026 \001(\005\022\030\n\nmax_splits\030\027 \001(\005:"
    "\0043571\022\034\n\003sgd\030\030 \001(\0132\017.lapis.SGDValue\022$\n\007a"
    "dagrad\030\031 \001(\0132\023.lapis.AdaGradValue\" \n\006Met"
    "hod\022\010\n\004kSGD\020\001\022\014\n\010kAdaGrad\020\002\";\n\007GradAlg\022\024"
    "\n\020kBackPropagation\020\001\022\032\n\026kContrastiveDive"
    "rgence\020\002\"W\n\005Model\022\014\n\004name\030\001 \001(\t\022\034\n\003net\030\002"
    " \001(\0132\017.lapis.NetProto\022\"\n\006solver\030\003 \001(\0132\022."
    "lapis.SolverProto\"D\n\006Record\022\037\n\005image\030\001 \001"
    "(\0132\020.lapis.DAryProto\022\r\n\005label\030\002 \001(\005\022\n\n\002i"
    "d\030\003 \001(\t\"\345\001\n\014AdaGradValue\022\020\n\010n_update\030\001 \003"
    "(\005\022\022\n\007version\030\002 \001(\005:\0010\022\032\n\rlearning_rate\030"
    "\003 \001(\002:\0030.1\022\020\n\005kinit\030\004 \001(\002:\0011\022\021\n\tthreshol"
    "d\030\005 \001(\005\022\013\n\003gid\030\006 \001(\005\022!\n\007history\030\007 \001(\0132\020."
    "lapis.DAryProto\022\036\n\004data\030\010 \001(\0132\020.lapis.DA"
    "ryProto\022\036\n\004grad\030\t \003(\0132\020.lapis.DAryProto\""
    "\244\004\n\010SGDValue\022\032\n\022base_learning_rate\030\001 \001(\002"
    "\022\023\n\010momentum\030\002 \001(\002:\0010\022\027\n\014weight_decay\030\003 "
    "\001(\002:\0010\022\r\n\005gamma\030\004 \001(\002\022\"\n\032learning_rate_c"
    "hange_steps\030\005 \001(\005\022E\n\024learning_rate_chang"
    "e\030\006 \001(\0162\033.lapis.SGDValue.ChangeProto:\nkI"
    "nverse_t\022#\n\030learning_rate_multiplier\030\007 \001"
    "(\002:\0011\022\"\n\027weight_decay_multiplier\030\010 \001(\002:\001"
    "1\022\023\n\010n_update\030\t \001(\005:\0010\022\022\n\007version\030\n \001(\005:"
    "\0010\022\021\n\tthreshold\030\013 \001(\005\022\n\n\002id\030\014 \001(\005\022\013\n\003gid"
    "\030\r \001(\005\022\036\n\004data\030\016 \001(\0132\020.lapis.DAryProto\022\036"
    "\n\004grad\030\017 \003(\0132\020.lapis.DAryProto\022!\n\007histor"
    "y\030\020 \001(\0132\020.lapis.DAryProto\"S\n\013ChangeProto"
    "\022\n\n\006kFixed\020\000\022\016\n\nkInverse_t\020\001\022\020\n\014kExponen"
    "tial\020\002\022\013\n\007kLinear\020\003\022\t\n\005kStep\020\004\"1\n\004VKey\022\013"
    "\n\003key\030\001 \001(\005\022\017\n\007version\030\002 \001(\005\022\013\n\003gid\030\003 \001("
    "\005", 3441);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "model.proto", &protobuf_RegisterTypes);
  ParamProto::default_instance_ = new ParamProto();
  LayerProto::default_instance_ = new LayerProto();
  MeanProto::default_instance_ = new MeanProto();
  DAryProto::default_instance_ = new DAryProto();
  NetProto::default_instance_ = new NetProto();
  PerformanceProto::default_instance_ = new PerformanceProto();
  SolverProto::_default_checkpoint_prefix_ =
      new ::std::string("tmp/checkpoint", 14);
  SolverProto::_default_display_prefix_ =
      new ::std::string("tmp/display", 11);
  SolverProto::_default_perf_prefix_ =
      new ::std::string("tmp/performance", 15);
  SolverProto::default_instance_ = new SolverProto();
  Model::default_instance_ = new Model();
  Record::default_instance_ = new Record();
  AdaGradValue::default_instance_ = new AdaGradValue();
  SGDValue::default_instance_ = new SGDValue();
  VKey::default_instance_ = new VKey();
  ParamProto::default_instance_->InitAsDefaultInstance();
  LayerProto::default_instance_->InitAsDefaultInstance();
  MeanProto::default_instance_->InitAsDefaultInstance();
  DAryProto::default_instance_->InitAsDefaultInstance();
  NetProto::default_instance_->InitAsDefaultInstance();
  PerformanceProto::default_instance_->InitAsDefaultInstance();
  SolverProto::default_instance_->InitAsDefaultInstance();
  Model::default_instance_->InitAsDefaultInstance();
  Record::default_instance_->InitAsDefaultInstance();
  AdaGradValue::default_instance_->InitAsDefaultInstance();
  SGDValue::default_instance_->InitAsDefaultInstance();
  VKey::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_model_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_model_2eproto {
  StaticDescriptorInitializer_model_2eproto() {
    protobuf_AddDesc_model_2eproto();
  }
} static_descriptor_initializer_model_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ParamProto_InitMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParamProto_InitMethod_descriptor_;
}
bool ParamProto_InitMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ParamProto_InitMethod ParamProto::kConstant;
const ParamProto_InitMethod ParamProto::kGaussain;
const ParamProto_InitMethod ParamProto::kUniform;
const ParamProto_InitMethod ParamProto::kPretrained;
const ParamProto_InitMethod ParamProto::kGaussainSqrtFanIn;
const ParamProto_InitMethod ParamProto::kUniformSqrtFanIn;
const ParamProto_InitMethod ParamProto::kUniformSqrtFanInOut;
const ParamProto_InitMethod ParamProto::InitMethod_MIN;
const ParamProto_InitMethod ParamProto::InitMethod_MAX;
const int ParamProto::InitMethod_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ParamProto::kNameFieldNumber;
const int ParamProto::kShapeFieldNumber;
const int ParamProto::kInitMethodFieldNumber;
const int ParamProto::kValueFieldNumber;
const int ParamProto::kLowFieldNumber;
const int ParamProto::kHighFieldNumber;
const int ParamProto::kMeanFieldNumber;
const int ParamProto::kStdFieldNumber;
const int ParamProto::kMomentumMultiplierFieldNumber;
const int ParamProto::kLearningRateMultiplierFieldNumber;
const int ParamProto::kWeightDecayMultiplierFieldNumber;
const int ParamProto::kSplitThresholdFieldNumber;
const int ParamProto::kPartitionFieldNumber;
const int ParamProto::kDataFieldNumber;
const int ParamProto::kGradFieldNumber;
#endif  // !_MSC_VER

ParamProto::ParamProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.ParamProto)
}

void ParamProto::InitAsDefaultInstance() {
  data_ = const_cast< ::lapis::DAryProto*>(&::lapis::DAryProto::default_instance());
  grad_ = const_cast< ::lapis::DAryProto*>(&::lapis::DAryProto::default_instance());
}

ParamProto::ParamProto(const ParamProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.ParamProto)
}

void ParamProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  init_method_ = 0;
  value_ = 1;
  low_ = -1;
  high_ = 1;
  mean_ = 0;
  std_ = 1;
  momentum_multiplier_ = 1;
  learning_rate_multiplier_ = 1;
  weight_decay_multiplier_ = 1;
  split_threshold_ = 5000000;
  partition_ = false;
  data_ = NULL;
  grad_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParamProto::~ParamProto() {
  // @@protoc_insertion_point(destructor:lapis.ParamProto)
  SharedDtor();
}

void ParamProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete data_;
    delete grad_;
  }
}

void ParamProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParamProto_descriptor_;
}

const ParamProto& ParamProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

ParamProto* ParamProto::default_instance_ = NULL;

ParamProto* ParamProto::New() const {
  return new ParamProto;
}

void ParamProto::Clear() {
  if (_has_bits_[0 / 32] & 253) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    init_method_ = 0;
    value_ = 1;
    low_ = -1;
    high_ = 1;
    mean_ = 0;
    std_ = 1;
  }
  if (_has_bits_[8 / 32] & 32512) {
    momentum_multiplier_ = 1;
    learning_rate_multiplier_ = 1;
    weight_decay_multiplier_ = 1;
    split_threshold_ = 5000000;
    partition_ = false;
    if (has_data()) {
      if (data_ != NULL) data_->::lapis::DAryProto::Clear();
    }
    if (has_grad()) {
      if (grad_ != NULL) grad_->::lapis::DAryProto::Clear();
    }
  }
  shape_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParamProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.ParamProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shape;
        break;
      }

      // repeated int32 shape = 2;
      case 2: {
        if (tag == 16) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_shape())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shape;
        if (input->ExpectTag(24)) goto parse_init_method;
        break;
      }

      // optional .lapis.ParamProto.InitMethod init_method = 3 [default = kConstant];
      case 3: {
        if (tag == 24) {
         parse_init_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lapis::ParamProto_InitMethod_IsValid(value)) {
            set_init_method(static_cast< ::lapis::ParamProto_InitMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_value;
        break;
      }

      // optional float value = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_low;
        break;
      }

      // optional float low = 5 [default = -1];
      case 5: {
        if (tag == 45) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_high;
        break;
      }

      // optional float high = 6 [default = 1];
      case 6: {
        if (tag == 53) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_mean;
        break;
      }

      // optional float mean = 7 [default = 0];
      case 7: {
        if (tag == 61) {
         parse_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_std;
        break;
      }

      // optional float std = 8 [default = 1];
      case 8: {
        if (tag == 69) {
         parse_std:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &std_)));
          set_has_std();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_momentum_multiplier;
        break;
      }

      // optional float momentum_multiplier = 9 [default = 1];
      case 9: {
        if (tag == 77) {
         parse_momentum_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_multiplier_)));
          set_has_momentum_multiplier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_learning_rate_multiplier;
        break;
      }

      // optional float learning_rate_multiplier = 10 [default = 1];
      case 10: {
        if (tag == 85) {
         parse_learning_rate_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_multiplier_)));
          set_has_learning_rate_multiplier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_weight_decay_multiplier;
        break;
      }

      // optional float weight_decay_multiplier = 11 [default = 1];
      case 11: {
        if (tag == 93) {
         parse_weight_decay_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_decay_multiplier_)));
          set_has_weight_decay_multiplier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_split_threshold;
        break;
      }

      // optional int32 split_threshold = 12 [default = 5000000];
      case 12: {
        if (tag == 96) {
         parse_split_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &split_threshold_)));
          set_has_split_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_partition;
        break;
      }

      // optional bool partition = 13 [default = false];
      case 13: {
        if (tag == 104) {
         parse_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &partition_)));
          set_has_partition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_data;
        break;
      }

      // optional .lapis.DAryProto data = 14;
      case 14: {
        if (tag == 114) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_grad;
        break;
      }

      // optional .lapis.DAryProto grad = 15;
      case 15: {
        if (tag == 122) {
         parse_grad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.ParamProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.ParamProto)
  return false;
#undef DO_
}

void ParamProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.ParamProto)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated int32 shape = 2;
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->shape(i), output);
  }

  // optional .lapis.ParamProto.InitMethod init_method = 3 [default = kConstant];
  if (has_init_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->init_method(), output);
  }

  // optional float value = 4 [default = 1];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->value(), output);
  }

  // optional float low = 5 [default = -1];
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->low(), output);
  }

  // optional float high = 6 [default = 1];
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->high(), output);
  }

  // optional float mean = 7 [default = 0];
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->mean(), output);
  }

  // optional float std = 8 [default = 1];
  if (has_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->std(), output);
  }

  // optional float momentum_multiplier = 9 [default = 1];
  if (has_momentum_multiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->momentum_multiplier(), output);
  }

  // optional float learning_rate_multiplier = 10 [default = 1];
  if (has_learning_rate_multiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->learning_rate_multiplier(), output);
  }

  // optional float weight_decay_multiplier = 11 [default = 1];
  if (has_weight_decay_multiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->weight_decay_multiplier(), output);
  }

  // optional int32 split_threshold = 12 [default = 5000000];
  if (has_split_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->split_threshold(), output);
  }

  // optional bool partition = 13 [default = false];
  if (has_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->partition(), output);
  }

  // optional .lapis.DAryProto data = 14;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->data(), output);
  }

  // optional .lapis.DAryProto grad = 15;
  if (has_grad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->grad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.ParamProto)
}

::google::protobuf::uint8* ParamProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.ParamProto)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated int32 shape = 2;
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->shape(i), target);
  }

  // optional .lapis.ParamProto.InitMethod init_method = 3 [default = kConstant];
  if (has_init_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->init_method(), target);
  }

  // optional float value = 4 [default = 1];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->value(), target);
  }

  // optional float low = 5 [default = -1];
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->low(), target);
  }

  // optional float high = 6 [default = 1];
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->high(), target);
  }

  // optional float mean = 7 [default = 0];
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->mean(), target);
  }

  // optional float std = 8 [default = 1];
  if (has_std()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->std(), target);
  }

  // optional float momentum_multiplier = 9 [default = 1];
  if (has_momentum_multiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->momentum_multiplier(), target);
  }

  // optional float learning_rate_multiplier = 10 [default = 1];
  if (has_learning_rate_multiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->learning_rate_multiplier(), target);
  }

  // optional float weight_decay_multiplier = 11 [default = 1];
  if (has_weight_decay_multiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->weight_decay_multiplier(), target);
  }

  // optional int32 split_threshold = 12 [default = 5000000];
  if (has_split_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->split_threshold(), target);
  }

  // optional bool partition = 13 [default = false];
  if (has_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->partition(), target);
  }

  // optional .lapis.DAryProto data = 14;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->data(), target);
  }

  // optional .lapis.DAryProto grad = 15;
  if (has_grad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->grad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.ParamProto)
  return target;
}

int ParamProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .lapis.ParamProto.InitMethod init_method = 3 [default = kConstant];
    if (has_init_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->init_method());
    }

    // optional float value = 4 [default = 1];
    if (has_value()) {
      total_size += 1 + 4;
    }

    // optional float low = 5 [default = -1];
    if (has_low()) {
      total_size += 1 + 4;
    }

    // optional float high = 6 [default = 1];
    if (has_high()) {
      total_size += 1 + 4;
    }

    // optional float mean = 7 [default = 0];
    if (has_mean()) {
      total_size += 1 + 4;
    }

    // optional float std = 8 [default = 1];
    if (has_std()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float momentum_multiplier = 9 [default = 1];
    if (has_momentum_multiplier()) {
      total_size += 1 + 4;
    }

    // optional float learning_rate_multiplier = 10 [default = 1];
    if (has_learning_rate_multiplier()) {
      total_size += 1 + 4;
    }

    // optional float weight_decay_multiplier = 11 [default = 1];
    if (has_weight_decay_multiplier()) {
      total_size += 1 + 4;
    }

    // optional int32 split_threshold = 12 [default = 5000000];
    if (has_split_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->split_threshold());
    }

    // optional bool partition = 13 [default = false];
    if (has_partition()) {
      total_size += 1 + 1;
    }

    // optional .lapis.DAryProto data = 14;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional .lapis.DAryProto grad = 15;
    if (has_grad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grad());
    }

  }
  // repeated int32 shape = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->shape_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shape(i));
    }
    total_size += 1 * this->shape_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParamProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParamProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParamProto::MergeFrom(const ParamProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  shape_.MergeFrom(from.shape_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_init_method()) {
      set_init_method(from.init_method());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_std()) {
      set_std(from.std());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_momentum_multiplier()) {
      set_momentum_multiplier(from.momentum_multiplier());
    }
    if (from.has_learning_rate_multiplier()) {
      set_learning_rate_multiplier(from.learning_rate_multiplier());
    }
    if (from.has_weight_decay_multiplier()) {
      set_weight_decay_multiplier(from.weight_decay_multiplier());
    }
    if (from.has_split_threshold()) {
      set_split_threshold(from.split_threshold());
    }
    if (from.has_partition()) {
      set_partition(from.partition());
    }
    if (from.has_data()) {
      mutable_data()->::lapis::DAryProto::MergeFrom(from.data());
    }
    if (from.has_grad()) {
      mutable_grad()->::lapis::DAryProto::MergeFrom(from.grad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParamProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamProto::CopyFrom(const ParamProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ParamProto::Swap(ParamProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    shape_.Swap(&other->shape_);
    std::swap(init_method_, other->init_method_);
    std::swap(value_, other->value_);
    std::swap(low_, other->low_);
    std::swap(high_, other->high_);
    std::swap(mean_, other->mean_);
    std::swap(std_, other->std_);
    std::swap(momentum_multiplier_, other->momentum_multiplier_);
    std::swap(learning_rate_multiplier_, other->learning_rate_multiplier_);
    std::swap(weight_decay_multiplier_, other->weight_decay_multiplier_);
    std::swap(split_threshold_, other->split_threshold_);
    std::swap(partition_, other->partition_);
    std::swap(data_, other->data_);
    std::swap(grad_, other->grad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParamProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParamProto_descriptor_;
  metadata.reflection = ParamProto_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LayerProto_PoolingMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerProto_PoolingMethod_descriptor_;
}
bool LayerProto_PoolingMethod_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LayerProto_PoolingMethod LayerProto::kMaxPooling;
const LayerProto_PoolingMethod LayerProto::kAvgPooling;
const LayerProto_PoolingMethod LayerProto::PoolingMethod_MIN;
const LayerProto_PoolingMethod LayerProto::PoolingMethod_MAX;
const int LayerProto::PoolingMethod_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LayerProto::kNameFieldNumber;
const int LayerProto::kTypeFieldNumber;
const int LayerProto::kNumOutputFieldNumber;
const int LayerProto::kParamFieldNumber;
const int LayerProto::kWindowSizeFieldNumber;
const int LayerProto::kStrideFieldNumber;
const int LayerProto::kPadFieldNumber;
const int LayerProto::kNumGroupsFieldNumber;
const int LayerProto::kAlphaFieldNumber;
const int LayerProto::kBetaFieldNumber;
const int LayerProto::kKnormFieldNumber;
const int LayerProto::kPoolingMethodFieldNumber;
const int LayerProto::kCropsizeFieldNumber;
const int LayerProto::kMirrorFieldNumber;
const int LayerProto::kDropProbFieldNumber;
const int LayerProto::kDataFieldNumber;
const int LayerProto::kGradFieldNumber;
const int LayerProto::kColDataFieldNumber;
const int LayerProto::kSplitDataFieldNumber;
const int LayerProto::kSplitSizeFieldNumber;
const int LayerProto::kSplitDimFieldNumber;
const int LayerProto::kConcatDimFieldNumber;
const int LayerProto::kTopkFieldNumber;
const int LayerProto::kTopFieldNumber;
const int LayerProto::kBottomFieldNumber;
#endif  // !_MSC_VER

LayerProto::LayerProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.LayerProto)
}

void LayerProto::InitAsDefaultInstance() {
  data_ = const_cast< ::lapis::DAryProto*>(&::lapis::DAryProto::default_instance());
  grad_ = const_cast< ::lapis::DAryProto*>(&::lapis::DAryProto::default_instance());
  col_data_ = const_cast< ::lapis::DAryProto*>(&::lapis::DAryProto::default_instance());
  split_data_ = const_cast< ::lapis::DAryProto*>(&::lapis::DAryProto::default_instance());
}

LayerProto::LayerProto(const LayerProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.LayerProto)
}

void LayerProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_output_ = 0;
  window_size_ = 0;
  stride_ = 1;
  pad_ = 0;
  num_groups_ = 1;
  alpha_ = 0;
  beta_ = 0;
  knorm_ = 1;
  pooling_method_ = 1;
  cropsize_ = 0;
  mirror_ = false;
  drop_prob_ = 0.5f;
  data_ = NULL;
  grad_ = NULL;
  col_data_ = NULL;
  split_data_ = NULL;
  split_size_ = 0;
  split_dim_ = 1;
  concat_dim_ = 1;
  topk_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerProto::~LayerProto() {
  // @@protoc_insertion_point(destructor:lapis.LayerProto)
  SharedDtor();
}

void LayerProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
    delete data_;
    delete grad_;
    delete col_data_;
    delete split_data_;
  }
}

void LayerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerProto_descriptor_;
}

const LayerProto& LayerProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

LayerProto* LayerProto::default_instance_ = NULL;

LayerProto* LayerProto::New() const {
  return new LayerProto;
}

void LayerProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LayerProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(num_output_, window_size_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    stride_ = 1;
    pad_ = 0;
    num_groups_ = 1;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(alpha_, beta_);
    ZR_(cropsize_, mirror_);
    knorm_ = 1;
    pooling_method_ = 1;
    drop_prob_ = 0.5f;
    if (has_data()) {
      if (data_ != NULL) data_->::lapis::DAryProto::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 8323072) {
    if (has_grad()) {
      if (grad_ != NULL) grad_->::lapis::DAryProto::Clear();
    }
    if (has_col_data()) {
      if (col_data_ != NULL) col_data_->::lapis::DAryProto::Clear();
    }
    if (has_split_data()) {
      if (split_data_ != NULL) split_data_->::lapis::DAryProto::Clear();
    }
    split_size_ = 0;
    split_dim_ = 1;
    concat_dim_ = 1;
    topk_ = 5;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  param_.Clear();
  top_.Clear();
  bottom_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LayerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.LayerProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_output;
        break;
      }

      // optional int32 num_output = 3;
      case 3: {
        if (tag == 24) {
         parse_num_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_param;
        break;
      }

      // repeated .lapis.ParamProto param = 4;
      case 4: {
        if (tag == 34) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_param;
        if (input->ExpectTag(64)) goto parse_window_size;
        break;
      }

      // optional int32 window_size = 8;
      case 8: {
        if (tag == 64) {
         parse_window_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_size_)));
          set_has_window_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_stride;
        break;
      }

      // optional int32 stride = 9 [default = 1];
      case 9: {
        if (tag == 72) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_pad;
        break;
      }

      // optional int32 pad = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_)));
          set_has_pad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_num_groups;
        break;
      }

      // optional int32 num_groups = 11 [default = 1];
      case 11: {
        if (tag == 88) {
         parse_num_groups:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_groups_)));
          set_has_num_groups();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_alpha;
        break;
      }

      // optional float alpha = 12;
      case 12: {
        if (tag == 101) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_beta;
        break;
      }

      // optional float beta = 13;
      case 13: {
        if (tag == 109) {
         parse_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
          set_has_beta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_knorm;
        break;
      }

      // optional float knorm = 14 [default = 1];
      case 14: {
        if (tag == 117) {
         parse_knorm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &knorm_)));
          set_has_knorm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_pooling_method;
        break;
      }

      // optional .lapis.LayerProto.PoolingMethod pooling_method = 16;
      case 16: {
        if (tag == 128) {
         parse_pooling_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lapis::LayerProto_PoolingMethod_IsValid(value)) {
            set_pooling_method(static_cast< ::lapis::LayerProto_PoolingMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_cropsize;
        break;
      }

      // optional int32 cropsize = 17;
      case 17: {
        if (tag == 136) {
         parse_cropsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cropsize_)));
          set_has_cropsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_mirror;
        break;
      }

      // optional bool mirror = 18;
      case 18: {
        if (tag == 144) {
         parse_mirror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
          set_has_mirror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(157)) goto parse_drop_prob;
        break;
      }

      // optional float drop_prob = 19 [default = 0.5];
      case 19: {
        if (tag == 157) {
         parse_drop_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &drop_prob_)));
          set_has_drop_prob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_data;
        break;
      }

      // optional .lapis.DAryProto data = 20;
      case 20: {
        if (tag == 162) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_grad;
        break;
      }

      // optional .lapis.DAryProto grad = 21;
      case 21: {
        if (tag == 170) {
         parse_grad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_col_data;
        break;
      }

      // optional .lapis.DAryProto col_data = 22;
      case 22: {
        if (tag == 178) {
         parse_col_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_col_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_split_data;
        break;
      }

      // optional .lapis.DAryProto split_data = 23;
      case 23: {
        if (tag == 186) {
         parse_split_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_split_size;
        break;
      }

      // optional int32 split_size = 24;
      case 24: {
        if (tag == 192) {
         parse_split_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &split_size_)));
          set_has_split_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_split_dim;
        break;
      }

      // optional int32 split_dim = 25 [default = 1];
      case 25: {
        if (tag == 200) {
         parse_split_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &split_dim_)));
          set_has_split_dim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_concat_dim;
        break;
      }

      // optional int32 concat_dim = 26 [default = 1];
      case 26: {
        if (tag == 208) {
         parse_concat_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &concat_dim_)));
          set_has_concat_dim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_topk;
        break;
      }

      // optional int32 topk = 27 [default = 5];
      case 27: {
        if (tag == 216) {
         parse_topk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topk_)));
          set_has_topk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_top;
        break;
      }

      // repeated string top = 28;
      case 28: {
        if (tag == 226) {
         parse_top:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_top()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->top(this->top_size() - 1).data(),
            this->top(this->top_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "top");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_top;
        if (input->ExpectTag(234)) goto parse_bottom;
        break;
      }

      // repeated string bottom = 29;
      case 29: {
        if (tag == 234) {
         parse_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bottom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bottom(this->bottom_size() - 1).data(),
            this->bottom(this->bottom_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bottom");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_bottom;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.LayerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.LayerProto)
  return false;
#undef DO_
}

void LayerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.LayerProto)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional int32 num_output = 3;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_output(), output);
  }

  // repeated .lapis.ParamProto param = 4;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->param(i), output);
  }

  // optional int32 window_size = 8;
  if (has_window_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->window_size(), output);
  }

  // optional int32 stride = 9 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->stride(), output);
  }

  // optional int32 pad = 10 [default = 0];
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pad(), output);
  }

  // optional int32 num_groups = 11 [default = 1];
  if (has_num_groups()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->num_groups(), output);
  }

  // optional float alpha = 12;
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->alpha(), output);
  }

  // optional float beta = 13;
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->beta(), output);
  }

  // optional float knorm = 14 [default = 1];
  if (has_knorm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->knorm(), output);
  }

  // optional .lapis.LayerProto.PoolingMethod pooling_method = 16;
  if (has_pooling_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->pooling_method(), output);
  }

  // optional int32 cropsize = 17;
  if (has_cropsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->cropsize(), output);
  }

  // optional bool mirror = 18;
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->mirror(), output);
  }

  // optional float drop_prob = 19 [default = 0.5];
  if (has_drop_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->drop_prob(), output);
  }

  // optional .lapis.DAryProto data = 20;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->data(), output);
  }

  // optional .lapis.DAryProto grad = 21;
  if (has_grad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->grad(), output);
  }

  // optional .lapis.DAryProto col_data = 22;
  if (has_col_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->col_data(), output);
  }

  // optional .lapis.DAryProto split_data = 23;
  if (has_split_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->split_data(), output);
  }

  // optional int32 split_size = 24;
  if (has_split_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->split_size(), output);
  }

  // optional int32 split_dim = 25 [default = 1];
  if (has_split_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->split_dim(), output);
  }

  // optional int32 concat_dim = 26 [default = 1];
  if (has_concat_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->concat_dim(), output);
  }

  // optional int32 topk = 27 [default = 5];
  if (has_topk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->topk(), output);
  }

  // repeated string top = 28;
  for (int i = 0; i < this->top_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->top(i).data(), this->top(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "top");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->top(i), output);
  }

  // repeated string bottom = 29;
  for (int i = 0; i < this->bottom_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->bottom(i).data(), this->bottom(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "bottom");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->bottom(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.LayerProto)
}

::google::protobuf::uint8* LayerProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.LayerProto)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional int32 num_output = 3;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_output(), target);
  }

  // repeated .lapis.ParamProto param = 4;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->param(i), target);
  }

  // optional int32 window_size = 8;
  if (has_window_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->window_size(), target);
  }

  // optional int32 stride = 9 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->stride(), target);
  }

  // optional int32 pad = 10 [default = 0];
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pad(), target);
  }

  // optional int32 num_groups = 11 [default = 1];
  if (has_num_groups()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->num_groups(), target);
  }

  // optional float alpha = 12;
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->alpha(), target);
  }

  // optional float beta = 13;
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->beta(), target);
  }

  // optional float knorm = 14 [default = 1];
  if (has_knorm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->knorm(), target);
  }

  // optional .lapis.LayerProto.PoolingMethod pooling_method = 16;
  if (has_pooling_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->pooling_method(), target);
  }

  // optional int32 cropsize = 17;
  if (has_cropsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->cropsize(), target);
  }

  // optional bool mirror = 18;
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->mirror(), target);
  }

  // optional float drop_prob = 19 [default = 0.5];
  if (has_drop_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->drop_prob(), target);
  }

  // optional .lapis.DAryProto data = 20;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->data(), target);
  }

  // optional .lapis.DAryProto grad = 21;
  if (has_grad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->grad(), target);
  }

  // optional .lapis.DAryProto col_data = 22;
  if (has_col_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->col_data(), target);
  }

  // optional .lapis.DAryProto split_data = 23;
  if (has_split_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->split_data(), target);
  }

  // optional int32 split_size = 24;
  if (has_split_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->split_size(), target);
  }

  // optional int32 split_dim = 25 [default = 1];
  if (has_split_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->split_dim(), target);
  }

  // optional int32 concat_dim = 26 [default = 1];
  if (has_concat_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->concat_dim(), target);
  }

  // optional int32 topk = 27 [default = 5];
  if (has_topk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->topk(), target);
  }

  // repeated string top = 28;
  for (int i = 0; i < this->top_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), this->top(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "top");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(28, this->top(i), target);
  }

  // repeated string bottom = 29;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bottom");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(29, this->bottom(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.LayerProto)
  return target;
}

int LayerProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional int32 num_output = 3;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_output());
    }

    // optional int32 window_size = 8;
    if (has_window_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->window_size());
    }

    // optional int32 stride = 9 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride());
    }

    // optional int32 pad = 10 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad());
    }

    // optional int32 num_groups = 11 [default = 1];
    if (has_num_groups()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_groups());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float alpha = 12;
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // optional float beta = 13;
    if (has_beta()) {
      total_size += 1 + 4;
    }

    // optional float knorm = 14 [default = 1];
    if (has_knorm()) {
      total_size += 1 + 4;
    }

    // optional .lapis.LayerProto.PoolingMethod pooling_method = 16;
    if (has_pooling_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pooling_method());
    }

    // optional int32 cropsize = 17;
    if (has_cropsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cropsize());
    }

    // optional bool mirror = 18;
    if (has_mirror()) {
      total_size += 2 + 1;
    }

    // optional float drop_prob = 19 [default = 0.5];
    if (has_drop_prob()) {
      total_size += 2 + 4;
    }

    // optional .lapis.DAryProto data = 20;
    if (has_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .lapis.DAryProto grad = 21;
    if (has_grad()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grad());
    }

    // optional .lapis.DAryProto col_data = 22;
    if (has_col_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->col_data());
    }

    // optional .lapis.DAryProto split_data = 23;
    if (has_split_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->split_data());
    }

    // optional int32 split_size = 24;
    if (has_split_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->split_size());
    }

    // optional int32 split_dim = 25 [default = 1];
    if (has_split_dim()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->split_dim());
    }

    // optional int32 concat_dim = 26 [default = 1];
    if (has_concat_dim()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->concat_dim());
    }

    // optional int32 topk = 27 [default = 5];
    if (has_topk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topk());
    }

  }
  // repeated .lapis.ParamProto param = 4;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param(i));
  }

  // repeated string top = 28;
  total_size += 2 * this->top_size();
  for (int i = 0; i < this->top_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->top(i));
  }

  // repeated string bottom = 29;
  total_size += 2 * this->bottom_size();
  for (int i = 0; i < this->bottom_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bottom(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LayerProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LayerProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LayerProto::MergeFrom(const LayerProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  top_.MergeFrom(from.top_);
  bottom_.MergeFrom(from.bottom_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_window_size()) {
      set_window_size(from.window_size());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_pad()) {
      set_pad(from.pad());
    }
    if (from.has_num_groups()) {
      set_num_groups(from.num_groups());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
    if (from.has_knorm()) {
      set_knorm(from.knorm());
    }
    if (from.has_pooling_method()) {
      set_pooling_method(from.pooling_method());
    }
    if (from.has_cropsize()) {
      set_cropsize(from.cropsize());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
    if (from.has_drop_prob()) {
      set_drop_prob(from.drop_prob());
    }
    if (from.has_data()) {
      mutable_data()->::lapis::DAryProto::MergeFrom(from.data());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_grad()) {
      mutable_grad()->::lapis::DAryProto::MergeFrom(from.grad());
    }
    if (from.has_col_data()) {
      mutable_col_data()->::lapis::DAryProto::MergeFrom(from.col_data());
    }
    if (from.has_split_data()) {
      mutable_split_data()->::lapis::DAryProto::MergeFrom(from.split_data());
    }
    if (from.has_split_size()) {
      set_split_size(from.split_size());
    }
    if (from.has_split_dim()) {
      set_split_dim(from.split_dim());
    }
    if (from.has_concat_dim()) {
      set_concat_dim(from.concat_dim());
    }
    if (from.has_topk()) {
      set_topk(from.topk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LayerProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerProto::CopyFrom(const LayerProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->param())) return false;
  return true;
}

void LayerProto::Swap(LayerProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(num_output_, other->num_output_);
    param_.Swap(&other->param_);
    std::swap(window_size_, other->window_size_);
    std::swap(stride_, other->stride_);
    std::swap(pad_, other->pad_);
    std::swap(num_groups_, other->num_groups_);
    std::swap(alpha_, other->alpha_);
    std::swap(beta_, other->beta_);
    std::swap(knorm_, other->knorm_);
    std::swap(pooling_method_, other->pooling_method_);
    std::swap(cropsize_, other->cropsize_);
    std::swap(mirror_, other->mirror_);
    std::swap(drop_prob_, other->drop_prob_);
    std::swap(data_, other->data_);
    std::swap(grad_, other->grad_);
    std::swap(col_data_, other->col_data_);
    std::swap(split_data_, other->split_data_);
    std::swap(split_size_, other->split_size_);
    std::swap(split_dim_, other->split_dim_);
    std::swap(concat_dim_, other->concat_dim_);
    std::swap(topk_, other->topk_);
    top_.Swap(&other->top_);
    bottom_.Swap(&other->bottom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LayerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayerProto_descriptor_;
  metadata.reflection = LayerProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MeanProto::kNumFieldNumber;
const int MeanProto::kChannelsFieldNumber;
const int MeanProto::kHeightFieldNumber;
const int MeanProto::kWidthFieldNumber;
const int MeanProto::kDataFieldNumber;
const int MeanProto::kDiffFieldNumber;
#endif  // !_MSC_VER

MeanProto::MeanProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.MeanProto)
}

void MeanProto::InitAsDefaultInstance() {
}

MeanProto::MeanProto(const MeanProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.MeanProto)
}

void MeanProto::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  channels_ = 0;
  height_ = 0;
  width_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MeanProto::~MeanProto() {
  // @@protoc_insertion_point(destructor:lapis.MeanProto)
  SharedDtor();
}

void MeanProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MeanProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeanProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeanProto_descriptor_;
}

const MeanProto& MeanProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

MeanProto* MeanProto::default_instance_ = NULL;

MeanProto* MeanProto::New() const {
  return new MeanProto;
}

void MeanProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MeanProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(num_, width_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  diff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MeanProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.MeanProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channels;
        break;
      }

      // optional int32 channels = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional int32 height = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional int32 width = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // repeated float data = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (tag == 45) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_diff;
        break;
      }

      // repeated float diff = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_diff())));
        } else if (tag == 53) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50, input, this->mutable_diff())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.MeanProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.MeanProto)
  return false;
#undef DO_
}

void MeanProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.MeanProto)
  // optional int32 num = 1 [default = 0];
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 channels = 2 [default = 0];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channels(), output);
  }

  // optional int32 height = 3 [default = 0];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional int32 width = 4 [default = 0];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // repeated float data = 5 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->data(i), output);
  }

  // repeated float diff = 6 [packed = true];
  if (this->diff_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_diff_cached_byte_size_);
  }
  for (int i = 0; i < this->diff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->diff(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.MeanProto)
}

::google::protobuf::uint8* MeanProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.MeanProto)
  // optional int32 num = 1 [default = 0];
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 channels = 2 [default = 0];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channels(), target);
  }

  // optional int32 height = 3 [default = 0];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional int32 width = 4 [default = 0];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // repeated float data = 5 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data(i), target);
  }

  // repeated float diff = 6 [packed = true];
  if (this->diff_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _diff_cached_byte_size_, target);
  }
  for (int i = 0; i < this->diff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->diff(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.MeanProto)
  return target;
}

int MeanProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 channels = 2 [default = 0];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 3 [default = 0];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 4 [default = 0];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  // repeated float data = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float diff = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->diff_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _diff_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeanProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MeanProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MeanProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MeanProto::MergeFrom(const MeanProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  diff_.MergeFrom(from.diff_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MeanProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeanProto::CopyFrom(const MeanProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeanProto::IsInitialized() const {

  return true;
}

void MeanProto::Swap(MeanProto* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(channels_, other->channels_);
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    data_.Swap(&other->data_);
    diff_.Swap(&other->diff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MeanProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeanProto_descriptor_;
  metadata.reflection = MeanProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DAryProto::kPartitionDimFieldNumber;
const int DAryProto::kShapeFieldNumber;
const int DAryProto::kValueFieldNumber;
#endif  // !_MSC_VER

DAryProto::DAryProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.DAryProto)
}

void DAryProto::InitAsDefaultInstance() {
}

DAryProto::DAryProto(const DAryProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.DAryProto)
}

void DAryProto::SharedCtor() {
  _cached_size_ = 0;
  partition_dim_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DAryProto::~DAryProto() {
  // @@protoc_insertion_point(destructor:lapis.DAryProto)
  SharedDtor();
}

void DAryProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DAryProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DAryProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DAryProto_descriptor_;
}

const DAryProto& DAryProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

DAryProto* DAryProto::default_instance_ = NULL;

DAryProto* DAryProto::New() const {
  return new DAryProto;
}

void DAryProto::Clear() {
  partition_dim_ = 0;
  shape_.Clear();
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DAryProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.DAryProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 partition_dim = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_dim_)));
          set_has_partition_dim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shape;
        break;
      }

      // repeated int32 shape = 2;
      case 2: {
        if (tag == 16) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_shape())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shape;
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // repeated float value = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.DAryProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.DAryProto)
  return false;
#undef DO_
}

void DAryProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.DAryProto)
  // optional int32 partition_dim = 1;
  if (has_partition_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->partition_dim(), output);
  }

  // repeated int32 shape = 2;
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->shape(i), output);
  }

  // repeated float value = 3 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.DAryProto)
}

::google::protobuf::uint8* DAryProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.DAryProto)
  // optional int32 partition_dim = 1;
  if (has_partition_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->partition_dim(), target);
  }

  // repeated int32 shape = 2;
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->shape(i), target);
  }

  // repeated float value = 3 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.DAryProto)
  return target;
}

int DAryProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 partition_dim = 1;
    if (has_partition_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partition_dim());
    }

  }
  // repeated int32 shape = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->shape_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shape(i));
    }
    total_size += 1 * this->shape_size() + data_size;
  }

  // repeated float value = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DAryProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DAryProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DAryProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DAryProto::MergeFrom(const DAryProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  shape_.MergeFrom(from.shape_);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_dim()) {
      set_partition_dim(from.partition_dim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DAryProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DAryProto::CopyFrom(const DAryProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DAryProto::IsInitialized() const {

  return true;
}

void DAryProto::Swap(DAryProto* other) {
  if (other != this) {
    std::swap(partition_dim_, other->partition_dim_);
    shape_.Swap(&other->shape_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DAryProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DAryProto_descriptor_;
  metadata.reflection = DAryProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetProto::kLayerFieldNumber;
#endif  // !_MSC_VER

NetProto::NetProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.NetProto)
}

void NetProto::InitAsDefaultInstance() {
}

NetProto::NetProto(const NetProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.NetProto)
}

void NetProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto::~NetProto() {
  // @@protoc_insertion_point(destructor:lapis.NetProto)
  SharedDtor();
}

void NetProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_descriptor_;
}

const NetProto& NetProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

NetProto* NetProto::default_instance_ = NULL;

NetProto* NetProto::New() const {
  return new NetProto;
}

void NetProto::Clear() {
  layer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.NetProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lapis.LayerProto layer = 2;
      case 2: {
        if (tag == 18) {
         parse_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_layer;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.NetProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.NetProto)
  return false;
#undef DO_
}

void NetProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.NetProto)
  // repeated .lapis.LayerProto layer = 2;
  for (int i = 0; i < this->layer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->layer(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.NetProto)
}

::google::protobuf::uint8* NetProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.NetProto)
  // repeated .lapis.LayerProto layer = 2;
  for (int i = 0; i < this->layer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->layer(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.NetProto)
  return target;
}

int NetProto::ByteSize() const {
  int total_size = 0;

  // repeated .lapis.LayerProto layer = 2;
  total_size += 1 * this->layer_size();
  for (int i = 0; i < this->layer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layer(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto::MergeFrom(const NetProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  layer_.MergeFrom(from.layer_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto::CopyFrom(const NetProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->layer())) return false;
  return true;
}

void NetProto::Swap(NetProto* other) {
  if (other != this) {
    layer_.Swap(&other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_descriptor_;
  metadata.reflection = NetProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PerformanceProto::kTopkPrecisionFieldNumber;
const int PerformanceProto::kTopPrecisionFieldNumber;
const int PerformanceProto::kLossFieldNumber;
const int PerformanceProto::kCountFieldNumber;
const int PerformanceProto::kStepFieldNumber;
#endif  // !_MSC_VER

PerformanceProto::PerformanceProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.PerformanceProto)
}

void PerformanceProto::InitAsDefaultInstance() {
}

PerformanceProto::PerformanceProto(const PerformanceProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.PerformanceProto)
}

void PerformanceProto::SharedCtor() {
  _cached_size_ = 0;
  topk_precision_ = 0;
  top_precision_ = 0;
  loss_ = 0;
  count_ = 0;
  step_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerformanceProto::~PerformanceProto() {
  // @@protoc_insertion_point(destructor:lapis.PerformanceProto)
  SharedDtor();
}

void PerformanceProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PerformanceProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerformanceProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerformanceProto_descriptor_;
}

const PerformanceProto& PerformanceProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

PerformanceProto* PerformanceProto::default_instance_ = NULL;

PerformanceProto* PerformanceProto::New() const {
  return new PerformanceProto;
}

void PerformanceProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PerformanceProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(topk_precision_, step_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PerformanceProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.PerformanceProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float topk_precision = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &topk_precision_)));
          set_has_topk_precision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_top_precision;
        break;
      }

      // optional float top_precision = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_top_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_precision_)));
          set_has_top_precision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_loss;
        break;
      }

      // optional float loss = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &loss_)));
          set_has_loss();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int32 count = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_step;
        break;
      }

      // optional int32 step = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.PerformanceProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.PerformanceProto)
  return false;
#undef DO_
}

void PerformanceProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.PerformanceProto)
  // optional float topk_precision = 1 [default = 0];
  if (has_topk_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->topk_precision(), output);
  }

  // optional float top_precision = 2 [default = 0];
  if (has_top_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->top_precision(), output);
  }

  // optional float loss = 3 [default = 0];
  if (has_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->loss(), output);
  }

  // optional int32 count = 4 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // optional int32 step = 5 [default = 0];
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.PerformanceProto)
}

::google::protobuf::uint8* PerformanceProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.PerformanceProto)
  // optional float topk_precision = 1 [default = 0];
  if (has_topk_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->topk_precision(), target);
  }

  // optional float top_precision = 2 [default = 0];
  if (has_top_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->top_precision(), target);
  }

  // optional float loss = 3 [default = 0];
  if (has_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->loss(), target);
  }

  // optional int32 count = 4 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // optional int32 step = 5 [default = 0];
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.PerformanceProto)
  return target;
}

int PerformanceProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float topk_precision = 1 [default = 0];
    if (has_topk_precision()) {
      total_size += 1 + 4;
    }

    // optional float top_precision = 2 [default = 0];
    if (has_top_precision()) {
      total_size += 1 + 4;
    }

    // optional float loss = 3 [default = 0];
    if (has_loss()) {
      total_size += 1 + 4;
    }

    // optional int32 count = 4 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 step = 5 [default = 0];
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerformanceProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PerformanceProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PerformanceProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PerformanceProto::MergeFrom(const PerformanceProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topk_precision()) {
      set_topk_precision(from.topk_precision());
    }
    if (from.has_top_precision()) {
      set_top_precision(from.top_precision());
    }
    if (from.has_loss()) {
      set_loss(from.loss());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PerformanceProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerformanceProto::CopyFrom(const PerformanceProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformanceProto::IsInitialized() const {

  return true;
}

void PerformanceProto::Swap(PerformanceProto* other) {
  if (other != this) {
    std::swap(topk_precision_, other->topk_precision_);
    std::swap(top_precision_, other->top_precision_);
    std::swap(loss_, other->loss_);
    std::swap(count_, other->count_);
    std::swap(step_, other->step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PerformanceProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PerformanceProto_descriptor_;
  metadata.reflection = PerformanceProto_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SolverProto_Method_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverProto_Method_descriptor_;
}
bool SolverProto_Method_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SolverProto_Method SolverProto::kSGD;
const SolverProto_Method SolverProto::kAdaGrad;
const SolverProto_Method SolverProto::Method_MIN;
const SolverProto_Method SolverProto::Method_MAX;
const int SolverProto::Method_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SolverProto_GradAlg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverProto_GradAlg_descriptor_;
}
bool SolverProto_GradAlg_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SolverProto_GradAlg SolverProto::kBackPropagation;
const SolverProto_GradAlg SolverProto::kContrastiveDivergence;
const SolverProto_GradAlg SolverProto::GradAlg_MIN;
const SolverProto_GradAlg SolverProto::GradAlg_MAX;
const int SolverProto::GradAlg_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* SolverProto::_default_checkpoint_prefix_ = NULL;
::std::string* SolverProto::_default_display_prefix_ = NULL;
::std::string* SolverProto::_default_perf_prefix_ = NULL;
#ifndef _MSC_VER
const int SolverProto::kMethodFieldNumber;
const int SolverProto::kCheckpointAfterStepsFieldNumber;
const int SolverProto::kCheckpointEveryStepsFieldNumber;
const int SolverProto::kCheckpointPrefixFieldNumber;
const int SolverProto::kCheckpointStepFieldNumber;
const int SolverProto::kDisplayAfterStepsFieldNumber;
const int SolverProto::kDisplayEveryStepsFieldNumber;
const int SolverProto::kDisplayPrefixFieldNumber;
const int SolverProto::kValidationStepFieldNumber;
const int SolverProto::kValidationAfterStepsFieldNumber;
const int SolverProto::kValidationEveryStepsFieldNumber;
const int SolverProto::kTestStepFieldNumber;
const int SolverProto::kTestAfterStepsFieldNumber;
const int SolverProto::kTestEveryStepsFieldNumber;
const int SolverProto::kPerfPrefixFieldNumber;
const int SolverProto::kAlgFieldNumber;
const int SolverProto::kBatchsizeFieldNumber;
const int SolverProto::kTrainStepsFieldNumber;
const int SolverProto::kValidationStepsFieldNumber;
const int SolverProto::kTestStepsFieldNumber;
const int SolverProto::kMaxSplitsFieldNumber;
const int SolverProto::kSgdFieldNumber;
const int SolverProto::kAdagradFieldNumber;
#endif  // !_MSC_VER

SolverProto::SolverProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.SolverProto)
}

void SolverProto::InitAsDefaultInstance() {
  sgd_ = const_cast< ::lapis::SGDValue*>(&::lapis::SGDValue::default_instance());
  adagrad_ = const_cast< ::lapis::AdaGradValue*>(&::lapis::AdaGradValue::default_instance());
}

SolverProto::SolverProto(const SolverProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.SolverProto)
}

void SolverProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  method_ = 1;
  checkpoint_after_steps_ = 0;
  checkpoint_every_steps_ = 0;
  checkpoint_prefix_ = const_cast< ::std::string*>(_default_checkpoint_prefix_);
  checkpoint_step_ = 0;
  display_after_steps_ = 0;
  display_every_steps_ = 0;
  display_prefix_ = const_cast< ::std::string*>(_default_display_prefix_);
  validation_step_ = 0;
  validation_after_steps_ = 0;
  validation_every_steps_ = 0;
  test_step_ = 0;
  test_after_steps_ = 0;
  test_every_steps_ = 0;
  perf_prefix_ = const_cast< ::std::string*>(_default_perf_prefix_);
  alg_ = 1;
  batchsize_ = 0;
  train_steps_ = 0;
  validation_steps_ = 0;
  test_steps_ = 0;
  max_splits_ = 3571;
  sgd_ = NULL;
  adagrad_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolverProto::~SolverProto() {
  // @@protoc_insertion_point(destructor:lapis.SolverProto)
  SharedDtor();
}

void SolverProto::SharedDtor() {
  if (checkpoint_prefix_ != _default_checkpoint_prefix_) {
    delete checkpoint_prefix_;
  }
  if (display_prefix_ != _default_display_prefix_) {
    delete display_prefix_;
  }
  if (perf_prefix_ != _default_perf_prefix_) {
    delete perf_prefix_;
  }
  if (this != default_instance_) {
    delete sgd_;
    delete adagrad_;
  }
}

void SolverProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverProto_descriptor_;
}

const SolverProto& SolverProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

SolverProto* SolverProto::default_instance_ = NULL;

SolverProto* SolverProto::New() const {
  return new SolverProto;
}

void SolverProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SolverProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(checkpoint_every_steps_, display_every_steps_);
    method_ = 1;
    checkpoint_after_steps_ = 0;
    if (has_checkpoint_prefix()) {
      if (checkpoint_prefix_ != _default_checkpoint_prefix_) {
        checkpoint_prefix_->assign(*_default_checkpoint_prefix_);
      }
    }
    if (has_display_prefix()) {
      if (display_prefix_ != _default_display_prefix_) {
        display_prefix_->assign(*_default_display_prefix_);
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(validation_step_, test_every_steps_);
    if (has_perf_prefix()) {
      if (perf_prefix_ != _default_perf_prefix_) {
        perf_prefix_->assign(*_default_perf_prefix_);
      }
    }
    alg_ = 1;
  }
  if (_has_bits_[16 / 32] & 8323072) {
    ZR_(batchsize_, test_steps_);
    max_splits_ = 3571;
    if (has_sgd()) {
      if (sgd_ != NULL) sgd_->::lapis::SGDValue::Clear();
    }
    if (has_adagrad()) {
      if (adagrad_ != NULL) adagrad_->::lapis::AdaGradValue::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SolverProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.SolverProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lapis.SolverProto.Method method = 1 [default = kSGD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lapis::SolverProto_Method_IsValid(value)) {
            set_method(static_cast< ::lapis::SolverProto_Method >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_checkpoint_after_steps;
        break;
      }

      // optional int32 checkpoint_after_steps = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_checkpoint_after_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_after_steps_)));
          set_has_checkpoint_after_steps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_checkpoint_every_steps;
        break;
      }

      // optional int32 checkpoint_every_steps = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_checkpoint_every_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_every_steps_)));
          set_has_checkpoint_every_steps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_checkpoint_prefix;
        break;
      }

      // optional string checkpoint_prefix = 4 [default = "tmp/checkpoint"];
      case 4: {
        if (tag == 34) {
         parse_checkpoint_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checkpoint_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->checkpoint_prefix().data(), this->checkpoint_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "checkpoint_prefix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_checkpoint_step;
        break;
      }

      // optional int32 checkpoint_step = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_checkpoint_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_step_)));
          set_has_checkpoint_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_display_after_steps;
        break;
      }

      // optional int32 display_after_steps = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_display_after_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_after_steps_)));
          set_has_display_after_steps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_display_every_steps;
        break;
      }

      // optional int32 display_every_steps = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_display_every_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_every_steps_)));
          set_has_display_every_steps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_display_prefix;
        break;
      }

      // optional string display_prefix = 8 [default = "tmp/display"];
      case 8: {
        if (tag == 66) {
         parse_display_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->display_prefix().data(), this->display_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "display_prefix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_validation_step;
        break;
      }

      // optional int32 validation_step = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_validation_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validation_step_)));
          set_has_validation_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_validation_after_steps;
        break;
      }

      // optional int32 validation_after_steps = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_validation_after_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validation_after_steps_)));
          set_has_validation_after_steps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_validation_every_steps;
        break;
      }

      // optional int32 validation_every_steps = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_validation_every_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validation_every_steps_)));
          set_has_validation_every_steps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_test_step;
        break;
      }

      // optional int32 test_step = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_test_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_step_)));
          set_has_test_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_test_after_steps;
        break;
      }

      // optional int32 test_after_steps = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_test_after_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_after_steps_)));
          set_has_test_after_steps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_test_every_steps;
        break;
      }

      // optional int32 test_every_steps = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_test_every_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_every_steps_)));
          set_has_test_every_steps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_perf_prefix;
        break;
      }

      // optional string perf_prefix = 15 [default = "tmp/performance"];
      case 15: {
        if (tag == 122) {
         parse_perf_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_perf_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->perf_prefix().data(), this->perf_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perf_prefix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_alg;
        break;
      }

      // optional .lapis.SolverProto.GradAlg alg = 16 [default = kBackPropagation];
      case 16: {
        if (tag == 128) {
         parse_alg:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lapis::SolverProto_GradAlg_IsValid(value)) {
            set_alg(static_cast< ::lapis::SolverProto_GradAlg >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_batchsize;
        break;
      }

      // optional int32 batchsize = 19;
      case 19: {
        if (tag == 152) {
         parse_batchsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batchsize_)));
          set_has_batchsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_train_steps;
        break;
      }

      // optional int32 train_steps = 20;
      case 20: {
        if (tag == 160) {
         parse_train_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_steps_)));
          set_has_train_steps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_validation_steps;
        break;
      }

      // optional int32 validation_steps = 21;
      case 21: {
        if (tag == 168) {
         parse_validation_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validation_steps_)));
          set_has_validation_steps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_test_steps;
        break;
      }

      // optional int32 test_steps = 22;
      case 22: {
        if (tag == 176) {
         parse_test_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_steps_)));
          set_has_test_steps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_max_splits;
        break;
      }

      // optional int32 max_splits = 23 [default = 3571];
      case 23: {
        if (tag == 184) {
         parse_max_splits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_splits_)));
          set_has_max_splits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_sgd;
        break;
      }

      // optional .lapis.SGDValue sgd = 24;
      case 24: {
        if (tag == 194) {
         parse_sgd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_adagrad;
        break;
      }

      // optional .lapis.AdaGradValue adagrad = 25;
      case 25: {
        if (tag == 202) {
         parse_adagrad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adagrad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.SolverProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.SolverProto)
  return false;
#undef DO_
}

void SolverProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.SolverProto)
  // optional .lapis.SolverProto.Method method = 1 [default = kSGD];
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->method(), output);
  }

  // optional int32 checkpoint_after_steps = 2 [default = 0];
  if (has_checkpoint_after_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->checkpoint_after_steps(), output);
  }

  // optional int32 checkpoint_every_steps = 3 [default = 0];
  if (has_checkpoint_every_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->checkpoint_every_steps(), output);
  }

  // optional string checkpoint_prefix = 4 [default = "tmp/checkpoint"];
  if (has_checkpoint_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checkpoint_prefix().data(), this->checkpoint_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "checkpoint_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->checkpoint_prefix(), output);
  }

  // optional int32 checkpoint_step = 5 [default = 0];
  if (has_checkpoint_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->checkpoint_step(), output);
  }

  // optional int32 display_after_steps = 6 [default = 0];
  if (has_display_after_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->display_after_steps(), output);
  }

  // optional int32 display_every_steps = 7 [default = 0];
  if (has_display_every_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->display_every_steps(), output);
  }

  // optional string display_prefix = 8 [default = "tmp/display"];
  if (has_display_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_prefix().data(), this->display_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "display_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->display_prefix(), output);
  }

  // optional int32 validation_step = 9 [default = 0];
  if (has_validation_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->validation_step(), output);
  }

  // optional int32 validation_after_steps = 10 [default = 0];
  if (has_validation_after_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->validation_after_steps(), output);
  }

  // optional int32 validation_every_steps = 11 [default = 0];
  if (has_validation_every_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->validation_every_steps(), output);
  }

  // optional int32 test_step = 12 [default = 0];
  if (has_test_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->test_step(), output);
  }

  // optional int32 test_after_steps = 13 [default = 0];
  if (has_test_after_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->test_after_steps(), output);
  }

  // optional int32 test_every_steps = 14 [default = 0];
  if (has_test_every_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->test_every_steps(), output);
  }

  // optional string perf_prefix = 15 [default = "tmp/performance"];
  if (has_perf_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->perf_prefix().data(), this->perf_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perf_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->perf_prefix(), output);
  }

  // optional .lapis.SolverProto.GradAlg alg = 16 [default = kBackPropagation];
  if (has_alg()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->alg(), output);
  }

  // optional int32 batchsize = 19;
  if (has_batchsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->batchsize(), output);
  }

  // optional int32 train_steps = 20;
  if (has_train_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->train_steps(), output);
  }

  // optional int32 validation_steps = 21;
  if (has_validation_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->validation_steps(), output);
  }

  // optional int32 test_steps = 22;
  if (has_test_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->test_steps(), output);
  }

  // optional int32 max_splits = 23 [default = 3571];
  if (has_max_splits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->max_splits(), output);
  }

  // optional .lapis.SGDValue sgd = 24;
  if (has_sgd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->sgd(), output);
  }

  // optional .lapis.AdaGradValue adagrad = 25;
  if (has_adagrad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->adagrad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.SolverProto)
}

::google::protobuf::uint8* SolverProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.SolverProto)
  // optional .lapis.SolverProto.Method method = 1 [default = kSGD];
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->method(), target);
  }

  // optional int32 checkpoint_after_steps = 2 [default = 0];
  if (has_checkpoint_after_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->checkpoint_after_steps(), target);
  }

  // optional int32 checkpoint_every_steps = 3 [default = 0];
  if (has_checkpoint_every_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->checkpoint_every_steps(), target);
  }

  // optional string checkpoint_prefix = 4 [default = "tmp/checkpoint"];
  if (has_checkpoint_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checkpoint_prefix().data(), this->checkpoint_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "checkpoint_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->checkpoint_prefix(), target);
  }

  // optional int32 checkpoint_step = 5 [default = 0];
  if (has_checkpoint_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->checkpoint_step(), target);
  }

  // optional int32 display_after_steps = 6 [default = 0];
  if (has_display_after_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->display_after_steps(), target);
  }

  // optional int32 display_every_steps = 7 [default = 0];
  if (has_display_every_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->display_every_steps(), target);
  }

  // optional string display_prefix = 8 [default = "tmp/display"];
  if (has_display_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_prefix().data(), this->display_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "display_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->display_prefix(), target);
  }

  // optional int32 validation_step = 9 [default = 0];
  if (has_validation_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->validation_step(), target);
  }

  // optional int32 validation_after_steps = 10 [default = 0];
  if (has_validation_after_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->validation_after_steps(), target);
  }

  // optional int32 validation_every_steps = 11 [default = 0];
  if (has_validation_every_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->validation_every_steps(), target);
  }

  // optional int32 test_step = 12 [default = 0];
  if (has_test_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->test_step(), target);
  }

  // optional int32 test_after_steps = 13 [default = 0];
  if (has_test_after_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->test_after_steps(), target);
  }

  // optional int32 test_every_steps = 14 [default = 0];
  if (has_test_every_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->test_every_steps(), target);
  }

  // optional string perf_prefix = 15 [default = "tmp/performance"];
  if (has_perf_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->perf_prefix().data(), this->perf_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perf_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->perf_prefix(), target);
  }

  // optional .lapis.SolverProto.GradAlg alg = 16 [default = kBackPropagation];
  if (has_alg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->alg(), target);
  }

  // optional int32 batchsize = 19;
  if (has_batchsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->batchsize(), target);
  }

  // optional int32 train_steps = 20;
  if (has_train_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->train_steps(), target);
  }

  // optional int32 validation_steps = 21;
  if (has_validation_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->validation_steps(), target);
  }

  // optional int32 test_steps = 22;
  if (has_test_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->test_steps(), target);
  }

  // optional int32 max_splits = 23 [default = 3571];
  if (has_max_splits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->max_splits(), target);
  }

  // optional .lapis.SGDValue sgd = 24;
  if (has_sgd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->sgd(), target);
  }

  // optional .lapis.AdaGradValue adagrad = 25;
  if (has_adagrad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->adagrad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.SolverProto)
  return target;
}

int SolverProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .lapis.SolverProto.Method method = 1 [default = kSGD];
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
    }

    // optional int32 checkpoint_after_steps = 2 [default = 0];
    if (has_checkpoint_after_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkpoint_after_steps());
    }

    // optional int32 checkpoint_every_steps = 3 [default = 0];
    if (has_checkpoint_every_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkpoint_every_steps());
    }

    // optional string checkpoint_prefix = 4 [default = "tmp/checkpoint"];
    if (has_checkpoint_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checkpoint_prefix());
    }

    // optional int32 checkpoint_step = 5 [default = 0];
    if (has_checkpoint_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkpoint_step());
    }

    // optional int32 display_after_steps = 6 [default = 0];
    if (has_display_after_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display_after_steps());
    }

    // optional int32 display_every_steps = 7 [default = 0];
    if (has_display_every_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display_every_steps());
    }

    // optional string display_prefix = 8 [default = "tmp/display"];
    if (has_display_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_prefix());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 validation_step = 9 [default = 0];
    if (has_validation_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validation_step());
    }

    // optional int32 validation_after_steps = 10 [default = 0];
    if (has_validation_after_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validation_after_steps());
    }

    // optional int32 validation_every_steps = 11 [default = 0];
    if (has_validation_every_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validation_every_steps());
    }

    // optional int32 test_step = 12 [default = 0];
    if (has_test_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_step());
    }

    // optional int32 test_after_steps = 13 [default = 0];
    if (has_test_after_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_after_steps());
    }

    // optional int32 test_every_steps = 14 [default = 0];
    if (has_test_every_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_every_steps());
    }

    // optional string perf_prefix = 15 [default = "tmp/performance"];
    if (has_perf_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->perf_prefix());
    }

    // optional .lapis.SolverProto.GradAlg alg = 16 [default = kBackPropagation];
    if (has_alg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->alg());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 batchsize = 19;
    if (has_batchsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batchsize());
    }

    // optional int32 train_steps = 20;
    if (has_train_steps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train_steps());
    }

    // optional int32 validation_steps = 21;
    if (has_validation_steps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validation_steps());
    }

    // optional int32 test_steps = 22;
    if (has_test_steps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_steps());
    }

    // optional int32 max_splits = 23 [default = 3571];
    if (has_max_splits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_splits());
    }

    // optional .lapis.SGDValue sgd = 24;
    if (has_sgd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sgd());
    }

    // optional .lapis.AdaGradValue adagrad = 25;
    if (has_adagrad()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adagrad());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SolverProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SolverProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SolverProto::MergeFrom(const SolverProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_checkpoint_after_steps()) {
      set_checkpoint_after_steps(from.checkpoint_after_steps());
    }
    if (from.has_checkpoint_every_steps()) {
      set_checkpoint_every_steps(from.checkpoint_every_steps());
    }
    if (from.has_checkpoint_prefix()) {
      set_checkpoint_prefix(from.checkpoint_prefix());
    }
    if (from.has_checkpoint_step()) {
      set_checkpoint_step(from.checkpoint_step());
    }
    if (from.has_display_after_steps()) {
      set_display_after_steps(from.display_after_steps());
    }
    if (from.has_display_every_steps()) {
      set_display_every_steps(from.display_every_steps());
    }
    if (from.has_display_prefix()) {
      set_display_prefix(from.display_prefix());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_validation_step()) {
      set_validation_step(from.validation_step());
    }
    if (from.has_validation_after_steps()) {
      set_validation_after_steps(from.validation_after_steps());
    }
    if (from.has_validation_every_steps()) {
      set_validation_every_steps(from.validation_every_steps());
    }
    if (from.has_test_step()) {
      set_test_step(from.test_step());
    }
    if (from.has_test_after_steps()) {
      set_test_after_steps(from.test_after_steps());
    }
    if (from.has_test_every_steps()) {
      set_test_every_steps(from.test_every_steps());
    }
    if (from.has_perf_prefix()) {
      set_perf_prefix(from.perf_prefix());
    }
    if (from.has_alg()) {
      set_alg(from.alg());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_batchsize()) {
      set_batchsize(from.batchsize());
    }
    if (from.has_train_steps()) {
      set_train_steps(from.train_steps());
    }
    if (from.has_validation_steps()) {
      set_validation_steps(from.validation_steps());
    }
    if (from.has_test_steps()) {
      set_test_steps(from.test_steps());
    }
    if (from.has_max_splits()) {
      set_max_splits(from.max_splits());
    }
    if (from.has_sgd()) {
      mutable_sgd()->::lapis::SGDValue::MergeFrom(from.sgd());
    }
    if (from.has_adagrad()) {
      mutable_adagrad()->::lapis::AdaGradValue::MergeFrom(from.adagrad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SolverProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverProto::CopyFrom(const SolverProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverProto::IsInitialized() const {

  return true;
}

void SolverProto::Swap(SolverProto* other) {
  if (other != this) {
    std::swap(method_, other->method_);
    std::swap(checkpoint_after_steps_, other->checkpoint_after_steps_);
    std::swap(checkpoint_every_steps_, other->checkpoint_every_steps_);
    std::swap(checkpoint_prefix_, other->checkpoint_prefix_);
    std::swap(checkpoint_step_, other->checkpoint_step_);
    std::swap(display_after_steps_, other->display_after_steps_);
    std::swap(display_every_steps_, other->display_every_steps_);
    std::swap(display_prefix_, other->display_prefix_);
    std::swap(validation_step_, other->validation_step_);
    std::swap(validation_after_steps_, other->validation_after_steps_);
    std::swap(validation_every_steps_, other->validation_every_steps_);
    std::swap(test_step_, other->test_step_);
    std::swap(test_after_steps_, other->test_after_steps_);
    std::swap(test_every_steps_, other->test_every_steps_);
    std::swap(perf_prefix_, other->perf_prefix_);
    std::swap(alg_, other->alg_);
    std::swap(batchsize_, other->batchsize_);
    std::swap(train_steps_, other->train_steps_);
    std::swap(validation_steps_, other->validation_steps_);
    std::swap(test_steps_, other->test_steps_);
    std::swap(max_splits_, other->max_splits_);
    std::swap(sgd_, other->sgd_);
    std::swap(adagrad_, other->adagrad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SolverProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolverProto_descriptor_;
  metadata.reflection = SolverProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Model::kNameFieldNumber;
const int Model::kNetFieldNumber;
const int Model::kSolverFieldNumber;
#endif  // !_MSC_VER

Model::Model()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.Model)
}

void Model::InitAsDefaultInstance() {
  net_ = const_cast< ::lapis::NetProto*>(&::lapis::NetProto::default_instance());
  solver_ = const_cast< ::lapis::SolverProto*>(&::lapis::SolverProto::default_instance());
}

Model::Model(const Model& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.Model)
}

void Model::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  net_ = NULL;
  solver_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:lapis.Model)
  SharedDtor();
}

void Model::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete net_;
    delete solver_;
  }
}

void Model::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Model::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Model_descriptor_;
}

const Model& Model::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

Model* Model::default_instance_ = NULL;

Model* Model::New() const {
  return new Model;
}

void Model::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_net()) {
      if (net_ != NULL) net_->::lapis::NetProto::Clear();
    }
    if (has_solver()) {
      if (solver_ != NULL) solver_->::lapis::SolverProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.Model)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_net;
        break;
      }

      // optional .lapis.NetProto net = 2;
      case 2: {
        if (tag == 18) {
         parse_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_solver;
        break;
      }

      // optional .lapis.SolverProto solver = 3;
      case 3: {
        if (tag == 26) {
         parse_solver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_solver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.Model)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.Model)
  return false;
#undef DO_
}

void Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.Model)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .lapis.NetProto net = 2;
  if (has_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->net(), output);
  }

  // optional .lapis.SolverProto solver = 3;
  if (has_solver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->solver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.Model)
}

::google::protobuf::uint8* Model::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.Model)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .lapis.NetProto net = 2;
  if (has_net()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->net(), target);
  }

  // optional .lapis.SolverProto solver = 3;
  if (has_solver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->solver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.Model)
  return target;
}

int Model::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .lapis.NetProto net = 2;
    if (has_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->net());
    }

    // optional .lapis.SolverProto solver = 3;
    if (has_solver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->solver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Model::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Model* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Model*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Model::MergeFrom(const Model& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_net()) {
      mutable_net()->::lapis::NetProto::MergeFrom(from.net());
    }
    if (from.has_solver()) {
      mutable_solver()->::lapis::SolverProto::MergeFrom(from.solver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Model::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Model::CopyFrom(const Model& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {

  if (has_net()) {
    if (!this->net().IsInitialized()) return false;
  }
  return true;
}

void Model::Swap(Model* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(net_, other->net_);
    std::swap(solver_, other->solver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Model::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Model_descriptor_;
  metadata.reflection = Model_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Record::kImageFieldNumber;
const int Record::kLabelFieldNumber;
const int Record::kIdFieldNumber;
#endif  // !_MSC_VER

Record::Record()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.Record)
}

void Record::InitAsDefaultInstance() {
  image_ = const_cast< ::lapis::DAryProto*>(&::lapis::DAryProto::default_instance());
}

Record::Record(const Record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.Record)
}

void Record::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  image_ = NULL;
  label_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:lapis.Record)
  SharedDtor();
}

void Record::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
    delete image_;
  }
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_descriptor_;
}

const Record& Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

Record* Record::default_instance_ = NULL;

Record* Record::New() const {
  return new Record;
}

void Record::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_image()) {
      if (image_ != NULL) image_->::lapis::DAryProto::Clear();
    }
    label_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lapis.DAryProto image = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_label;
        break;
      }

      // optional int32 label = 2;
      case 2: {
        if (tag == 16) {
         parse_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
          set_has_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // optional string id = 3;
      case 3: {
        if (tag == 26) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.Record)
  return false;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.Record)
  // optional .lapis.DAryProto image = 1;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->image(), output);
  }

  // optional int32 label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->label(), output);
  }

  // optional string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.Record)
}

::google::protobuf::uint8* Record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.Record)
  // optional .lapis.DAryProto image = 1;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->image(), target);
  }

  // optional int32 label = 2;
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->label(), target);
  }

  // optional string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.Record)
  return target;
}

int Record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .lapis.DAryProto image = 1;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

    // optional int32 label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }

    // optional string id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image()) {
      mutable_image()->::lapis::DAryProto::MergeFrom(from.image());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {

  return true;
}

void Record::Swap(Record* other) {
  if (other != this) {
    std::swap(image_, other->image_);
    std::swap(label_, other->label_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_descriptor_;
  metadata.reflection = Record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdaGradValue::kNUpdateFieldNumber;
const int AdaGradValue::kVersionFieldNumber;
const int AdaGradValue::kLearningRateFieldNumber;
const int AdaGradValue::kKinitFieldNumber;
const int AdaGradValue::kThresholdFieldNumber;
const int AdaGradValue::kGidFieldNumber;
const int AdaGradValue::kHistoryFieldNumber;
const int AdaGradValue::kDataFieldNumber;
const int AdaGradValue::kGradFieldNumber;
#endif  // !_MSC_VER

AdaGradValue::AdaGradValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.AdaGradValue)
}

void AdaGradValue::InitAsDefaultInstance() {
  history_ = const_cast< ::lapis::DAryProto*>(&::lapis::DAryProto::default_instance());
  data_ = const_cast< ::lapis::DAryProto*>(&::lapis::DAryProto::default_instance());
}

AdaGradValue::AdaGradValue(const AdaGradValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.AdaGradValue)
}

void AdaGradValue::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  learning_rate_ = 0.1f;
  kinit_ = 1;
  threshold_ = 0;
  gid_ = 0;
  history_ = NULL;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdaGradValue::~AdaGradValue() {
  // @@protoc_insertion_point(destructor:lapis.AdaGradValue)
  SharedDtor();
}

void AdaGradValue::SharedDtor() {
  if (this != default_instance_) {
    delete history_;
    delete data_;
  }
}

void AdaGradValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdaGradValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdaGradValue_descriptor_;
}

const AdaGradValue& AdaGradValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

AdaGradValue* AdaGradValue::default_instance_ = NULL;

AdaGradValue* AdaGradValue::New() const {
  return new AdaGradValue;
}

void AdaGradValue::Clear() {
  if (_has_bits_[0 / 32] & 254) {
    version_ = 0;
    learning_rate_ = 0.1f;
    kinit_ = 1;
    threshold_ = 0;
    gid_ = 0;
    if (has_history()) {
      if (history_ != NULL) history_->::lapis::DAryProto::Clear();
    }
    if (has_data()) {
      if (data_ != NULL) data_->::lapis::DAryProto::Clear();
    }
  }
  n_update_.Clear();
  grad_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdaGradValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.AdaGradValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 n_update = 1;
      case 1: {
        if (tag == 8) {
         parse_n_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_n_update())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_n_update())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_n_update;
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional int32 version = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_learning_rate;
        break;
      }

      // optional float learning_rate = 3 [default = 0.1];
      case 3: {
        if (tag == 29) {
         parse_learning_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
          set_has_learning_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_kinit;
        break;
      }

      // optional float kinit = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_kinit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kinit_)));
          set_has_kinit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_threshold;
        break;
      }

      // optional int32 threshold = 5;
      case 5: {
        if (tag == 40) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gid;
        break;
      }

      // optional int32 gid = 6;
      case 6: {
        if (tag == 48) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_history;
        break;
      }

      // optional .lapis.DAryProto history = 7;
      case 7: {
        if (tag == 58) {
         parse_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }

      // optional .lapis.DAryProto data = 8;
      case 8: {
        if (tag == 66) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_grad;
        break;
      }

      // repeated .lapis.DAryProto grad = 9;
      case 9: {
        if (tag == 74) {
         parse_grad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_grad;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.AdaGradValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.AdaGradValue)
  return false;
#undef DO_
}

void AdaGradValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.AdaGradValue)
  // repeated int32 n_update = 1;
  for (int i = 0; i < this->n_update_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->n_update(i), output);
  }

  // optional int32 version = 2 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // optional float learning_rate = 3 [default = 0.1];
  if (has_learning_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->learning_rate(), output);
  }

  // optional float kinit = 4 [default = 1];
  if (has_kinit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->kinit(), output);
  }

  // optional int32 threshold = 5;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->threshold(), output);
  }

  // optional int32 gid = 6;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gid(), output);
  }

  // optional .lapis.DAryProto history = 7;
  if (has_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->history(), output);
  }

  // optional .lapis.DAryProto data = 8;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->data(), output);
  }

  // repeated .lapis.DAryProto grad = 9;
  for (int i = 0; i < this->grad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->grad(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.AdaGradValue)
}

::google::protobuf::uint8* AdaGradValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.AdaGradValue)
  // repeated int32 n_update = 1;
  for (int i = 0; i < this->n_update_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->n_update(i), target);
  }

  // optional int32 version = 2 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }

  // optional float learning_rate = 3 [default = 0.1];
  if (has_learning_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->learning_rate(), target);
  }

  // optional float kinit = 4 [default = 1];
  if (has_kinit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->kinit(), target);
  }

  // optional int32 threshold = 5;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->threshold(), target);
  }

  // optional int32 gid = 6;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gid(), target);
  }

  // optional .lapis.DAryProto history = 7;
  if (has_history()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->history(), target);
  }

  // optional .lapis.DAryProto data = 8;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->data(), target);
  }

  // repeated .lapis.DAryProto grad = 9;
  for (int i = 0; i < this->grad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->grad(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.AdaGradValue)
  return target;
}

int AdaGradValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 version = 2 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional float learning_rate = 3 [default = 0.1];
    if (has_learning_rate()) {
      total_size += 1 + 4;
    }

    // optional float kinit = 4 [default = 1];
    if (has_kinit()) {
      total_size += 1 + 4;
    }

    // optional int32 threshold = 5;
    if (has_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->threshold());
    }

    // optional int32 gid = 6;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }

    // optional .lapis.DAryProto history = 7;
    if (has_history()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history());
    }

    // optional .lapis.DAryProto data = 8;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  // repeated int32 n_update = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->n_update_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->n_update(i));
    }
    total_size += 1 * this->n_update_size() + data_size;
  }

  // repeated .lapis.DAryProto grad = 9;
  total_size += 1 * this->grad_size();
  for (int i = 0; i < this->grad_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grad(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdaGradValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdaGradValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdaGradValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdaGradValue::MergeFrom(const AdaGradValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  n_update_.MergeFrom(from.n_update_);
  grad_.MergeFrom(from.grad_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_learning_rate()) {
      set_learning_rate(from.learning_rate());
    }
    if (from.has_kinit()) {
      set_kinit(from.kinit());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_history()) {
      mutable_history()->::lapis::DAryProto::MergeFrom(from.history());
    }
    if (from.has_data()) {
      mutable_data()->::lapis::DAryProto::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdaGradValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdaGradValue::CopyFrom(const AdaGradValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdaGradValue::IsInitialized() const {

  return true;
}

void AdaGradValue::Swap(AdaGradValue* other) {
  if (other != this) {
    n_update_.Swap(&other->n_update_);
    std::swap(version_, other->version_);
    std::swap(learning_rate_, other->learning_rate_);
    std::swap(kinit_, other->kinit_);
    std::swap(threshold_, other->threshold_);
    std::swap(gid_, other->gid_);
    std::swap(history_, other->history_);
    std::swap(data_, other->data_);
    grad_.Swap(&other->grad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdaGradValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdaGradValue_descriptor_;
  metadata.reflection = AdaGradValue_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SGDValue_ChangeProto_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SGDValue_ChangeProto_descriptor_;
}
bool SGDValue_ChangeProto_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SGDValue_ChangeProto SGDValue::kFixed;
const SGDValue_ChangeProto SGDValue::kInverse_t;
const SGDValue_ChangeProto SGDValue::kExponential;
const SGDValue_ChangeProto SGDValue::kLinear;
const SGDValue_ChangeProto SGDValue::kStep;
const SGDValue_ChangeProto SGDValue::ChangeProto_MIN;
const SGDValue_ChangeProto SGDValue::ChangeProto_MAX;
const int SGDValue::ChangeProto_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SGDValue::kBaseLearningRateFieldNumber;
const int SGDValue::kMomentumFieldNumber;
const int SGDValue::kWeightDecayFieldNumber;
const int SGDValue::kGammaFieldNumber;
const int SGDValue::kLearningRateChangeStepsFieldNumber;
const int SGDValue::kLearningRateChangeFieldNumber;
const int SGDValue::kLearningRateMultiplierFieldNumber;
const int SGDValue::kWeightDecayMultiplierFieldNumber;
const int SGDValue::kNUpdateFieldNumber;
const int SGDValue::kVersionFieldNumber;
const int SGDValue::kThresholdFieldNumber;
const int SGDValue::kIdFieldNumber;
const int SGDValue::kGidFieldNumber;
const int SGDValue::kDataFieldNumber;
const int SGDValue::kGradFieldNumber;
const int SGDValue::kHistoryFieldNumber;
#endif  // !_MSC_VER

SGDValue::SGDValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.SGDValue)
}

void SGDValue::InitAsDefaultInstance() {
  data_ = const_cast< ::lapis::DAryProto*>(&::lapis::DAryProto::default_instance());
  history_ = const_cast< ::lapis::DAryProto*>(&::lapis::DAryProto::default_instance());
}

SGDValue::SGDValue(const SGDValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.SGDValue)
}

void SGDValue::SharedCtor() {
  _cached_size_ = 0;
  base_learning_rate_ = 0;
  momentum_ = 0;
  weight_decay_ = 0;
  gamma_ = 0;
  learning_rate_change_steps_ = 0;
  learning_rate_change_ = 1;
  learning_rate_multiplier_ = 1;
  weight_decay_multiplier_ = 1;
  n_update_ = 0;
  version_ = 0;
  threshold_ = 0;
  id_ = 0;
  gid_ = 0;
  data_ = NULL;
  history_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGDValue::~SGDValue() {
  // @@protoc_insertion_point(destructor:lapis.SGDValue)
  SharedDtor();
}

void SGDValue::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
    delete history_;
  }
}

void SGDValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SGDValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SGDValue_descriptor_;
}

const SGDValue& SGDValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

SGDValue* SGDValue::default_instance_ = NULL;

SGDValue* SGDValue::New() const {
  return new SGDValue;
}

void SGDValue::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SGDValue*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(base_learning_rate_, learning_rate_change_steps_);
    learning_rate_change_ = 1;
    learning_rate_multiplier_ = 1;
    weight_decay_multiplier_ = 1;
  }
  if (_has_bits_[8 / 32] & 48896) {
    ZR_(n_update_, id_);
    gid_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::lapis::DAryProto::Clear();
    }
    if (has_history()) {
      if (history_ != NULL) history_->::lapis::DAryProto::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  grad_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SGDValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.SGDValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float base_learning_rate = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_learning_rate_)));
          set_has_base_learning_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_momentum;
        break;
      }

      // optional float momentum = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_momentum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
          set_has_momentum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_weight_decay;
        break;
      }

      // optional float weight_decay = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_weight_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_decay_)));
          set_has_weight_decay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_gamma;
        break;
      }

      // optional float gamma = 4;
      case 4: {
        if (tag == 37) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_learning_rate_change_steps;
        break;
      }

      // optional int32 learning_rate_change_steps = 5;
      case 5: {
        if (tag == 40) {
         parse_learning_rate_change_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &learning_rate_change_steps_)));
          set_has_learning_rate_change_steps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_learning_rate_change;
        break;
      }

      // optional .lapis.SGDValue.ChangeProto learning_rate_change = 6 [default = kInverse_t];
      case 6: {
        if (tag == 48) {
         parse_learning_rate_change:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lapis::SGDValue_ChangeProto_IsValid(value)) {
            set_learning_rate_change(static_cast< ::lapis::SGDValue_ChangeProto >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_learning_rate_multiplier;
        break;
      }

      // optional float learning_rate_multiplier = 7 [default = 1];
      case 7: {
        if (tag == 61) {
         parse_learning_rate_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_multiplier_)));
          set_has_learning_rate_multiplier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_weight_decay_multiplier;
        break;
      }

      // optional float weight_decay_multiplier = 8 [default = 1];
      case 8: {
        if (tag == 69) {
         parse_weight_decay_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_decay_multiplier_)));
          set_has_weight_decay_multiplier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_n_update;
        break;
      }

      // optional int32 n_update = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_n_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_update_)));
          set_has_n_update();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_version;
        break;
      }

      // optional int32 version = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_threshold;
        break;
      }

      // optional int32 threshold = 11;
      case 11: {
        if (tag == 88) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_id;
        break;
      }

      // optional int32 id = 12;
      case 12: {
        if (tag == 96) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_gid;
        break;
      }

      // optional int32 gid = 13;
      case 13: {
        if (tag == 104) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_data;
        break;
      }

      // optional .lapis.DAryProto data = 14;
      case 14: {
        if (tag == 114) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_grad;
        break;
      }

      // repeated .lapis.DAryProto grad = 15;
      case 15: {
        if (tag == 122) {
         parse_grad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_grad;
        if (input->ExpectTag(130)) goto parse_history;
        break;
      }

      // optional .lapis.DAryProto history = 16;
      case 16: {
        if (tag == 130) {
         parse_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.SGDValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.SGDValue)
  return false;
#undef DO_
}

void SGDValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.SGDValue)
  // optional float base_learning_rate = 1;
  if (has_base_learning_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->base_learning_rate(), output);
  }

  // optional float momentum = 2 [default = 0];
  if (has_momentum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->momentum(), output);
  }

  // optional float weight_decay = 3 [default = 0];
  if (has_weight_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->weight_decay(), output);
  }

  // optional float gamma = 4;
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->gamma(), output);
  }

  // optional int32 learning_rate_change_steps = 5;
  if (has_learning_rate_change_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->learning_rate_change_steps(), output);
  }

  // optional .lapis.SGDValue.ChangeProto learning_rate_change = 6 [default = kInverse_t];
  if (has_learning_rate_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->learning_rate_change(), output);
  }

  // optional float learning_rate_multiplier = 7 [default = 1];
  if (has_learning_rate_multiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->learning_rate_multiplier(), output);
  }

  // optional float weight_decay_multiplier = 8 [default = 1];
  if (has_weight_decay_multiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->weight_decay_multiplier(), output);
  }

  // optional int32 n_update = 9 [default = 0];
  if (has_n_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->n_update(), output);
  }

  // optional int32 version = 10 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->version(), output);
  }

  // optional int32 threshold = 11;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->threshold(), output);
  }

  // optional int32 id = 12;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->id(), output);
  }

  // optional int32 gid = 13;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->gid(), output);
  }

  // optional .lapis.DAryProto data = 14;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->data(), output);
  }

  // repeated .lapis.DAryProto grad = 15;
  for (int i = 0; i < this->grad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->grad(i), output);
  }

  // optional .lapis.DAryProto history = 16;
  if (has_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->history(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.SGDValue)
}

::google::protobuf::uint8* SGDValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.SGDValue)
  // optional float base_learning_rate = 1;
  if (has_base_learning_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->base_learning_rate(), target);
  }

  // optional float momentum = 2 [default = 0];
  if (has_momentum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->momentum(), target);
  }

  // optional float weight_decay = 3 [default = 0];
  if (has_weight_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->weight_decay(), target);
  }

  // optional float gamma = 4;
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->gamma(), target);
  }

  // optional int32 learning_rate_change_steps = 5;
  if (has_learning_rate_change_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->learning_rate_change_steps(), target);
  }

  // optional .lapis.SGDValue.ChangeProto learning_rate_change = 6 [default = kInverse_t];
  if (has_learning_rate_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->learning_rate_change(), target);
  }

  // optional float learning_rate_multiplier = 7 [default = 1];
  if (has_learning_rate_multiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->learning_rate_multiplier(), target);
  }

  // optional float weight_decay_multiplier = 8 [default = 1];
  if (has_weight_decay_multiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->weight_decay_multiplier(), target);
  }

  // optional int32 n_update = 9 [default = 0];
  if (has_n_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->n_update(), target);
  }

  // optional int32 version = 10 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->version(), target);
  }

  // optional int32 threshold = 11;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->threshold(), target);
  }

  // optional int32 id = 12;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->id(), target);
  }

  // optional int32 gid = 13;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->gid(), target);
  }

  // optional .lapis.DAryProto data = 14;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->data(), target);
  }

  // repeated .lapis.DAryProto grad = 15;
  for (int i = 0; i < this->grad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->grad(i), target);
  }

  // optional .lapis.DAryProto history = 16;
  if (has_history()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->history(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.SGDValue)
  return target;
}

int SGDValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float base_learning_rate = 1;
    if (has_base_learning_rate()) {
      total_size += 1 + 4;
    }

    // optional float momentum = 2 [default = 0];
    if (has_momentum()) {
      total_size += 1 + 4;
    }

    // optional float weight_decay = 3 [default = 0];
    if (has_weight_decay()) {
      total_size += 1 + 4;
    }

    // optional float gamma = 4;
    if (has_gamma()) {
      total_size += 1 + 4;
    }

    // optional int32 learning_rate_change_steps = 5;
    if (has_learning_rate_change_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->learning_rate_change_steps());
    }

    // optional .lapis.SGDValue.ChangeProto learning_rate_change = 6 [default = kInverse_t];
    if (has_learning_rate_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->learning_rate_change());
    }

    // optional float learning_rate_multiplier = 7 [default = 1];
    if (has_learning_rate_multiplier()) {
      total_size += 1 + 4;
    }

    // optional float weight_decay_multiplier = 8 [default = 1];
    if (has_weight_decay_multiplier()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 n_update = 9 [default = 0];
    if (has_n_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n_update());
    }

    // optional int32 version = 10 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 threshold = 11;
    if (has_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->threshold());
    }

    // optional int32 id = 12;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 gid = 13;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }

    // optional .lapis.DAryProto data = 14;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional .lapis.DAryProto history = 16;
    if (has_history()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history());
    }

  }
  // repeated .lapis.DAryProto grad = 15;
  total_size += 1 * this->grad_size();
  for (int i = 0; i < this->grad_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grad(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGDValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SGDValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SGDValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SGDValue::MergeFrom(const SGDValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  grad_.MergeFrom(from.grad_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_learning_rate()) {
      set_base_learning_rate(from.base_learning_rate());
    }
    if (from.has_momentum()) {
      set_momentum(from.momentum());
    }
    if (from.has_weight_decay()) {
      set_weight_decay(from.weight_decay());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
    if (from.has_learning_rate_change_steps()) {
      set_learning_rate_change_steps(from.learning_rate_change_steps());
    }
    if (from.has_learning_rate_change()) {
      set_learning_rate_change(from.learning_rate_change());
    }
    if (from.has_learning_rate_multiplier()) {
      set_learning_rate_multiplier(from.learning_rate_multiplier());
    }
    if (from.has_weight_decay_multiplier()) {
      set_weight_decay_multiplier(from.weight_decay_multiplier());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_n_update()) {
      set_n_update(from.n_update());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_data()) {
      mutable_data()->::lapis::DAryProto::MergeFrom(from.data());
    }
    if (from.has_history()) {
      mutable_history()->::lapis::DAryProto::MergeFrom(from.history());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SGDValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGDValue::CopyFrom(const SGDValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGDValue::IsInitialized() const {

  return true;
}

void SGDValue::Swap(SGDValue* other) {
  if (other != this) {
    std::swap(base_learning_rate_, other->base_learning_rate_);
    std::swap(momentum_, other->momentum_);
    std::swap(weight_decay_, other->weight_decay_);
    std::swap(gamma_, other->gamma_);
    std::swap(learning_rate_change_steps_, other->learning_rate_change_steps_);
    std::swap(learning_rate_change_, other->learning_rate_change_);
    std::swap(learning_rate_multiplier_, other->learning_rate_multiplier_);
    std::swap(weight_decay_multiplier_, other->weight_decay_multiplier_);
    std::swap(n_update_, other->n_update_);
    std::swap(version_, other->version_);
    std::swap(threshold_, other->threshold_);
    std::swap(id_, other->id_);
    std::swap(gid_, other->gid_);
    std::swap(data_, other->data_);
    grad_.Swap(&other->grad_);
    std::swap(history_, other->history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SGDValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SGDValue_descriptor_;
  metadata.reflection = SGDValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VKey::kKeyFieldNumber;
const int VKey::kVersionFieldNumber;
const int VKey::kGidFieldNumber;
#endif  // !_MSC_VER

VKey::VKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lapis.VKey)
}

void VKey::InitAsDefaultInstance() {
}

VKey::VKey(const VKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lapis.VKey)
}

void VKey::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  version_ = 0;
  gid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VKey::~VKey() {
  // @@protoc_insertion_point(destructor:lapis.VKey)
  SharedDtor();
}

void VKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VKey_descriptor_;
}

const VKey& VKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

VKey* VKey::default_instance_ = NULL;

VKey* VKey::New() const {
  return new VKey;
}

void VKey::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VKey*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(key_, gid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lapis.VKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional int32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }

      // optional int32 gid = 3;
      case 3: {
        if (tag == 24) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lapis.VKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lapis.VKey)
  return false;
#undef DO_
}

void VKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lapis.VKey)
  // optional int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // optional int32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // optional int32 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lapis.VKey)
}

::google::protobuf::uint8* VKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lapis.VKey)
  // optional int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // optional int32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }

  // optional int32 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lapis.VKey)
  return target;
}

int VKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional int32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 gid = 3;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VKey::MergeFrom(const VKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VKey::CopyFrom(const VKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VKey::IsInitialized() const {

  return true;
}

void VKey::Swap(VKey* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(version_, other->version_);
    std::swap(gid_, other->gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VKey_descriptor_;
  metadata.reflection = VKey_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lapis

// @@protoc_insertion_point(global_scope)
