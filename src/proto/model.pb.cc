// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lapis {

namespace {

const ::google::protobuf::Descriptor* Shape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shape_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataSourceProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataSourceProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParamProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParamProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ParamProto_InitMethod_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EdgeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EdgeProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EdgeProto_PoolingMethod_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MeanProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeanProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* LayerProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayerProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SGDProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SGDProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SGDProto_ChangeProto_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Performance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Performance_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrainerProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrainerProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TrainerProto_Algorithm_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloatVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloatVector_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_model_2eproto() {
  protobuf_AddDesc_model_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "model.proto");
  GOOGLE_CHECK(file != NULL);
  Shape_descriptor_ = file->message_type(0);
  static const int Shape_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, width_),
  };
  Shape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shape_descriptor_,
      Shape::default_instance_,
      Shape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shape));
  DataSourceProto_descriptor_ = file->message_type(1);
  static const int DataSourceProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceProto, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceProto, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceProto, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceProto, mean_file_),
  };
  DataSourceProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataSourceProto_descriptor_,
      DataSourceProto::default_instance_,
      DataSourceProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataSourceProto));
  ParamProto_descriptor_ = file->message_type(2);
  static const int ParamProto_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, init_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, std_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, momentum_multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, learning_rate_multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, weight_decay_multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, history_),
  };
  ParamProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParamProto_descriptor_,
      ParamProto::default_instance_,
      ParamProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParamProto));
  ParamProto_InitMethod_descriptor_ = ParamProto_descriptor_->enum_type(0);
  EdgeProto_descriptor_ = file->message_type(3);
  static const int EdgeProto_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeProto, num_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeProto, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeProto, directed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeProto, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeProto, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeProto, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeProto, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeProto, pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeProto, num_groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeProto, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeProto, beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeProto, knorm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeProto, local_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeProto, pooling_method_),
  };
  EdgeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EdgeProto_descriptor_,
      EdgeProto::default_instance_,
      EdgeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EdgeProto));
  EdgeProto_PoolingMethod_descriptor_ = EdgeProto_descriptor_->enum_type(0);
  MeanProto_descriptor_ = file->message_type(4);
  static const int MeanProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanProto, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanProto, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanProto, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanProto, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanProto, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanProto, diff_),
  };
  MeanProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MeanProto_descriptor_,
      MeanProto::default_instance_,
      MeanProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MeanProto));
  LayerProto_descriptor_ = file->message_type(5);
  static const int LayerProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, data_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, drop_prob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, cropsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, mirror_),
  };
  LayerProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LayerProto_descriptor_,
      LayerProto::default_instance_,
      LayerProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LayerProto));
  NetProto_descriptor_ = file->message_type(6);
  static const int NetProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto, edge_),
  };
  NetProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_descriptor_,
      NetProto::default_instance_,
      NetProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto));
  SGDProto_descriptor_ = file->message_type(7);
  static const int SGDProto_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProto, base_learning_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProto, base_momentum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProto, base_weight_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProto, momentum_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProto, learning_rate_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProto, weight_decay_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProto, learning_rate_change_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProto, momentum_change_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProto, weight_decay_change_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProto, learning_rate_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProto, weight_decay_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProto, momentum_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProto, total_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProto, train_batchsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProto, validation_batchsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProto, test_batchsize_),
  };
  SGDProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SGDProto_descriptor_,
      SGDProto::default_instance_,
      SGDProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SGDProto));
  SGDProto_ChangeProto_descriptor_ = SGDProto_descriptor_->enum_type(0);
  Performance_descriptor_ = file->message_type(8);
  static const int Performance_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, recall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, precision50_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, prefix_),
  };
  Performance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Performance_descriptor_,
      Performance::default_instance_,
      Performance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Performance));
  TrainerProto_descriptor_ = file->message_type(9);
  static const int TrainerProto_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainerProto, sgd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainerProto, checkpoint_after_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainerProto, checkpoint_every_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainerProto, checkpoint_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainerProto, checkpoint_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainerProto, display_after_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainerProto, display_every_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainerProto, display_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainerProto, validate_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainerProto, validate_after_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainerProto, validate_every_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainerProto, perf_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainerProto, alg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainerProto, do_train_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainerProto, do_test_),
  };
  TrainerProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrainerProto_descriptor_,
      TrainerProto::default_instance_,
      TrainerProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainerProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainerProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrainerProto));
  TrainerProto_Algorithm_descriptor_ = TrainerProto_descriptor_->enum_type(0);
  DataProto_descriptor_ = file->message_type(10);
  static const int DataProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataProto, train_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataProto, validation_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataProto, test_data_),
  };
  DataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataProto_descriptor_,
      DataProto::default_instance_,
      DataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataProto));
  ModelProto_descriptor_ = file->message_type(11);
  static const int ModelProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelProto, net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelProto, trainer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelProto, data_),
  };
  ModelProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelProto_descriptor_,
      ModelProto::default_instance_,
      ModelProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelProto));
  FloatVector_descriptor_ = file->message_type(12);
  static const int FloatVector_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatVector, data_),
  };
  FloatVector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloatVector_descriptor_,
      FloatVector::default_instance_,
      FloatVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatVector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatVector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloatVector));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_model_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shape_descriptor_, &Shape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataSourceProto_descriptor_, &DataSourceProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParamProto_descriptor_, &ParamProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EdgeProto_descriptor_, &EdgeProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MeanProto_descriptor_, &MeanProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LayerProto_descriptor_, &LayerProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_descriptor_, &NetProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SGDProto_descriptor_, &SGDProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Performance_descriptor_, &Performance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrainerProto_descriptor_, &TrainerProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataProto_descriptor_, &DataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelProto_descriptor_, &ModelProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloatVector_descriptor_, &FloatVector::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_model_2eproto() {
  delete Shape::default_instance_;
  delete Shape_reflection_;
  delete DataSourceProto::default_instance_;
  delete DataSourceProto_reflection_;
  delete ParamProto::default_instance_;
  delete ParamProto_reflection_;
  delete EdgeProto::default_instance_;
  delete EdgeProto_reflection_;
  delete MeanProto::default_instance_;
  delete MeanProto_reflection_;
  delete LayerProto::default_instance_;
  delete LayerProto_reflection_;
  delete NetProto::default_instance_;
  delete NetProto_reflection_;
  delete SGDProto::default_instance_;
  delete SGDProto_reflection_;
  delete Performance::default_instance_;
  delete Performance_reflection_;
  delete TrainerProto::default_instance_;
  delete TrainerProto_reflection_;
  delete TrainerProto::_default_checkpoint_prefix_;
  delete TrainerProto::_default_display_prefix_;
  delete TrainerProto::_default_perf_prefix_;
  delete DataProto::default_instance_;
  delete DataProto_reflection_;
  delete ModelProto::default_instance_;
  delete ModelProto_reflection_;
  delete FloatVector::default_instance_;
  delete FloatVector_reflection_;
}

void protobuf_AddDesc_model_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013model.proto\022\005lapis\"Q\n\005Shape\022\016\n\003num\030\004 \001"
    "(\003:\0010\022\023\n\010channels\030\006 \001(\005:\0011\022\021\n\006height\030\007 \001"
    "(\005:\0011\022\020\n\005width\030\010 \001(\005:\0011\"~\n\017DataSourcePro"
    "to\022\014\n\004name\030\001 \002(\t\022\014\n\004type\030\002 \002(\t\022\014\n\004path\030\003"
    " \002(\t\022\033\n\005shape\030\004 \001(\0132\014.lapis.Shape\022\021\n\006off"
    "set\030\t \001(\003:\0010\022\021\n\tmean_file\030\n \001(\t\"\344\003\n\nPara"
    "mProto\022\014\n\004name\030\001 \002(\t\022\r\n\005shape\030\002 \003(\005\022<\n\013i"
    "nit_method\030\003 \001(\0162\034.lapis.ParamProto.Init"
    "Method:\tkConstant\022\020\n\005value\030\004 \001(\002:\0011\022\017\n\003l"
    "ow\030\005 \001(\002:\002-1\022\017\n\004high\030\006 \001(\002:\0011\022\017\n\004mean\030\007 "
    "\001(\002:\0010\022\016\n\003std\030\010 \001(\002:\0011\022\036\n\023momentum_multi"
    "plier\030\t \001(\002:\0011\022#\n\030learning_rate_multipli"
    "er\030\n \001(\002:\0011\022\"\n\027weight_decay_multiplier\030\013"
    " \001(\002:\0011\022\023\n\007content\030\r \003(\002B\002\020\001\022\023\n\007history\030"
    "\016 \003(\002B\002\020\001\"\222\001\n\nInitMethod\022\r\n\tkConstant\020\000\022"
    "\r\n\tkGaussain\020\001\022\014\n\010kUniform\020\002\022\017\n\013kPretrai"
    "ned\020\003\022\026\n\022kGaussainSqrtFanIn\020\004\022\025\n\021kUnifor"
    "mSqrtFanIn\020\005\022\030\n\024kUniformSqrtFanInOut\020\006\"\217"
    "\003\n\tEdgeProto\022\014\n\004name\030\001 \002(\t\022\014\n\004type\030\002 \002(\t"
    "\022\022\n\nnum_output\030\003 \001(\005\022 \n\005param\030\004 \003(\0132\021.la"
    "pis.ParamProto\022\026\n\010directed\030\005 \001(\010:\004true\022\013"
    "\n\003top\030\006 \001(\t\022\016\n\006bottom\030\007 \001(\t\022\023\n\013kernel_si"
    "ze\030\010 \001(\005\022\021\n\006stride\030\t \001(\005:\0011\022\016\n\003pad\030\n \001(\005"
    ":\0010\022\025\n\nnum_groups\030\013 \001(\005:\0011\022\r\n\005alpha\030\014 \001("
    "\002\022\014\n\004beta\030\r \001(\002\022\020\n\005knorm\030\016 \001(\002:\0011\022\022\n\nloc"
    "al_size\030\017 \001(\005\0226\n\016pooling_method\030\020 \001(\0162\036."
    "lapis.EdgeProto.PoolingMethod\"1\n\rPooling"
    "Method\022\017\n\013kMaxPooling\020\001\022\017\n\013kAvgPooling\020\002"
    "\"y\n\tMeanProto\022\016\n\003num\030\001 \001(\005:\0010\022\023\n\010channel"
    "s\030\002 \001(\005:\0010\022\021\n\006height\030\003 \001(\005:\0010\022\020\n\005width\030\004"
    " \001(\005:\0010\022\020\n\004data\030\005 \003(\002B\002\020\001\022\020\n\004diff\030\006 \003(\002B"
    "\002\020\001\"u\n\nLayerProto\022\014\n\004name\030\001 \002(\t\022\014\n\004type\030"
    "\003 \002(\t\022\023\n\013data_source\030\007 \001(\t\022\024\n\tdrop_prob\030"
    "\010 \001(\002:\0010\022\020\n\010cropsize\030\t \001(\005\022\016\n\006mirror\030\n \001"
    "(\010\"L\n\010NetProto\022 \n\005layer\030\003 \003(\0132\021.lapis.La"
    "yerProto\022\036\n\004edge\030\004 \003(\0132\020.lapis.EdgeProto"
    "\"\211\005\n\010SGDProto\022\032\n\022base_learning_rate\030\001 \002("
    "\002\022\030\n\rbase_momentum\030\002 \001(\002:\0010\022\034\n\021base_weig"
    "ht_decay\030\003 \001(\002:\0010\022\022\n\nmomentum_x\030\004 \001(\002\022\027\n"
    "\017learning_rate_x\030\005 \001(\002\022\026\n\016weight_decay_x"
    "\030\006 \001(\002\022\"\n\032learning_rate_change_steps\030\007 \001"
    "(\005\022\035\n\025momentum_change_steps\030\010 \001(\005\022!\n\031wei"
    "ght_decay_change_steps\030\t \001(\005\022E\n\024learning"
    "_rate_change\030\n \001(\0162\033.lapis.SGDProto.Chan"
    "geProto:\nkInverse_t\022@\n\023weight_decay_chan"
    "ge\030\013 \001(\0162\033.lapis.SGDProto.ChangeProto:\006k"
    "Fixed\022<\n\017momentum_change\030\014 \001(\0162\033.lapis.S"
    "GDProto.ChangeProto:\006kFixed\022\023\n\013total_ste"
    "ps\030\r \001(\005\022\027\n\017train_batchsize\030\016 \001(\005\022\034\n\024val"
    "idation_batchsize\030\017 \001(\005\022\026\n\016test_batchsiz"
    "e\030\020 \001(\005\"S\n\013ChangeProto\022\n\n\006kFixed\020\000\022\016\n\nkI"
    "nverse_t\020\001\022\020\n\014kExponential\020\002\022\013\n\007kLinear\020"
    "\003\022\t\n\005kStep\020\004\"~\n\013Performance\022\014\n\004loss\030\001 \001("
    "\002\022\021\n\tprecision\030\002 \001(\002\022\016\n\006recall\030\003 \001(\002\022\013\n\003"
    "map\030\004 \001(\002\022\023\n\013precision50\030\005 \001(\002\022\014\n\004step\030\006"
    " \001(\005\022\016\n\006prefix\030\007 \001(\t\"\315\004\n\014TrainerProto\022\034\n"
    "\003sgd\030\001 \001(\0132\017.lapis.SGDProto\022!\n\026checkpoin"
    "t_after_steps\030\002 \001(\005:\0010\022!\n\026checkpoint_eve"
    "ry_steps\030\003 \001(\005:\0010\022)\n\021checkpoint_prefix\030\004"
    " \001(\t:\016tmp/checkpoint\022\032\n\017checkpoint_step\030"
    "\005 \001(\005:\0010\022\036\n\023display_after_steps\030\006 \001(\005:\0010"
    "\022\036\n\023display_every_steps\030\007 \001(\005:\0010\022#\n\016disp"
    "lay_prefix\030\010 \001(\t:\013tmp/display\022\030\n\rvalidat"
    "e_step\030\t \001(\005:\0010\022\037\n\024validate_after_steps\030"
    "\n \001(\005:\0010\022\037\n\024validate_every_steps\030\013 \001(\005:\001"
    "0\022$\n\013perf_prefix\030\017 \001(\t:\017tmp/performance\022"
    "<\n\003alg\030\020 \001(\0162\035.lapis.TrainerProto.Algori"
    "thm:\020kBackPropagation\022\026\n\010do_train\030\021 \001(\010:"
    "\004true\022\026\n\007do_test\030\022 \001(\010:\005false\"=\n\tAlgorit"
    "hm\022\024\n\020kBackPropagation\020\001\022\032\n\026kContrastive"
    "Divergence\020\002\"\223\001\n\tDataProto\022*\n\ntrain_data"
    "\030\001 \003(\0132\026.lapis.DataSourceProto\022/\n\017valida"
    "tion_data\030\002 \003(\0132\026.lapis.DataSourceProto\022"
    ")\n\ttest_data\030\003 \003(\0132\026.lapis.DataSourcePro"
    "to\"~\n\nModelProto\022\014\n\004name\030\001 \001(\t\022\034\n\003net\030\002 "
    "\001(\0132\017.lapis.NetProto\022$\n\007trainer\030\003 \001(\0132\023."
    "lapis.TrainerProto\022\036\n\004data\030\004 \001(\0132\020.lapis"
    ".DataProto\"\033\n\013FloatVector\022\014\n\004data\030\001 \003(\002", 3119);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "model.proto", &protobuf_RegisterTypes);
  Shape::default_instance_ = new Shape();
  DataSourceProto::default_instance_ = new DataSourceProto();
  ParamProto::default_instance_ = new ParamProto();
  EdgeProto::default_instance_ = new EdgeProto();
  MeanProto::default_instance_ = new MeanProto();
  LayerProto::default_instance_ = new LayerProto();
  NetProto::default_instance_ = new NetProto();
  SGDProto::default_instance_ = new SGDProto();
  Performance::default_instance_ = new Performance();
  TrainerProto::_default_checkpoint_prefix_ =
      new ::std::string("tmp/checkpoint", 14);
  TrainerProto::_default_display_prefix_ =
      new ::std::string("tmp/display", 11);
  TrainerProto::_default_perf_prefix_ =
      new ::std::string("tmp/performance", 15);
  TrainerProto::default_instance_ = new TrainerProto();
  DataProto::default_instance_ = new DataProto();
  ModelProto::default_instance_ = new ModelProto();
  FloatVector::default_instance_ = new FloatVector();
  Shape::default_instance_->InitAsDefaultInstance();
  DataSourceProto::default_instance_->InitAsDefaultInstance();
  ParamProto::default_instance_->InitAsDefaultInstance();
  EdgeProto::default_instance_->InitAsDefaultInstance();
  MeanProto::default_instance_->InitAsDefaultInstance();
  LayerProto::default_instance_->InitAsDefaultInstance();
  NetProto::default_instance_->InitAsDefaultInstance();
  SGDProto::default_instance_->InitAsDefaultInstance();
  Performance::default_instance_->InitAsDefaultInstance();
  TrainerProto::default_instance_->InitAsDefaultInstance();
  DataProto::default_instance_->InitAsDefaultInstance();
  ModelProto::default_instance_->InitAsDefaultInstance();
  FloatVector::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_model_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_model_2eproto {
  StaticDescriptorInitializer_model_2eproto() {
    protobuf_AddDesc_model_2eproto();
  }
} static_descriptor_initializer_model_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Shape::kNumFieldNumber;
const int Shape::kChannelsFieldNumber;
const int Shape::kHeightFieldNumber;
const int Shape::kWidthFieldNumber;
#endif  // !_MSC_VER

Shape::Shape()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shape::InitAsDefaultInstance() {
}

Shape::Shape(const Shape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shape::SharedCtor() {
  _cached_size_ = 0;
  num_ = GOOGLE_LONGLONG(0);
  channels_ = 1;
  height_ = 1;
  width_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shape::~Shape() {
  SharedDtor();
}

void Shape::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shape_descriptor_;
}

const Shape& Shape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

Shape* Shape::default_instance_ = NULL;

Shape* Shape::New() const {
  return new Shape;
}

void Shape::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = GOOGLE_LONGLONG(0);
    channels_ = 1;
    height_ = 1;
    width_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 num = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_channels;
        break;
      }

      // optional int32 channels = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_height;
        break;
      }

      // optional int32 height = 7 [default = 1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_width;
        break;
      }

      // optional int32 width = 8 [default = 1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 num = 4 [default = 0];
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->num(), output);
  }

  // optional int32 channels = 6 [default = 1];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->channels(), output);
  }

  // optional int32 height = 7 [default = 1];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->height(), output);
  }

  // optional int32 width = 8 [default = 1];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->width(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 num = 4 [default = 0];
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->num(), target);
  }

  // optional int32 channels = 6 [default = 1];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->channels(), target);
  }

  // optional int32 height = 7 [default = 1];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->height(), target);
  }

  // optional int32 width = 8 [default = 1];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->width(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shape::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 num = 4 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num());
    }

    // optional int32 channels = 6 [default = 1];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 7 [default = 1];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 8 [default = 1];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shape::MergeFrom(const Shape& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shape::CopyFrom(const Shape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shape::IsInitialized() const {

  return true;
}

void Shape::Swap(Shape* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(channels_, other->channels_);
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shape_descriptor_;
  metadata.reflection = Shape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataSourceProto::kNameFieldNumber;
const int DataSourceProto::kTypeFieldNumber;
const int DataSourceProto::kPathFieldNumber;
const int DataSourceProto::kShapeFieldNumber;
const int DataSourceProto::kOffsetFieldNumber;
const int DataSourceProto::kMeanFileFieldNumber;
#endif  // !_MSC_VER

DataSourceProto::DataSourceProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataSourceProto::InitAsDefaultInstance() {
  shape_ = const_cast< ::lapis::Shape*>(&::lapis::Shape::default_instance());
}

DataSourceProto::DataSourceProto(const DataSourceProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataSourceProto::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shape_ = NULL;
  offset_ = GOOGLE_LONGLONG(0);
  mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataSourceProto::~DataSourceProto() {
  SharedDtor();
}

void DataSourceProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (mean_file_ != &::google::protobuf::internal::kEmptyString) {
    delete mean_file_;
  }
  if (this != default_instance_) {
    delete shape_;
  }
}

void DataSourceProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataSourceProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataSourceProto_descriptor_;
}

const DataSourceProto& DataSourceProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

DataSourceProto* DataSourceProto::default_instance_ = NULL;

DataSourceProto* DataSourceProto::New() const {
  return new DataSourceProto;
}

void DataSourceProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_shape()) {
      if (shape_ != NULL) shape_->::lapis::Shape::Clear();
    }
    offset_ = GOOGLE_LONGLONG(0);
    if (has_mean_file()) {
      if (mean_file_ != &::google::protobuf::internal::kEmptyString) {
        mean_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataSourceProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }

      // required string path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_shape;
        break;
      }

      // optional .lapis.Shape shape = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_offset;
        break;
      }

      // optional int64 offset = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_mean_file;
        break;
      }

      // optional string mean_file = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mean_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataSourceProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // required string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->path(), output);
  }

  // optional .lapis.Shape shape = 4;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->shape(), output);
  }

  // optional int64 offset = 9 [default = 0];
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->offset(), output);
  }

  // optional string mean_file = 10;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->mean_file(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataSourceProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // optional .lapis.Shape shape = 4;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->shape(), target);
  }

  // optional int64 offset = 9 [default = 0];
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->offset(), target);
  }

  // optional string mean_file = 10;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->mean_file(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataSourceProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional .lapis.Shape shape = 4;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape());
    }

    // optional int64 offset = 9 [default = 0];
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offset());
    }

    // optional string mean_file = 10;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataSourceProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataSourceProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataSourceProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataSourceProto::MergeFrom(const DataSourceProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_shape()) {
      mutable_shape()->::lapis::Shape::MergeFrom(from.shape());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_mean_file()) {
      set_mean_file(from.mean_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataSourceProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSourceProto::CopyFrom(const DataSourceProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSourceProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DataSourceProto::Swap(DataSourceProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(path_, other->path_);
    std::swap(shape_, other->shape_);
    std::swap(offset_, other->offset_);
    std::swap(mean_file_, other->mean_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataSourceProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataSourceProto_descriptor_;
  metadata.reflection = DataSourceProto_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ParamProto_InitMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParamProto_InitMethod_descriptor_;
}
bool ParamProto_InitMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ParamProto_InitMethod ParamProto::kConstant;
const ParamProto_InitMethod ParamProto::kGaussain;
const ParamProto_InitMethod ParamProto::kUniform;
const ParamProto_InitMethod ParamProto::kPretrained;
const ParamProto_InitMethod ParamProto::kGaussainSqrtFanIn;
const ParamProto_InitMethod ParamProto::kUniformSqrtFanIn;
const ParamProto_InitMethod ParamProto::kUniformSqrtFanInOut;
const ParamProto_InitMethod ParamProto::InitMethod_MIN;
const ParamProto_InitMethod ParamProto::InitMethod_MAX;
const int ParamProto::InitMethod_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ParamProto::kNameFieldNumber;
const int ParamProto::kShapeFieldNumber;
const int ParamProto::kInitMethodFieldNumber;
const int ParamProto::kValueFieldNumber;
const int ParamProto::kLowFieldNumber;
const int ParamProto::kHighFieldNumber;
const int ParamProto::kMeanFieldNumber;
const int ParamProto::kStdFieldNumber;
const int ParamProto::kMomentumMultiplierFieldNumber;
const int ParamProto::kLearningRateMultiplierFieldNumber;
const int ParamProto::kWeightDecayMultiplierFieldNumber;
const int ParamProto::kContentFieldNumber;
const int ParamProto::kHistoryFieldNumber;
#endif  // !_MSC_VER

ParamProto::ParamProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParamProto::InitAsDefaultInstance() {
}

ParamProto::ParamProto(const ParamProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParamProto::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  init_method_ = 0;
  value_ = 1;
  low_ = -1;
  high_ = 1;
  mean_ = 0;
  std_ = 1;
  momentum_multiplier_ = 1;
  learning_rate_multiplier_ = 1;
  weight_decay_multiplier_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParamProto::~ParamProto() {
  SharedDtor();
}

void ParamProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ParamProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParamProto_descriptor_;
}

const ParamProto& ParamProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

ParamProto* ParamProto::default_instance_ = NULL;

ParamProto* ParamProto::New() const {
  return new ParamProto;
}

void ParamProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    init_method_ = 0;
    value_ = 1;
    low_ = -1;
    high_ = 1;
    mean_ = 0;
    std_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    momentum_multiplier_ = 1;
    learning_rate_multiplier_ = 1;
    weight_decay_multiplier_ = 1;
  }
  shape_.Clear();
  content_.Clear();
  history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParamProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shape;
        break;
      }

      // repeated int32 shape = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_shape())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shape())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shape;
        if (input->ExpectTag(24)) goto parse_init_method;
        break;
      }

      // optional .lapis.ParamProto.InitMethod init_method = 3 [default = kConstant];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lapis::ParamProto_InitMethod_IsValid(value)) {
            set_init_method(static_cast< ::lapis::ParamProto_InitMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_value;
        break;
      }

      // optional float value = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_low;
        break;
      }

      // optional float low = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_high;
        break;
      }

      // optional float high = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_mean;
        break;
      }

      // optional float mean = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_std;
        break;
      }

      // optional float std = 8 [default = 1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_std:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &std_)));
          set_has_std();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_momentum_multiplier;
        break;
      }

      // optional float momentum_multiplier = 9 [default = 1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_momentum_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_multiplier_)));
          set_has_momentum_multiplier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_learning_rate_multiplier;
        break;
      }

      // optional float learning_rate_multiplier = 10 [default = 1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_learning_rate_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_multiplier_)));
          set_has_learning_rate_multiplier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_weight_decay_multiplier;
        break;
      }

      // optional float weight_decay_multiplier = 11 [default = 1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight_decay_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_decay_multiplier_)));
          set_has_weight_decay_multiplier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_content;
        break;
      }

      // repeated float content = 13 [packed = true];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_content())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 106, input, this->mutable_content())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_history;
        break;
      }

      // repeated float history = 14 [packed = true];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_history())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 114, input, this->mutable_history())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParamProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated int32 shape = 2;
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->shape(i), output);
  }

  // optional .lapis.ParamProto.InitMethod init_method = 3 [default = kConstant];
  if (has_init_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->init_method(), output);
  }

  // optional float value = 4 [default = 1];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->value(), output);
  }

  // optional float low = 5 [default = -1];
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->low(), output);
  }

  // optional float high = 6 [default = 1];
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->high(), output);
  }

  // optional float mean = 7 [default = 0];
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->mean(), output);
  }

  // optional float std = 8 [default = 1];
  if (has_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->std(), output);
  }

  // optional float momentum_multiplier = 9 [default = 1];
  if (has_momentum_multiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->momentum_multiplier(), output);
  }

  // optional float learning_rate_multiplier = 10 [default = 1];
  if (has_learning_rate_multiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->learning_rate_multiplier(), output);
  }

  // optional float weight_decay_multiplier = 11 [default = 1];
  if (has_weight_decay_multiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->weight_decay_multiplier(), output);
  }

  // repeated float content = 13 [packed = true];
  if (this->content_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_content_cached_byte_size_);
  }
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->content(i), output);
  }

  // repeated float history = 14 [packed = true];
  if (this->history_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_history_cached_byte_size_);
  }
  for (int i = 0; i < this->history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParamProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated int32 shape = 2;
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->shape(i), target);
  }

  // optional .lapis.ParamProto.InitMethod init_method = 3 [default = kConstant];
  if (has_init_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->init_method(), target);
  }

  // optional float value = 4 [default = 1];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->value(), target);
  }

  // optional float low = 5 [default = -1];
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->low(), target);
  }

  // optional float high = 6 [default = 1];
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->high(), target);
  }

  // optional float mean = 7 [default = 0];
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->mean(), target);
  }

  // optional float std = 8 [default = 1];
  if (has_std()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->std(), target);
  }

  // optional float momentum_multiplier = 9 [default = 1];
  if (has_momentum_multiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->momentum_multiplier(), target);
  }

  // optional float learning_rate_multiplier = 10 [default = 1];
  if (has_learning_rate_multiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->learning_rate_multiplier(), target);
  }

  // optional float weight_decay_multiplier = 11 [default = 1];
  if (has_weight_decay_multiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->weight_decay_multiplier(), target);
  }

  // repeated float content = 13 [packed = true];
  if (this->content_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _content_cached_byte_size_, target);
  }
  for (int i = 0; i < this->content_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->content(i), target);
  }

  // repeated float history = 14 [packed = true];
  if (this->history_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _history_cached_byte_size_, target);
  }
  for (int i = 0; i < this->history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParamProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .lapis.ParamProto.InitMethod init_method = 3 [default = kConstant];
    if (has_init_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->init_method());
    }

    // optional float value = 4 [default = 1];
    if (has_value()) {
      total_size += 1 + 4;
    }

    // optional float low = 5 [default = -1];
    if (has_low()) {
      total_size += 1 + 4;
    }

    // optional float high = 6 [default = 1];
    if (has_high()) {
      total_size += 1 + 4;
    }

    // optional float mean = 7 [default = 0];
    if (has_mean()) {
      total_size += 1 + 4;
    }

    // optional float std = 8 [default = 1];
    if (has_std()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float momentum_multiplier = 9 [default = 1];
    if (has_momentum_multiplier()) {
      total_size += 1 + 4;
    }

    // optional float learning_rate_multiplier = 10 [default = 1];
    if (has_learning_rate_multiplier()) {
      total_size += 1 + 4;
    }

    // optional float weight_decay_multiplier = 11 [default = 1];
    if (has_weight_decay_multiplier()) {
      total_size += 1 + 4;
    }

  }
  // repeated int32 shape = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->shape_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shape(i));
    }
    total_size += 1 * this->shape_size() + data_size;
  }

  // repeated float content = 13 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->content_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _content_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float history = 14 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->history_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _history_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParamProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParamProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParamProto::MergeFrom(const ParamProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  shape_.MergeFrom(from.shape_);
  content_.MergeFrom(from.content_);
  history_.MergeFrom(from.history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_init_method()) {
      set_init_method(from.init_method());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_std()) {
      set_std(from.std());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_momentum_multiplier()) {
      set_momentum_multiplier(from.momentum_multiplier());
    }
    if (from.has_learning_rate_multiplier()) {
      set_learning_rate_multiplier(from.learning_rate_multiplier());
    }
    if (from.has_weight_decay_multiplier()) {
      set_weight_decay_multiplier(from.weight_decay_multiplier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParamProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamProto::CopyFrom(const ParamProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ParamProto::Swap(ParamProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    shape_.Swap(&other->shape_);
    std::swap(init_method_, other->init_method_);
    std::swap(value_, other->value_);
    std::swap(low_, other->low_);
    std::swap(high_, other->high_);
    std::swap(mean_, other->mean_);
    std::swap(std_, other->std_);
    std::swap(momentum_multiplier_, other->momentum_multiplier_);
    std::swap(learning_rate_multiplier_, other->learning_rate_multiplier_);
    std::swap(weight_decay_multiplier_, other->weight_decay_multiplier_);
    content_.Swap(&other->content_);
    history_.Swap(&other->history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParamProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParamProto_descriptor_;
  metadata.reflection = ParamProto_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* EdgeProto_PoolingMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EdgeProto_PoolingMethod_descriptor_;
}
bool EdgeProto_PoolingMethod_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EdgeProto_PoolingMethod EdgeProto::kMaxPooling;
const EdgeProto_PoolingMethod EdgeProto::kAvgPooling;
const EdgeProto_PoolingMethod EdgeProto::PoolingMethod_MIN;
const EdgeProto_PoolingMethod EdgeProto::PoolingMethod_MAX;
const int EdgeProto::PoolingMethod_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int EdgeProto::kNameFieldNumber;
const int EdgeProto::kTypeFieldNumber;
const int EdgeProto::kNumOutputFieldNumber;
const int EdgeProto::kParamFieldNumber;
const int EdgeProto::kDirectedFieldNumber;
const int EdgeProto::kTopFieldNumber;
const int EdgeProto::kBottomFieldNumber;
const int EdgeProto::kKernelSizeFieldNumber;
const int EdgeProto::kStrideFieldNumber;
const int EdgeProto::kPadFieldNumber;
const int EdgeProto::kNumGroupsFieldNumber;
const int EdgeProto::kAlphaFieldNumber;
const int EdgeProto::kBetaFieldNumber;
const int EdgeProto::kKnormFieldNumber;
const int EdgeProto::kLocalSizeFieldNumber;
const int EdgeProto::kPoolingMethodFieldNumber;
#endif  // !_MSC_VER

EdgeProto::EdgeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EdgeProto::InitAsDefaultInstance() {
}

EdgeProto::EdgeProto(const EdgeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EdgeProto::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_output_ = 0;
  directed_ = true;
  top_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bottom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kernel_size_ = 0;
  stride_ = 1;
  pad_ = 0;
  num_groups_ = 1;
  alpha_ = 0;
  beta_ = 0;
  knorm_ = 1;
  local_size_ = 0;
  pooling_method_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EdgeProto::~EdgeProto() {
  SharedDtor();
}

void EdgeProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (top_ != &::google::protobuf::internal::kEmptyString) {
    delete top_;
  }
  if (bottom_ != &::google::protobuf::internal::kEmptyString) {
    delete bottom_;
  }
  if (this != default_instance_) {
  }
}

void EdgeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdgeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EdgeProto_descriptor_;
}

const EdgeProto& EdgeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

EdgeProto* EdgeProto::default_instance_ = NULL;

EdgeProto* EdgeProto::New() const {
  return new EdgeProto;
}

void EdgeProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    num_output_ = 0;
    directed_ = true;
    if (has_top()) {
      if (top_ != &::google::protobuf::internal::kEmptyString) {
        top_->clear();
      }
    }
    if (has_bottom()) {
      if (bottom_ != &::google::protobuf::internal::kEmptyString) {
        bottom_->clear();
      }
    }
    kernel_size_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    stride_ = 1;
    pad_ = 0;
    num_groups_ = 1;
    alpha_ = 0;
    beta_ = 0;
    knorm_ = 1;
    local_size_ = 0;
    pooling_method_ = 1;
  }
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EdgeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_output;
        break;
      }

      // optional int32 num_output = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_output_)));
          set_has_num_output();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_param;
        break;
      }

      // repeated .lapis.ParamProto param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_param;
        if (input->ExpectTag(40)) goto parse_directed;
        break;
      }

      // optional bool directed = 5 [default = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_directed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &directed_)));
          set_has_directed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_top;
        break;
      }

      // optional string top = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_top:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_top()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->top().data(), this->top().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_bottom;
        break;
      }

      // optional string bottom = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bottom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bottom().data(), this->bottom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_kernel_size;
        break;
      }

      // optional int32 kernel_size = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kernel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_size_)));
          set_has_kernel_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_stride;
        break;
      }

      // optional int32 stride = 9 [default = 1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pad;
        break;
      }

      // optional int32 pad = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_)));
          set_has_pad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_num_groups;
        break;
      }

      // optional int32 num_groups = 11 [default = 1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_groups:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_groups_)));
          set_has_num_groups();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_alpha;
        break;
      }

      // optional float alpha = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_beta;
        break;
      }

      // optional float beta = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
          set_has_beta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_knorm;
        break;
      }

      // optional float knorm = 14 [default = 1];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_knorm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &knorm_)));
          set_has_knorm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_local_size;
        break;
      }

      // optional int32 local_size = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_size_)));
          set_has_local_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_pooling_method;
        break;
      }

      // optional .lapis.EdgeProto.PoolingMethod pooling_method = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pooling_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lapis::EdgeProto_PoolingMethod_IsValid(value)) {
            set_pooling_method(static_cast< ::lapis::EdgeProto_PoolingMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EdgeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // optional int32 num_output = 3;
  if (has_num_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_output(), output);
  }

  // repeated .lapis.ParamProto param = 4;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->param(i), output);
  }

  // optional bool directed = 5 [default = true];
  if (has_directed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->directed(), output);
  }

  // optional string top = 6;
  if (has_top()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->top().data(), this->top().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->top(), output);
  }

  // optional string bottom = 7;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bottom().data(), this->bottom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->bottom(), output);
  }

  // optional int32 kernel_size = 8;
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->kernel_size(), output);
  }

  // optional int32 stride = 9 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->stride(), output);
  }

  // optional int32 pad = 10 [default = 0];
  if (has_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pad(), output);
  }

  // optional int32 num_groups = 11 [default = 1];
  if (has_num_groups()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->num_groups(), output);
  }

  // optional float alpha = 12;
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->alpha(), output);
  }

  // optional float beta = 13;
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->beta(), output);
  }

  // optional float knorm = 14 [default = 1];
  if (has_knorm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->knorm(), output);
  }

  // optional int32 local_size = 15;
  if (has_local_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->local_size(), output);
  }

  // optional .lapis.EdgeProto.PoolingMethod pooling_method = 16;
  if (has_pooling_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->pooling_method(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EdgeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional int32 num_output = 3;
  if (has_num_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_output(), target);
  }

  // repeated .lapis.ParamProto param = 4;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->param(i), target);
  }

  // optional bool directed = 5 [default = true];
  if (has_directed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->directed(), target);
  }

  // optional string top = 6;
  if (has_top()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->top().data(), this->top().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->top(), target);
  }

  // optional string bottom = 7;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bottom().data(), this->bottom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->bottom(), target);
  }

  // optional int32 kernel_size = 8;
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->kernel_size(), target);
  }

  // optional int32 stride = 9 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->stride(), target);
  }

  // optional int32 pad = 10 [default = 0];
  if (has_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pad(), target);
  }

  // optional int32 num_groups = 11 [default = 1];
  if (has_num_groups()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->num_groups(), target);
  }

  // optional float alpha = 12;
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->alpha(), target);
  }

  // optional float beta = 13;
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->beta(), target);
  }

  // optional float knorm = 14 [default = 1];
  if (has_knorm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->knorm(), target);
  }

  // optional int32 local_size = 15;
  if (has_local_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->local_size(), target);
  }

  // optional .lapis.EdgeProto.PoolingMethod pooling_method = 16;
  if (has_pooling_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->pooling_method(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EdgeProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional int32 num_output = 3;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_output());
    }

    // optional bool directed = 5 [default = true];
    if (has_directed()) {
      total_size += 1 + 1;
    }

    // optional string top = 6;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->top());
    }

    // optional string bottom = 7;
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bottom());
    }

    // optional int32 kernel_size = 8;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kernel_size());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 stride = 9 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride());
    }

    // optional int32 pad = 10 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad());
    }

    // optional int32 num_groups = 11 [default = 1];
    if (has_num_groups()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_groups());
    }

    // optional float alpha = 12;
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // optional float beta = 13;
    if (has_beta()) {
      total_size += 1 + 4;
    }

    // optional float knorm = 14 [default = 1];
    if (has_knorm()) {
      total_size += 1 + 4;
    }

    // optional int32 local_size = 15;
    if (has_local_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->local_size());
    }

    // optional .lapis.EdgeProto.PoolingMethod pooling_method = 16;
    if (has_pooling_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pooling_method());
    }

  }
  // repeated .lapis.ParamProto param = 4;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdgeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EdgeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EdgeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EdgeProto::MergeFrom(const EdgeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num_output()) {
      set_num_output(from.num_output());
    }
    if (from.has_directed()) {
      set_directed(from.directed());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
    if (from.has_kernel_size()) {
      set_kernel_size(from.kernel_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_pad()) {
      set_pad(from.pad());
    }
    if (from.has_num_groups()) {
      set_num_groups(from.num_groups());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
    if (from.has_knorm()) {
      set_knorm(from.knorm());
    }
    if (from.has_local_size()) {
      set_local_size(from.local_size());
    }
    if (from.has_pooling_method()) {
      set_pooling_method(from.pooling_method());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EdgeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeProto::CopyFrom(const EdgeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < param_size(); i++) {
    if (!this->param(i).IsInitialized()) return false;
  }
  return true;
}

void EdgeProto::Swap(EdgeProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(num_output_, other->num_output_);
    param_.Swap(&other->param_);
    std::swap(directed_, other->directed_);
    std::swap(top_, other->top_);
    std::swap(bottom_, other->bottom_);
    std::swap(kernel_size_, other->kernel_size_);
    std::swap(stride_, other->stride_);
    std::swap(pad_, other->pad_);
    std::swap(num_groups_, other->num_groups_);
    std::swap(alpha_, other->alpha_);
    std::swap(beta_, other->beta_);
    std::swap(knorm_, other->knorm_);
    std::swap(local_size_, other->local_size_);
    std::swap(pooling_method_, other->pooling_method_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EdgeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EdgeProto_descriptor_;
  metadata.reflection = EdgeProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MeanProto::kNumFieldNumber;
const int MeanProto::kChannelsFieldNumber;
const int MeanProto::kHeightFieldNumber;
const int MeanProto::kWidthFieldNumber;
const int MeanProto::kDataFieldNumber;
const int MeanProto::kDiffFieldNumber;
#endif  // !_MSC_VER

MeanProto::MeanProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MeanProto::InitAsDefaultInstance() {
}

MeanProto::MeanProto(const MeanProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MeanProto::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  channels_ = 0;
  height_ = 0;
  width_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MeanProto::~MeanProto() {
  SharedDtor();
}

void MeanProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MeanProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeanProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeanProto_descriptor_;
}

const MeanProto& MeanProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

MeanProto* MeanProto::default_instance_ = NULL;

MeanProto* MeanProto::New() const {
  return new MeanProto;
}

void MeanProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    channels_ = 0;
    height_ = 0;
    width_ = 0;
  }
  data_.Clear();
  diff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MeanProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channels;
        break;
      }

      // optional int32 channels = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional int32 height = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional int32 width = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // repeated float data = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42, input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_diff;
        break;
      }

      // repeated float diff = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_diff())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50, input, this->mutable_diff())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MeanProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1 [default = 0];
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 channels = 2 [default = 0];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channels(), output);
  }

  // optional int32 height = 3 [default = 0];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional int32 width = 4 [default = 0];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // repeated float data = 5 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->data(i), output);
  }

  // repeated float diff = 6 [packed = true];
  if (this->diff_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_diff_cached_byte_size_);
  }
  for (int i = 0; i < this->diff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->diff(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MeanProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1 [default = 0];
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 channels = 2 [default = 0];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channels(), target);
  }

  // optional int32 height = 3 [default = 0];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional int32 width = 4 [default = 0];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // repeated float data = 5 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data(i), target);
  }

  // repeated float diff = 6 [packed = true];
  if (this->diff_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _diff_cached_byte_size_, target);
  }
  for (int i = 0; i < this->diff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->diff(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MeanProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 channels = 2 [default = 0];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 3 [default = 0];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 4 [default = 0];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  // repeated float data = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float diff = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->diff_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _diff_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeanProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MeanProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MeanProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MeanProto::MergeFrom(const MeanProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  diff_.MergeFrom(from.diff_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MeanProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeanProto::CopyFrom(const MeanProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeanProto::IsInitialized() const {

  return true;
}

void MeanProto::Swap(MeanProto* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(channels_, other->channels_);
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    data_.Swap(&other->data_);
    diff_.Swap(&other->diff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MeanProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeanProto_descriptor_;
  metadata.reflection = MeanProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LayerProto::kNameFieldNumber;
const int LayerProto::kTypeFieldNumber;
const int LayerProto::kDataSourceFieldNumber;
const int LayerProto::kDropProbFieldNumber;
const int LayerProto::kCropsizeFieldNumber;
const int LayerProto::kMirrorFieldNumber;
#endif  // !_MSC_VER

LayerProto::LayerProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LayerProto::InitAsDefaultInstance() {
}

LayerProto::LayerProto(const LayerProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LayerProto::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  drop_prob_ = 0;
  cropsize_ = 0;
  mirror_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerProto::~LayerProto() {
  SharedDtor();
}

void LayerProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (data_source_ != &::google::protobuf::internal::kEmptyString) {
    delete data_source_;
  }
  if (this != default_instance_) {
  }
}

void LayerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerProto_descriptor_;
}

const LayerProto& LayerProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

LayerProto* LayerProto::default_instance_ = NULL;

LayerProto* LayerProto::New() const {
  return new LayerProto;
}

void LayerProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_data_source()) {
      if (data_source_ != &::google::protobuf::internal::kEmptyString) {
        data_source_->clear();
      }
    }
    drop_prob_ = 0;
    cropsize_ = 0;
    mirror_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LayerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // required string type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_data_source;
        break;
      }

      // optional string data_source = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_source().data(), this->data_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_drop_prob;
        break;
      }

      // optional float drop_prob = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_drop_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &drop_prob_)));
          set_has_drop_prob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cropsize;
        break;
      }

      // optional int32 cropsize = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cropsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cropsize_)));
          set_has_cropsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_mirror;
        break;
      }

      // optional bool mirror = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mirror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
          set_has_mirror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LayerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }

  // optional string data_source = 7;
  if (has_data_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_source().data(), this->data_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->data_source(), output);
  }

  // optional float drop_prob = 8 [default = 0];
  if (has_drop_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->drop_prob(), output);
  }

  // optional int32 cropsize = 9;
  if (has_cropsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cropsize(), output);
  }

  // optional bool mirror = 10;
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->mirror(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LayerProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // optional string data_source = 7;
  if (has_data_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_source().data(), this->data_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->data_source(), target);
  }

  // optional float drop_prob = 8 [default = 0];
  if (has_drop_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->drop_prob(), target);
  }

  // optional int32 cropsize = 9;
  if (has_cropsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cropsize(), target);
  }

  // optional bool mirror = 10;
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->mirror(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LayerProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string data_source = 7;
    if (has_data_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_source());
    }

    // optional float drop_prob = 8 [default = 0];
    if (has_drop_prob()) {
      total_size += 1 + 4;
    }

    // optional int32 cropsize = 9;
    if (has_cropsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cropsize());
    }

    // optional bool mirror = 10;
    if (has_mirror()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LayerProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LayerProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LayerProto::MergeFrom(const LayerProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data_source()) {
      set_data_source(from.data_source());
    }
    if (from.has_drop_prob()) {
      set_drop_prob(from.drop_prob());
    }
    if (from.has_cropsize()) {
      set_cropsize(from.cropsize());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LayerProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerProto::CopyFrom(const LayerProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LayerProto::Swap(LayerProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(data_source_, other->data_source_);
    std::swap(drop_prob_, other->drop_prob_);
    std::swap(cropsize_, other->cropsize_);
    std::swap(mirror_, other->mirror_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LayerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayerProto_descriptor_;
  metadata.reflection = LayerProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetProto::kLayerFieldNumber;
const int NetProto::kEdgeFieldNumber;
#endif  // !_MSC_VER

NetProto::NetProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto::InitAsDefaultInstance() {
}

NetProto::NetProto(const NetProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto::~NetProto() {
  SharedDtor();
}

void NetProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_descriptor_;
}

const NetProto& NetProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

NetProto* NetProto::default_instance_ = NULL;

NetProto* NetProto::New() const {
  return new NetProto;
}

void NetProto::Clear() {
  layer_.Clear();
  edge_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lapis.LayerProto layer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_layer;
        if (input->ExpectTag(34)) goto parse_edge;
        break;
      }

      // repeated .lapis.EdgeProto edge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_edge;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lapis.LayerProto layer = 3;
  for (int i = 0; i < this->layer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->layer(i), output);
  }

  // repeated .lapis.EdgeProto edge = 4;
  for (int i = 0; i < this->edge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->edge(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lapis.LayerProto layer = 3;
  for (int i = 0; i < this->layer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->layer(i), target);
  }

  // repeated .lapis.EdgeProto edge = 4;
  for (int i = 0; i < this->edge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->edge(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto::ByteSize() const {
  int total_size = 0;

  // repeated .lapis.LayerProto layer = 3;
  total_size += 1 * this->layer_size();
  for (int i = 0; i < this->layer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layer(i));
  }

  // repeated .lapis.EdgeProto edge = 4;
  total_size += 1 * this->edge_size();
  for (int i = 0; i < this->edge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edge(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto::MergeFrom(const NetProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  layer_.MergeFrom(from.layer_);
  edge_.MergeFrom(from.edge_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto::CopyFrom(const NetProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto::IsInitialized() const {

  for (int i = 0; i < layer_size(); i++) {
    if (!this->layer(i).IsInitialized()) return false;
  }
  for (int i = 0; i < edge_size(); i++) {
    if (!this->edge(i).IsInitialized()) return false;
  }
  return true;
}

void NetProto::Swap(NetProto* other) {
  if (other != this) {
    layer_.Swap(&other->layer_);
    edge_.Swap(&other->edge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_descriptor_;
  metadata.reflection = NetProto_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SGDProto_ChangeProto_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SGDProto_ChangeProto_descriptor_;
}
bool SGDProto_ChangeProto_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SGDProto_ChangeProto SGDProto::kFixed;
const SGDProto_ChangeProto SGDProto::kInverse_t;
const SGDProto_ChangeProto SGDProto::kExponential;
const SGDProto_ChangeProto SGDProto::kLinear;
const SGDProto_ChangeProto SGDProto::kStep;
const SGDProto_ChangeProto SGDProto::ChangeProto_MIN;
const SGDProto_ChangeProto SGDProto::ChangeProto_MAX;
const int SGDProto::ChangeProto_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SGDProto::kBaseLearningRateFieldNumber;
const int SGDProto::kBaseMomentumFieldNumber;
const int SGDProto::kBaseWeightDecayFieldNumber;
const int SGDProto::kMomentumXFieldNumber;
const int SGDProto::kLearningRateXFieldNumber;
const int SGDProto::kWeightDecayXFieldNumber;
const int SGDProto::kLearningRateChangeStepsFieldNumber;
const int SGDProto::kMomentumChangeStepsFieldNumber;
const int SGDProto::kWeightDecayChangeStepsFieldNumber;
const int SGDProto::kLearningRateChangeFieldNumber;
const int SGDProto::kWeightDecayChangeFieldNumber;
const int SGDProto::kMomentumChangeFieldNumber;
const int SGDProto::kTotalStepsFieldNumber;
const int SGDProto::kTrainBatchsizeFieldNumber;
const int SGDProto::kValidationBatchsizeFieldNumber;
const int SGDProto::kTestBatchsizeFieldNumber;
#endif  // !_MSC_VER

SGDProto::SGDProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SGDProto::InitAsDefaultInstance() {
}

SGDProto::SGDProto(const SGDProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SGDProto::SharedCtor() {
  _cached_size_ = 0;
  base_learning_rate_ = 0;
  base_momentum_ = 0;
  base_weight_decay_ = 0;
  momentum_x_ = 0;
  learning_rate_x_ = 0;
  weight_decay_x_ = 0;
  learning_rate_change_steps_ = 0;
  momentum_change_steps_ = 0;
  weight_decay_change_steps_ = 0;
  learning_rate_change_ = 1;
  weight_decay_change_ = 0;
  momentum_change_ = 0;
  total_steps_ = 0;
  train_batchsize_ = 0;
  validation_batchsize_ = 0;
  test_batchsize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGDProto::~SGDProto() {
  SharedDtor();
}

void SGDProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SGDProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SGDProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SGDProto_descriptor_;
}

const SGDProto& SGDProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

SGDProto* SGDProto::default_instance_ = NULL;

SGDProto* SGDProto::New() const {
  return new SGDProto;
}

void SGDProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    base_learning_rate_ = 0;
    base_momentum_ = 0;
    base_weight_decay_ = 0;
    momentum_x_ = 0;
    learning_rate_x_ = 0;
    weight_decay_x_ = 0;
    learning_rate_change_steps_ = 0;
    momentum_change_steps_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    weight_decay_change_steps_ = 0;
    learning_rate_change_ = 1;
    weight_decay_change_ = 0;
    momentum_change_ = 0;
    total_steps_ = 0;
    train_batchsize_ = 0;
    validation_batchsize_ = 0;
    test_batchsize_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SGDProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float base_learning_rate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_learning_rate_)));
          set_has_base_learning_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_base_momentum;
        break;
      }

      // optional float base_momentum = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_base_momentum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_momentum_)));
          set_has_base_momentum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_base_weight_decay;
        break;
      }

      // optional float base_weight_decay = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_base_weight_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_weight_decay_)));
          set_has_base_weight_decay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_momentum_x;
        break;
      }

      // optional float momentum_x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_momentum_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_x_)));
          set_has_momentum_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_learning_rate_x;
        break;
      }

      // optional float learning_rate_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_learning_rate_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_x_)));
          set_has_learning_rate_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_weight_decay_x;
        break;
      }

      // optional float weight_decay_x = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight_decay_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_decay_x_)));
          set_has_weight_decay_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_learning_rate_change_steps;
        break;
      }

      // optional int32 learning_rate_change_steps = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_learning_rate_change_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &learning_rate_change_steps_)));
          set_has_learning_rate_change_steps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_momentum_change_steps;
        break;
      }

      // optional int32 momentum_change_steps = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_momentum_change_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &momentum_change_steps_)));
          set_has_momentum_change_steps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_weight_decay_change_steps;
        break;
      }

      // optional int32 weight_decay_change_steps = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight_decay_change_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_decay_change_steps_)));
          set_has_weight_decay_change_steps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_learning_rate_change;
        break;
      }

      // optional .lapis.SGDProto.ChangeProto learning_rate_change = 10 [default = kInverse_t];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_learning_rate_change:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lapis::SGDProto_ChangeProto_IsValid(value)) {
            set_learning_rate_change(static_cast< ::lapis::SGDProto_ChangeProto >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_weight_decay_change;
        break;
      }

      // optional .lapis.SGDProto.ChangeProto weight_decay_change = 11 [default = kFixed];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight_decay_change:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lapis::SGDProto_ChangeProto_IsValid(value)) {
            set_weight_decay_change(static_cast< ::lapis::SGDProto_ChangeProto >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_momentum_change;
        break;
      }

      // optional .lapis.SGDProto.ChangeProto momentum_change = 12 [default = kFixed];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_momentum_change:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lapis::SGDProto_ChangeProto_IsValid(value)) {
            set_momentum_change(static_cast< ::lapis::SGDProto_ChangeProto >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_total_steps;
        break;
      }

      // optional int32 total_steps = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_steps_)));
          set_has_total_steps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_train_batchsize;
        break;
      }

      // optional int32 train_batchsize = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_batchsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_batchsize_)));
          set_has_train_batchsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_validation_batchsize;
        break;
      }

      // optional int32 validation_batchsize = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validation_batchsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validation_batchsize_)));
          set_has_validation_batchsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_test_batchsize;
        break;
      }

      // optional int32 test_batchsize = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_test_batchsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_batchsize_)));
          set_has_test_batchsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SGDProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float base_learning_rate = 1;
  if (has_base_learning_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->base_learning_rate(), output);
  }

  // optional float base_momentum = 2 [default = 0];
  if (has_base_momentum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->base_momentum(), output);
  }

  // optional float base_weight_decay = 3 [default = 0];
  if (has_base_weight_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->base_weight_decay(), output);
  }

  // optional float momentum_x = 4;
  if (has_momentum_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->momentum_x(), output);
  }

  // optional float learning_rate_x = 5;
  if (has_learning_rate_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->learning_rate_x(), output);
  }

  // optional float weight_decay_x = 6;
  if (has_weight_decay_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->weight_decay_x(), output);
  }

  // optional int32 learning_rate_change_steps = 7;
  if (has_learning_rate_change_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->learning_rate_change_steps(), output);
  }

  // optional int32 momentum_change_steps = 8;
  if (has_momentum_change_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->momentum_change_steps(), output);
  }

  // optional int32 weight_decay_change_steps = 9;
  if (has_weight_decay_change_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->weight_decay_change_steps(), output);
  }

  // optional .lapis.SGDProto.ChangeProto learning_rate_change = 10 [default = kInverse_t];
  if (has_learning_rate_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->learning_rate_change(), output);
  }

  // optional .lapis.SGDProto.ChangeProto weight_decay_change = 11 [default = kFixed];
  if (has_weight_decay_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->weight_decay_change(), output);
  }

  // optional .lapis.SGDProto.ChangeProto momentum_change = 12 [default = kFixed];
  if (has_momentum_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->momentum_change(), output);
  }

  // optional int32 total_steps = 13;
  if (has_total_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->total_steps(), output);
  }

  // optional int32 train_batchsize = 14;
  if (has_train_batchsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->train_batchsize(), output);
  }

  // optional int32 validation_batchsize = 15;
  if (has_validation_batchsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->validation_batchsize(), output);
  }

  // optional int32 test_batchsize = 16;
  if (has_test_batchsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->test_batchsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SGDProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float base_learning_rate = 1;
  if (has_base_learning_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->base_learning_rate(), target);
  }

  // optional float base_momentum = 2 [default = 0];
  if (has_base_momentum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->base_momentum(), target);
  }

  // optional float base_weight_decay = 3 [default = 0];
  if (has_base_weight_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->base_weight_decay(), target);
  }

  // optional float momentum_x = 4;
  if (has_momentum_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->momentum_x(), target);
  }

  // optional float learning_rate_x = 5;
  if (has_learning_rate_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->learning_rate_x(), target);
  }

  // optional float weight_decay_x = 6;
  if (has_weight_decay_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->weight_decay_x(), target);
  }

  // optional int32 learning_rate_change_steps = 7;
  if (has_learning_rate_change_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->learning_rate_change_steps(), target);
  }

  // optional int32 momentum_change_steps = 8;
  if (has_momentum_change_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->momentum_change_steps(), target);
  }

  // optional int32 weight_decay_change_steps = 9;
  if (has_weight_decay_change_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->weight_decay_change_steps(), target);
  }

  // optional .lapis.SGDProto.ChangeProto learning_rate_change = 10 [default = kInverse_t];
  if (has_learning_rate_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->learning_rate_change(), target);
  }

  // optional .lapis.SGDProto.ChangeProto weight_decay_change = 11 [default = kFixed];
  if (has_weight_decay_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->weight_decay_change(), target);
  }

  // optional .lapis.SGDProto.ChangeProto momentum_change = 12 [default = kFixed];
  if (has_momentum_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->momentum_change(), target);
  }

  // optional int32 total_steps = 13;
  if (has_total_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->total_steps(), target);
  }

  // optional int32 train_batchsize = 14;
  if (has_train_batchsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->train_batchsize(), target);
  }

  // optional int32 validation_batchsize = 15;
  if (has_validation_batchsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->validation_batchsize(), target);
  }

  // optional int32 test_batchsize = 16;
  if (has_test_batchsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->test_batchsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SGDProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float base_learning_rate = 1;
    if (has_base_learning_rate()) {
      total_size += 1 + 4;
    }

    // optional float base_momentum = 2 [default = 0];
    if (has_base_momentum()) {
      total_size += 1 + 4;
    }

    // optional float base_weight_decay = 3 [default = 0];
    if (has_base_weight_decay()) {
      total_size += 1 + 4;
    }

    // optional float momentum_x = 4;
    if (has_momentum_x()) {
      total_size += 1 + 4;
    }

    // optional float learning_rate_x = 5;
    if (has_learning_rate_x()) {
      total_size += 1 + 4;
    }

    // optional float weight_decay_x = 6;
    if (has_weight_decay_x()) {
      total_size += 1 + 4;
    }

    // optional int32 learning_rate_change_steps = 7;
    if (has_learning_rate_change_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->learning_rate_change_steps());
    }

    // optional int32 momentum_change_steps = 8;
    if (has_momentum_change_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->momentum_change_steps());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 weight_decay_change_steps = 9;
    if (has_weight_decay_change_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weight_decay_change_steps());
    }

    // optional .lapis.SGDProto.ChangeProto learning_rate_change = 10 [default = kInverse_t];
    if (has_learning_rate_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->learning_rate_change());
    }

    // optional .lapis.SGDProto.ChangeProto weight_decay_change = 11 [default = kFixed];
    if (has_weight_decay_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->weight_decay_change());
    }

    // optional .lapis.SGDProto.ChangeProto momentum_change = 12 [default = kFixed];
    if (has_momentum_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->momentum_change());
    }

    // optional int32 total_steps = 13;
    if (has_total_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_steps());
    }

    // optional int32 train_batchsize = 14;
    if (has_train_batchsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train_batchsize());
    }

    // optional int32 validation_batchsize = 15;
    if (has_validation_batchsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validation_batchsize());
    }

    // optional int32 test_batchsize = 16;
    if (has_test_batchsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_batchsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGDProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SGDProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SGDProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SGDProto::MergeFrom(const SGDProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_learning_rate()) {
      set_base_learning_rate(from.base_learning_rate());
    }
    if (from.has_base_momentum()) {
      set_base_momentum(from.base_momentum());
    }
    if (from.has_base_weight_decay()) {
      set_base_weight_decay(from.base_weight_decay());
    }
    if (from.has_momentum_x()) {
      set_momentum_x(from.momentum_x());
    }
    if (from.has_learning_rate_x()) {
      set_learning_rate_x(from.learning_rate_x());
    }
    if (from.has_weight_decay_x()) {
      set_weight_decay_x(from.weight_decay_x());
    }
    if (from.has_learning_rate_change_steps()) {
      set_learning_rate_change_steps(from.learning_rate_change_steps());
    }
    if (from.has_momentum_change_steps()) {
      set_momentum_change_steps(from.momentum_change_steps());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_weight_decay_change_steps()) {
      set_weight_decay_change_steps(from.weight_decay_change_steps());
    }
    if (from.has_learning_rate_change()) {
      set_learning_rate_change(from.learning_rate_change());
    }
    if (from.has_weight_decay_change()) {
      set_weight_decay_change(from.weight_decay_change());
    }
    if (from.has_momentum_change()) {
      set_momentum_change(from.momentum_change());
    }
    if (from.has_total_steps()) {
      set_total_steps(from.total_steps());
    }
    if (from.has_train_batchsize()) {
      set_train_batchsize(from.train_batchsize());
    }
    if (from.has_validation_batchsize()) {
      set_validation_batchsize(from.validation_batchsize());
    }
    if (from.has_test_batchsize()) {
      set_test_batchsize(from.test_batchsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SGDProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGDProto::CopyFrom(const SGDProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGDProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SGDProto::Swap(SGDProto* other) {
  if (other != this) {
    std::swap(base_learning_rate_, other->base_learning_rate_);
    std::swap(base_momentum_, other->base_momentum_);
    std::swap(base_weight_decay_, other->base_weight_decay_);
    std::swap(momentum_x_, other->momentum_x_);
    std::swap(learning_rate_x_, other->learning_rate_x_);
    std::swap(weight_decay_x_, other->weight_decay_x_);
    std::swap(learning_rate_change_steps_, other->learning_rate_change_steps_);
    std::swap(momentum_change_steps_, other->momentum_change_steps_);
    std::swap(weight_decay_change_steps_, other->weight_decay_change_steps_);
    std::swap(learning_rate_change_, other->learning_rate_change_);
    std::swap(weight_decay_change_, other->weight_decay_change_);
    std::swap(momentum_change_, other->momentum_change_);
    std::swap(total_steps_, other->total_steps_);
    std::swap(train_batchsize_, other->train_batchsize_);
    std::swap(validation_batchsize_, other->validation_batchsize_);
    std::swap(test_batchsize_, other->test_batchsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SGDProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SGDProto_descriptor_;
  metadata.reflection = SGDProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Performance::kLossFieldNumber;
const int Performance::kPrecisionFieldNumber;
const int Performance::kRecallFieldNumber;
const int Performance::kMapFieldNumber;
const int Performance::kPrecision50FieldNumber;
const int Performance::kStepFieldNumber;
const int Performance::kPrefixFieldNumber;
#endif  // !_MSC_VER

Performance::Performance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Performance::InitAsDefaultInstance() {
}

Performance::Performance(const Performance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Performance::SharedCtor() {
  _cached_size_ = 0;
  loss_ = 0;
  precision_ = 0;
  recall_ = 0;
  map_ = 0;
  precision50_ = 0;
  step_ = 0;
  prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Performance::~Performance() {
  SharedDtor();
}

void Performance::SharedDtor() {
  if (prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete prefix_;
  }
  if (this != default_instance_) {
  }
}

void Performance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Performance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Performance_descriptor_;
}

const Performance& Performance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

Performance* Performance::default_instance_ = NULL;

Performance* Performance::New() const {
  return new Performance;
}

void Performance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    loss_ = 0;
    precision_ = 0;
    recall_ = 0;
    map_ = 0;
    precision50_ = 0;
    step_ = 0;
    if (has_prefix()) {
      if (prefix_ != &::google::protobuf::internal::kEmptyString) {
        prefix_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Performance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float loss = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &loss_)));
          set_has_loss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_precision;
        break;
      }

      // optional float precision = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_recall;
        break;
      }

      // optional float recall = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_recall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &recall_)));
          set_has_recall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_map;
        break;
      }

      // optional float map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &map_)));
          set_has_map();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_precision50;
        break;
      }

      // optional float precision50 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_precision50:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &precision50_)));
          set_has_precision50();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_step;
        break;
      }

      // optional int32 step = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_prefix;
        break;
      }

      // optional string prefix = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Performance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float loss = 1;
  if (has_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->loss(), output);
  }

  // optional float precision = 2;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->precision(), output);
  }

  // optional float recall = 3;
  if (has_recall()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->recall(), output);
  }

  // optional float map = 4;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->map(), output);
  }

  // optional float precision50 = 5;
  if (has_precision50()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->precision50(), output);
  }

  // optional int32 step = 6;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->step(), output);
  }

  // optional string prefix = 7;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->prefix(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Performance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float loss = 1;
  if (has_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->loss(), target);
  }

  // optional float precision = 2;
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->precision(), target);
  }

  // optional float recall = 3;
  if (has_recall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->recall(), target);
  }

  // optional float map = 4;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->map(), target);
  }

  // optional float precision50 = 5;
  if (has_precision50()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->precision50(), target);
  }

  // optional int32 step = 6;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->step(), target);
  }

  // optional string prefix = 7;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->prefix(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Performance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float loss = 1;
    if (has_loss()) {
      total_size += 1 + 4;
    }

    // optional float precision = 2;
    if (has_precision()) {
      total_size += 1 + 4;
    }

    // optional float recall = 3;
    if (has_recall()) {
      total_size += 1 + 4;
    }

    // optional float map = 4;
    if (has_map()) {
      total_size += 1 + 4;
    }

    // optional float precision50 = 5;
    if (has_precision50()) {
      total_size += 1 + 4;
    }

    // optional int32 step = 6;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

    // optional string prefix = 7;
    if (has_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Performance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Performance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Performance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Performance::MergeFrom(const Performance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loss()) {
      set_loss(from.loss());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_recall()) {
      set_recall(from.recall());
    }
    if (from.has_map()) {
      set_map(from.map());
    }
    if (from.has_precision50()) {
      set_precision50(from.precision50());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_prefix()) {
      set_prefix(from.prefix());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Performance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Performance::CopyFrom(const Performance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Performance::IsInitialized() const {

  return true;
}

void Performance::Swap(Performance* other) {
  if (other != this) {
    std::swap(loss_, other->loss_);
    std::swap(precision_, other->precision_);
    std::swap(recall_, other->recall_);
    std::swap(map_, other->map_);
    std::swap(precision50_, other->precision50_);
    std::swap(step_, other->step_);
    std::swap(prefix_, other->prefix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Performance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Performance_descriptor_;
  metadata.reflection = Performance_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TrainerProto_Algorithm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrainerProto_Algorithm_descriptor_;
}
bool TrainerProto_Algorithm_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TrainerProto_Algorithm TrainerProto::kBackPropagation;
const TrainerProto_Algorithm TrainerProto::kContrastiveDivergence;
const TrainerProto_Algorithm TrainerProto::Algorithm_MIN;
const TrainerProto_Algorithm TrainerProto::Algorithm_MAX;
const int TrainerProto::Algorithm_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* TrainerProto::_default_checkpoint_prefix_ = NULL;
::std::string* TrainerProto::_default_display_prefix_ = NULL;
::std::string* TrainerProto::_default_perf_prefix_ = NULL;
#ifndef _MSC_VER
const int TrainerProto::kSgdFieldNumber;
const int TrainerProto::kCheckpointAfterStepsFieldNumber;
const int TrainerProto::kCheckpointEveryStepsFieldNumber;
const int TrainerProto::kCheckpointPrefixFieldNumber;
const int TrainerProto::kCheckpointStepFieldNumber;
const int TrainerProto::kDisplayAfterStepsFieldNumber;
const int TrainerProto::kDisplayEveryStepsFieldNumber;
const int TrainerProto::kDisplayPrefixFieldNumber;
const int TrainerProto::kValidateStepFieldNumber;
const int TrainerProto::kValidateAfterStepsFieldNumber;
const int TrainerProto::kValidateEveryStepsFieldNumber;
const int TrainerProto::kPerfPrefixFieldNumber;
const int TrainerProto::kAlgFieldNumber;
const int TrainerProto::kDoTrainFieldNumber;
const int TrainerProto::kDoTestFieldNumber;
#endif  // !_MSC_VER

TrainerProto::TrainerProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrainerProto::InitAsDefaultInstance() {
  sgd_ = const_cast< ::lapis::SGDProto*>(&::lapis::SGDProto::default_instance());
}

TrainerProto::TrainerProto(const TrainerProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrainerProto::SharedCtor() {
  _cached_size_ = 0;
  sgd_ = NULL;
  checkpoint_after_steps_ = 0;
  checkpoint_every_steps_ = 0;
  checkpoint_prefix_ = const_cast< ::std::string*>(_default_checkpoint_prefix_);
  checkpoint_step_ = 0;
  display_after_steps_ = 0;
  display_every_steps_ = 0;
  display_prefix_ = const_cast< ::std::string*>(_default_display_prefix_);
  validate_step_ = 0;
  validate_after_steps_ = 0;
  validate_every_steps_ = 0;
  perf_prefix_ = const_cast< ::std::string*>(_default_perf_prefix_);
  alg_ = 1;
  do_train_ = true;
  do_test_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrainerProto::~TrainerProto() {
  SharedDtor();
}

void TrainerProto::SharedDtor() {
  if (checkpoint_prefix_ != _default_checkpoint_prefix_) {
    delete checkpoint_prefix_;
  }
  if (display_prefix_ != _default_display_prefix_) {
    delete display_prefix_;
  }
  if (perf_prefix_ != _default_perf_prefix_) {
    delete perf_prefix_;
  }
  if (this != default_instance_) {
    delete sgd_;
  }
}

void TrainerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrainerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrainerProto_descriptor_;
}

const TrainerProto& TrainerProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

TrainerProto* TrainerProto::default_instance_ = NULL;

TrainerProto* TrainerProto::New() const {
  return new TrainerProto;
}

void TrainerProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sgd()) {
      if (sgd_ != NULL) sgd_->::lapis::SGDProto::Clear();
    }
    checkpoint_after_steps_ = 0;
    checkpoint_every_steps_ = 0;
    if (has_checkpoint_prefix()) {
      if (checkpoint_prefix_ != _default_checkpoint_prefix_) {
        checkpoint_prefix_->assign(*_default_checkpoint_prefix_);
      }
    }
    checkpoint_step_ = 0;
    display_after_steps_ = 0;
    display_every_steps_ = 0;
    if (has_display_prefix()) {
      if (display_prefix_ != _default_display_prefix_) {
        display_prefix_->assign(*_default_display_prefix_);
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    validate_step_ = 0;
    validate_after_steps_ = 0;
    validate_every_steps_ = 0;
    if (has_perf_prefix()) {
      if (perf_prefix_ != _default_perf_prefix_) {
        perf_prefix_->assign(*_default_perf_prefix_);
      }
    }
    alg_ = 1;
    do_train_ = true;
    do_test_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrainerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lapis.SGDProto sgd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_checkpoint_after_steps;
        break;
      }

      // optional int32 checkpoint_after_steps = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkpoint_after_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_after_steps_)));
          set_has_checkpoint_after_steps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_checkpoint_every_steps;
        break;
      }

      // optional int32 checkpoint_every_steps = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkpoint_every_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_every_steps_)));
          set_has_checkpoint_every_steps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_checkpoint_prefix;
        break;
      }

      // optional string checkpoint_prefix = 4 [default = "tmp/checkpoint"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checkpoint_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checkpoint_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->checkpoint_prefix().data(), this->checkpoint_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_checkpoint_step;
        break;
      }

      // optional int32 checkpoint_step = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkpoint_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_step_)));
          set_has_checkpoint_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_display_after_steps;
        break;
      }

      // optional int32 display_after_steps = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_after_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_after_steps_)));
          set_has_display_after_steps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_display_every_steps;
        break;
      }

      // optional int32 display_every_steps = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_every_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_every_steps_)));
          set_has_display_every_steps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_display_prefix;
        break;
      }

      // optional string display_prefix = 8 [default = "tmp/display"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->display_prefix().data(), this->display_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_validate_step;
        break;
      }

      // optional int32 validate_step = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validate_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validate_step_)));
          set_has_validate_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_validate_after_steps;
        break;
      }

      // optional int32 validate_after_steps = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validate_after_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validate_after_steps_)));
          set_has_validate_after_steps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_validate_every_steps;
        break;
      }

      // optional int32 validate_every_steps = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validate_every_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validate_every_steps_)));
          set_has_validate_every_steps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_perf_prefix;
        break;
      }

      // optional string perf_prefix = 15 [default = "tmp/performance"];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_perf_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_perf_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->perf_prefix().data(), this->perf_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_alg;
        break;
      }

      // optional .lapis.TrainerProto.Algorithm alg = 16 [default = kBackPropagation];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alg:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lapis::TrainerProto_Algorithm_IsValid(value)) {
            set_alg(static_cast< ::lapis::TrainerProto_Algorithm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_do_train;
        break;
      }

      // optional bool do_train = 17 [default = true];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_do_train:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_train_)));
          set_has_do_train();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_do_test;
        break;
      }

      // optional bool do_test = 18 [default = false];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_do_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_test_)));
          set_has_do_test();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrainerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .lapis.SGDProto sgd = 1;
  if (has_sgd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sgd(), output);
  }

  // optional int32 checkpoint_after_steps = 2 [default = 0];
  if (has_checkpoint_after_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->checkpoint_after_steps(), output);
  }

  // optional int32 checkpoint_every_steps = 3 [default = 0];
  if (has_checkpoint_every_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->checkpoint_every_steps(), output);
  }

  // optional string checkpoint_prefix = 4 [default = "tmp/checkpoint"];
  if (has_checkpoint_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checkpoint_prefix().data(), this->checkpoint_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->checkpoint_prefix(), output);
  }

  // optional int32 checkpoint_step = 5 [default = 0];
  if (has_checkpoint_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->checkpoint_step(), output);
  }

  // optional int32 display_after_steps = 6 [default = 0];
  if (has_display_after_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->display_after_steps(), output);
  }

  // optional int32 display_every_steps = 7 [default = 0];
  if (has_display_every_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->display_every_steps(), output);
  }

  // optional string display_prefix = 8 [default = "tmp/display"];
  if (has_display_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_prefix().data(), this->display_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->display_prefix(), output);
  }

  // optional int32 validate_step = 9 [default = 0];
  if (has_validate_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->validate_step(), output);
  }

  // optional int32 validate_after_steps = 10 [default = 0];
  if (has_validate_after_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->validate_after_steps(), output);
  }

  // optional int32 validate_every_steps = 11 [default = 0];
  if (has_validate_every_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->validate_every_steps(), output);
  }

  // optional string perf_prefix = 15 [default = "tmp/performance"];
  if (has_perf_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->perf_prefix().data(), this->perf_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->perf_prefix(), output);
  }

  // optional .lapis.TrainerProto.Algorithm alg = 16 [default = kBackPropagation];
  if (has_alg()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->alg(), output);
  }

  // optional bool do_train = 17 [default = true];
  if (has_do_train()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->do_train(), output);
  }

  // optional bool do_test = 18 [default = false];
  if (has_do_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->do_test(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrainerProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .lapis.SGDProto sgd = 1;
  if (has_sgd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sgd(), target);
  }

  // optional int32 checkpoint_after_steps = 2 [default = 0];
  if (has_checkpoint_after_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->checkpoint_after_steps(), target);
  }

  // optional int32 checkpoint_every_steps = 3 [default = 0];
  if (has_checkpoint_every_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->checkpoint_every_steps(), target);
  }

  // optional string checkpoint_prefix = 4 [default = "tmp/checkpoint"];
  if (has_checkpoint_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checkpoint_prefix().data(), this->checkpoint_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->checkpoint_prefix(), target);
  }

  // optional int32 checkpoint_step = 5 [default = 0];
  if (has_checkpoint_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->checkpoint_step(), target);
  }

  // optional int32 display_after_steps = 6 [default = 0];
  if (has_display_after_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->display_after_steps(), target);
  }

  // optional int32 display_every_steps = 7 [default = 0];
  if (has_display_every_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->display_every_steps(), target);
  }

  // optional string display_prefix = 8 [default = "tmp/display"];
  if (has_display_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_prefix().data(), this->display_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->display_prefix(), target);
  }

  // optional int32 validate_step = 9 [default = 0];
  if (has_validate_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->validate_step(), target);
  }

  // optional int32 validate_after_steps = 10 [default = 0];
  if (has_validate_after_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->validate_after_steps(), target);
  }

  // optional int32 validate_every_steps = 11 [default = 0];
  if (has_validate_every_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->validate_every_steps(), target);
  }

  // optional string perf_prefix = 15 [default = "tmp/performance"];
  if (has_perf_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->perf_prefix().data(), this->perf_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->perf_prefix(), target);
  }

  // optional .lapis.TrainerProto.Algorithm alg = 16 [default = kBackPropagation];
  if (has_alg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->alg(), target);
  }

  // optional bool do_train = 17 [default = true];
  if (has_do_train()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->do_train(), target);
  }

  // optional bool do_test = 18 [default = false];
  if (has_do_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->do_test(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrainerProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .lapis.SGDProto sgd = 1;
    if (has_sgd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sgd());
    }

    // optional int32 checkpoint_after_steps = 2 [default = 0];
    if (has_checkpoint_after_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkpoint_after_steps());
    }

    // optional int32 checkpoint_every_steps = 3 [default = 0];
    if (has_checkpoint_every_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkpoint_every_steps());
    }

    // optional string checkpoint_prefix = 4 [default = "tmp/checkpoint"];
    if (has_checkpoint_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checkpoint_prefix());
    }

    // optional int32 checkpoint_step = 5 [default = 0];
    if (has_checkpoint_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkpoint_step());
    }

    // optional int32 display_after_steps = 6 [default = 0];
    if (has_display_after_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display_after_steps());
    }

    // optional int32 display_every_steps = 7 [default = 0];
    if (has_display_every_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display_every_steps());
    }

    // optional string display_prefix = 8 [default = "tmp/display"];
    if (has_display_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_prefix());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 validate_step = 9 [default = 0];
    if (has_validate_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validate_step());
    }

    // optional int32 validate_after_steps = 10 [default = 0];
    if (has_validate_after_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validate_after_steps());
    }

    // optional int32 validate_every_steps = 11 [default = 0];
    if (has_validate_every_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validate_every_steps());
    }

    // optional string perf_prefix = 15 [default = "tmp/performance"];
    if (has_perf_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->perf_prefix());
    }

    // optional .lapis.TrainerProto.Algorithm alg = 16 [default = kBackPropagation];
    if (has_alg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->alg());
    }

    // optional bool do_train = 17 [default = true];
    if (has_do_train()) {
      total_size += 2 + 1;
    }

    // optional bool do_test = 18 [default = false];
    if (has_do_test()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrainerProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrainerProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrainerProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrainerProto::MergeFrom(const TrainerProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sgd()) {
      mutable_sgd()->::lapis::SGDProto::MergeFrom(from.sgd());
    }
    if (from.has_checkpoint_after_steps()) {
      set_checkpoint_after_steps(from.checkpoint_after_steps());
    }
    if (from.has_checkpoint_every_steps()) {
      set_checkpoint_every_steps(from.checkpoint_every_steps());
    }
    if (from.has_checkpoint_prefix()) {
      set_checkpoint_prefix(from.checkpoint_prefix());
    }
    if (from.has_checkpoint_step()) {
      set_checkpoint_step(from.checkpoint_step());
    }
    if (from.has_display_after_steps()) {
      set_display_after_steps(from.display_after_steps());
    }
    if (from.has_display_every_steps()) {
      set_display_every_steps(from.display_every_steps());
    }
    if (from.has_display_prefix()) {
      set_display_prefix(from.display_prefix());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_validate_step()) {
      set_validate_step(from.validate_step());
    }
    if (from.has_validate_after_steps()) {
      set_validate_after_steps(from.validate_after_steps());
    }
    if (from.has_validate_every_steps()) {
      set_validate_every_steps(from.validate_every_steps());
    }
    if (from.has_perf_prefix()) {
      set_perf_prefix(from.perf_prefix());
    }
    if (from.has_alg()) {
      set_alg(from.alg());
    }
    if (from.has_do_train()) {
      set_do_train(from.do_train());
    }
    if (from.has_do_test()) {
      set_do_test(from.do_test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrainerProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainerProto::CopyFrom(const TrainerProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainerProto::IsInitialized() const {

  if (has_sgd()) {
    if (!this->sgd().IsInitialized()) return false;
  }
  return true;
}

void TrainerProto::Swap(TrainerProto* other) {
  if (other != this) {
    std::swap(sgd_, other->sgd_);
    std::swap(checkpoint_after_steps_, other->checkpoint_after_steps_);
    std::swap(checkpoint_every_steps_, other->checkpoint_every_steps_);
    std::swap(checkpoint_prefix_, other->checkpoint_prefix_);
    std::swap(checkpoint_step_, other->checkpoint_step_);
    std::swap(display_after_steps_, other->display_after_steps_);
    std::swap(display_every_steps_, other->display_every_steps_);
    std::swap(display_prefix_, other->display_prefix_);
    std::swap(validate_step_, other->validate_step_);
    std::swap(validate_after_steps_, other->validate_after_steps_);
    std::swap(validate_every_steps_, other->validate_every_steps_);
    std::swap(perf_prefix_, other->perf_prefix_);
    std::swap(alg_, other->alg_);
    std::swap(do_train_, other->do_train_);
    std::swap(do_test_, other->do_test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrainerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrainerProto_descriptor_;
  metadata.reflection = TrainerProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataProto::kTrainDataFieldNumber;
const int DataProto::kValidationDataFieldNumber;
const int DataProto::kTestDataFieldNumber;
#endif  // !_MSC_VER

DataProto::DataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataProto::InitAsDefaultInstance() {
}

DataProto::DataProto(const DataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataProto::~DataProto() {
  SharedDtor();
}

void DataProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataProto_descriptor_;
}

const DataProto& DataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

DataProto* DataProto::default_instance_ = NULL;

DataProto* DataProto::New() const {
  return new DataProto;
}

void DataProto::Clear() {
  train_data_.Clear();
  validation_data_.Clear();
  test_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lapis.DataSourceProto train_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_train_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_train_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_train_data;
        if (input->ExpectTag(18)) goto parse_validation_data;
        break;
      }

      // repeated .lapis.DataSourceProto validation_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_validation_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_validation_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_validation_data;
        if (input->ExpectTag(26)) goto parse_test_data;
        break;
      }

      // repeated .lapis.DataSourceProto test_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_test_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lapis.DataSourceProto train_data = 1;
  for (int i = 0; i < this->train_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->train_data(i), output);
  }

  // repeated .lapis.DataSourceProto validation_data = 2;
  for (int i = 0; i < this->validation_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->validation_data(i), output);
  }

  // repeated .lapis.DataSourceProto test_data = 3;
  for (int i = 0; i < this->test_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->test_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lapis.DataSourceProto train_data = 1;
  for (int i = 0; i < this->train_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->train_data(i), target);
  }

  // repeated .lapis.DataSourceProto validation_data = 2;
  for (int i = 0; i < this->validation_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->validation_data(i), target);
  }

  // repeated .lapis.DataSourceProto test_data = 3;
  for (int i = 0; i < this->test_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->test_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataProto::ByteSize() const {
  int total_size = 0;

  // repeated .lapis.DataSourceProto train_data = 1;
  total_size += 1 * this->train_data_size();
  for (int i = 0; i < this->train_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->train_data(i));
  }

  // repeated .lapis.DataSourceProto validation_data = 2;
  total_size += 1 * this->validation_data_size();
  for (int i = 0; i < this->validation_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->validation_data(i));
  }

  // repeated .lapis.DataSourceProto test_data = 3;
  total_size += 1 * this->test_data_size();
  for (int i = 0; i < this->test_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->test_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataProto::MergeFrom(const DataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  train_data_.MergeFrom(from.train_data_);
  validation_data_.MergeFrom(from.validation_data_);
  test_data_.MergeFrom(from.test_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataProto::CopyFrom(const DataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataProto::IsInitialized() const {

  for (int i = 0; i < train_data_size(); i++) {
    if (!this->train_data(i).IsInitialized()) return false;
  }
  for (int i = 0; i < validation_data_size(); i++) {
    if (!this->validation_data(i).IsInitialized()) return false;
  }
  for (int i = 0; i < test_data_size(); i++) {
    if (!this->test_data(i).IsInitialized()) return false;
  }
  return true;
}

void DataProto::Swap(DataProto* other) {
  if (other != this) {
    train_data_.Swap(&other->train_data_);
    validation_data_.Swap(&other->validation_data_);
    test_data_.Swap(&other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataProto_descriptor_;
  metadata.reflection = DataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModelProto::kNameFieldNumber;
const int ModelProto::kNetFieldNumber;
const int ModelProto::kTrainerFieldNumber;
const int ModelProto::kDataFieldNumber;
#endif  // !_MSC_VER

ModelProto::ModelProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModelProto::InitAsDefaultInstance() {
  net_ = const_cast< ::lapis::NetProto*>(&::lapis::NetProto::default_instance());
  trainer_ = const_cast< ::lapis::TrainerProto*>(&::lapis::TrainerProto::default_instance());
  data_ = const_cast< ::lapis::DataProto*>(&::lapis::DataProto::default_instance());
}

ModelProto::ModelProto(const ModelProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModelProto::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  net_ = NULL;
  trainer_ = NULL;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelProto::~ModelProto() {
  SharedDtor();
}

void ModelProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete net_;
    delete trainer_;
    delete data_;
  }
}

void ModelProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelProto_descriptor_;
}

const ModelProto& ModelProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

ModelProto* ModelProto::default_instance_ = NULL;

ModelProto* ModelProto::New() const {
  return new ModelProto;
}

void ModelProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_net()) {
      if (net_ != NULL) net_->::lapis::NetProto::Clear();
    }
    if (has_trainer()) {
      if (trainer_ != NULL) trainer_->::lapis::TrainerProto::Clear();
    }
    if (has_data()) {
      if (data_ != NULL) data_->::lapis::DataProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_net;
        break;
      }

      // optional .lapis.NetProto net = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_trainer;
        break;
      }

      // optional .lapis.TrainerProto trainer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trainer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trainer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .lapis.DataProto data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModelProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .lapis.NetProto net = 2;
  if (has_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->net(), output);
  }

  // optional .lapis.TrainerProto trainer = 3;
  if (has_trainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->trainer(), output);
  }

  // optional .lapis.DataProto data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModelProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .lapis.NetProto net = 2;
  if (has_net()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->net(), target);
  }

  // optional .lapis.TrainerProto trainer = 3;
  if (has_trainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->trainer(), target);
  }

  // optional .lapis.DataProto data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModelProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .lapis.NetProto net = 2;
    if (has_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->net());
    }

    // optional .lapis.TrainerProto trainer = 3;
    if (has_trainer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trainer());
    }

    // optional .lapis.DataProto data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelProto::MergeFrom(const ModelProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_net()) {
      mutable_net()->::lapis::NetProto::MergeFrom(from.net());
    }
    if (from.has_trainer()) {
      mutable_trainer()->::lapis::TrainerProto::MergeFrom(from.trainer());
    }
    if (from.has_data()) {
      mutable_data()->::lapis::DataProto::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelProto::CopyFrom(const ModelProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelProto::IsInitialized() const {

  if (has_net()) {
    if (!this->net().IsInitialized()) return false;
  }
  if (has_trainer()) {
    if (!this->trainer().IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void ModelProto::Swap(ModelProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(net_, other->net_);
    std::swap(trainer_, other->trainer_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelProto_descriptor_;
  metadata.reflection = ModelProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FloatVector::kDataFieldNumber;
#endif  // !_MSC_VER

FloatVector::FloatVector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FloatVector::InitAsDefaultInstance() {
}

FloatVector::FloatVector(const FloatVector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FloatVector::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloatVector::~FloatVector() {
  SharedDtor();
}

void FloatVector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloatVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloatVector_descriptor_;
}

const FloatVector& FloatVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

FloatVector* FloatVector::default_instance_ = NULL;

FloatVector* FloatVector::New() const {
  return new FloatVector;
}

void FloatVector::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloatVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FloatVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FloatVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FloatVector::ByteSize() const {
  int total_size = 0;

  // repeated float data = 1;
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatVector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloatVector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloatVector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloatVector::MergeFrom(const FloatVector& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloatVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatVector::CopyFrom(const FloatVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatVector::IsInitialized() const {

  return true;
}

void FloatVector::Swap(FloatVector* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloatVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloatVector_descriptor_;
  metadata.reflection = FloatVector_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lapis

// @@protoc_insertion_point(global_scope)
