package lapis;


message DataSourceProto {
  required string name = 1;
  // e.g., RGBDirSource and LabelSource
  required string type = 2;
  // directory for RGBDirSource and file for LabelSource
  optional string image_folder = 3;
  optional string label_path = 4;
  message Shape {
    // the layer will parse the semantics of the shape
    repeated int32 s =1;
  }
  repeated Shape shape = 5;
  optional int32 size=6;
  // offset of record to be read.
  optional int32 offset =9 [default=0];
  // MeanProto file, has the mean of images, used by RGBDirSource
  optional string mean_file=10;
  optional bool shuffle=11 [default = true];
  optional bool hdfs=12 [default =true];
}

message ParamProto {
  // for the program to identify it, each edge/layer has fixed parameters
  // e.g., "weight" "bias"
  required string name = 1;
  // optional, in most situation, user do not need to config this, the program
  // will calculate it
  repeated int32 shape = 2;

  enum InitMethod {
    kConstant = 0;
    // sample gaussian with std and mean
    kGaussain = 1;
    // uniform sampling between low and high
    kUniform = 2;
    // copy the content and history which are from previous training
    kPretrained = 3;
    // from Toronto Convnet, let a=1/sqrt(fan_in), w*=a after generating from
    // Gaussian distribution
    kGaussainSqrtFanIn = 4;
    // from Toronto Convnet, rectified linear activation, let
    // a=sqrt(3)/sqrt(fan_in), range is [-a, +a]; no need to set value=sqrt(3),
    // the program will multiply it.
    kUniformSqrtFanIn = 5;
    // from Theano MLP tutorial, let a=1/sqrt(fan_in+fan_out). for tanh
    // activation, range is [-6a, +6a], for sigmoid activation, range is
    // [-24a, +24a], put the scale factor to value field.
    // <a href="http://deeplearning.net/tutorial/mlp.html"> Theano MLP</a>
    kUniformSqrtFanInOut = 6;
  }
  optional InitMethod init_method = 3 [default = kConstant];

  optional float value = 4 [default = 1.0];
  // for uniform sampling
  optional float low = 5 [default = -1];
  optional float high = 6 [default = 1];
  // for gaussian sampling
  optional float mean = 7 [default = 0];
  optional float std = 8 [default = 1];
  // optional string partitioner = 4; // e.g., row or column partition
  optional float momentum_multiplier =9 [default=1];
  optional float learning_rate_multiplier =10 [default=1];
  optional float weight_decay_multiplier =11 [default=1];
  optional int32 split_threshold=12 [default=1000000];
  optional bool partition=13 [default =false];
  // data of the parameter
  optional DAryProto data = 14;
  // history gradient of the parameter
  optional DAryProto grad = 15;
}

// Only edge have params
message LayerProto {
  required string name = 1;
  required string type = 2;

  optional int32 num_output = 3;
  repeated ParamProto param = 4;
  // for convolutional and pooling edge.
  optional int32 window_size = 8;
  optional int32 stride = 9 [default=1];
  optional int32 pad = 10 [default=0];
  optional int32 num_groups =11 [default=1];

  // for local response normalization edge
  optional float alpha = 12;
  optional float beta = 13;
  optional float knorm = 14 [default =1.0];

  // for pooling edge
  enum PoolingMethod {
    kMaxPooling=1;
    kAvgPooling=2;
  }
  optional PoolingMethod pooling_method = 16;

  // for DataLayer to process image data
  optional int32 cropsize =17;
  optional bool mirror = 18;

  optional float drop_prob = 19 [default=0.5]; // droput probability
  optional DAryProto data = 20;
  optional DAryProto grad = 21;
  optional DAryProto col_data = 22;
  optional DAryProto split_data = 23;
  optional int32 split_size = 24;
  optional int32 split_dim = 25 [default =1];
  optional int32 concat_dim = 26 [default =1];
  optional int32 topk=27;
  repeated string top=28;
  repeated string bottom=29;
}

// used to load image mean provided by caffe, in RGBDirSource
message MeanProto{
  optional int32 num =1 [default =0];
  optional int32 channels = 2 [default =0];
  optional int32 height = 3 [default =0];
  optional int32 width = 4 [default =0];
  repeated float data=5 [packed=true];
  repeated float diff=6 [packed=true];
}

message DAryProto {
  optional int32 partition_dim =1;
  repeated int32 shape = 2;
  repeated float value = 3 [packed=true];
}

message NetProto {
  repeated LayerProto layer = 2;
}

message PerformanceProto {
  optional float precision = 1;
  optional float loss = 2;
  optional int32 count =3;
  optional int32 step = 4;
}

message SolverProto {
  // we test kSGD with synchronous mode and AdaGrad in asynchronous mode
  enum Method{
    kSGD=1;
    kAdaGrad=2;
  }
  optional Method method=1 [default=kSGD];
  // start the checkpoint operation after this num steps
  optional int32 checkpoint_after_steps = 2 [default = 0];
  // frequency of checkpoint
  optional int32 checkpoint_every_steps = 3 [default = 0];
  // path prefix for the checkpoint file
  optional string checkpoint_prefix  = 4 [default = "tmp/checkpoint"];
  // the time of checkpoint
  optional int32 checkpoint_step = 5 [default = 0];

  // start display after this num steps
  optional int32 display_after_steps = 6 [default = 0];
  // frequency of display
  optional int32 display_every_steps = 7 [default = 0];
  // path prefix for the display file
  optional string display_prefix = 8 [default = "tmp/display"];

  // the time of validation
  optional int32 validation_step = 9 [default = 0];
  // start validation after this num steps
  optional int32 validation_after_steps = 10 [default = 0];
  // frequency of validation
  optional int32 validation_every_steps = 11 [default = 0];

  // the time of test
  optional int32 test_step = 12 [default = 0];
  // start test after this num steps
  optional int32 test_after_steps = 13 [default = 0];
  // frequency of test
  optional int32 test_every_steps = 14 [default = 0];


  optional string perf_prefix = 15 [default = "tmp/performance"];

  enum GradAlg{
    kBackPropagation = 1;
    kContrastiveDivergence = 2;
  }
  optional GradAlg alg= 16 [default = kBackPropagation];

  // batchsize is the num of instances processed per step
  optional int32 batchsize = 19;
  optional int32 train_steps = 20;
  optional int32 validation_steps=21;
  optional int32 test_steps=22;
  // max number of tuples; 3571 is the 500-th prime number
  optional int32 max_splits=23 [default = 3571];

  optional SGDValue sgd=24 ;
  optional AdaGradValue adagrad=25;
}

message DataProto {
  optional DataSourceProto train_data = 1;
  optional DataSourceProto validation_data = 2;
  optional DataSourceProto test_data = 3;
}
message ModelProto {
  // model name
  optional string name = 1;
  optional NetProto net = 2;
  optional SolverProto solver = 3;
  optional DataProto data =4;
}

message ShardProto {
  repeated int32 record=1;
  optional string shard_folder=2;
}
message Record {
  optional DAryProto image=1;
  optional int32 label=2;
  optional string id=3;
}
// value field of the tuple for AdaGrad SGD
message AdaGradValue {
  optional int32 n_update = 1 [default=0];
  optional int32 version = 2 [default=0];
  optional DAryProto data = 4;
  optional DAryProto grad = 5;
  optional float base_learning_rate = 6;
  optional int32 threshold=7;
  optional int32 gid=12;
  repeated DAryProto history=15;
}

// value field of the tuple for normal SGD
message SGDValue {
  optional float base_learning_rate = 1;
  optional float momentum = 2 [default = 0];
  optional float weight_decay = 3 [default = 0];
  // for SGDProto::kStep, this field is the gamma used in caffe
  optional float gamma = 4;
  optional int32 learning_rate_change_steps = 5;
  enum ChangeProto {
    kFixed = 0;
    kInverse_t= 1;
    kExponential = 2;
    kLinear = 3;
    kStep = 4;
  }
  optional ChangeProto learning_rate_change = 6 [default = kInverse_t];

  optional float learning_rate_multiplier=7 [default=1.0];
  optional float weight_decay_multiplier=8 [default=1.0];
  optional int32 n_update = 9 [default=0];
  optional int32 version = 10 [default=0];
  optional int32 threshold=11;
  optional DAryProto data=13;
  optional DAryProto grad=14;
  optional int32 id=15;
}

message VKey {
  optional int32 key=1;
  optional int32 version=2;
}

