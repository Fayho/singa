package lapis;

message DataSourceProto {
  required string name = 1;
  // e.g., RGBDirSource and LabelSource
  required string type = 2;
  // directory for RGBDirSource and file for LabelSource
  required string path = 3;
  // dataset size
  optional int64 size = 4;
  // following three fields will be used for rgb image feature
  optional int32 channels = 6 [default = 3];
  // expected input height, if not the same, resize the image
  optional int32 height = 7 [default = 0];
  // expected input image width, if not the same, resize the image
  // it can also be the length of one dimension feature
  optional int32 width = 8 [default = 0];

  // offset of record to be read.
  optional int64 offset =9 [default=0];
  // MeanProto file, has the mean of images, used by RGBDirSource
  optional string mean_file=10;
}

message ParamProto {
  // for the program to identify it, each edge/layer has fixed parameters
  // e.g., "weight" "bias"
  required string name = 1;
  // optional, in most situation, user do not need to config this, the program
  // will calculate it
  repeated int32 shape = 2;

  enum InitMethod {
    kConstant = 0;
    // sample gaussian with std and mean
    kGaussain = 1;
    // uniform sampling between low and high
    kUniform = 2;
    // copy the content and history which are from previous training
    kPretrained = 3;
    // from Toronto Convnet, let a=1/sqrt(fan_in), w*=a after generating from
    // Gaussian distribution
    kGaussainSqrtFanIn = 4;
    // from Toronto Convnet, rectified linear activation, let
    // a=sqrt(3)/sqrt(fan_in), range is [-a, +a]; no need to set value=sqrt(3),
    // the program will multiply it.
    kUniformSqrtFanIn = 5;
    // from Theano MLP tutorial, let a=1/sqrt(fan_in+fan_out). for tanh
    // activation, range is [-6a, +6a], for sigmoid activation, range is
    // [-24a, +24a], put the scale factor to value field.
    // <a href="http://deeplearning.net/tutorial/mlp.html"> Theano MLP</a>
    kUniformSqrtFanInOut = 6;
  }
  optional InitMethod init_method = 3 [default = kConstant];
  optional float value = 4 [default = 1.0];
  // for uniform sampling
  optional float low = 5 [default = -1];
  optional float high = 6 [default = 1];
  // for gaussian sampling
  optional float mean = 7 [default = 0];
  optional float std = 8 [default = 1];
  // optional string partitioner = 4; // e.g., row or column partition
  optional float momentum_multiplier =9 [default=1];
  optional float learning_rate_multiplier =10 [default=1];
  optional float weight_decay_multiplier =11 [default=1];
  // data of the parameter
  repeated float content = 13 [packed = true];
  // history gradient of the parameter
  repeated float history = 14 [packed = true];
}

// Only edge have params
message EdgeProto {
  required string name = 1;
  required string type = 2;
  optional int32 num_output = 3;
  repeated ParamProto param = 4;
  optional bool directed = 5 [default = true];
  optional string top = 6;
  optional string bottom =7;
  // for convolutional and pooling edge.
  optional int32 kernel_size = 8;
  optional int32 stride = 9 [default=1];
  optional int32 pad = 10 [default=0];
  optional int32 num_groups =11 [default=1];

  // for local response normalization edge
  optional float alpha = 12;
  optional float beta = 13;
  optional float knorm = 14 [default =1.0];
  optional int32 local_size = 15;

  // for pooling edge
  enum PoolingMethod {
    kMaxPooling=1;
    kAvgPooling=2;
  }
  optional PoolingMethod pooling_method = 16;
}

// used to load image mean provided by caffe, in RGBDirSource
message MeanProto{
  optional int32 num =1;
  optional int32 channels = 2;
  optional int32 height = 3;
  optional int32 width = 4;
  repeated float data=5 [packed=true];
  repeated float diff=6 [packed=true];
}

message LayerProto {
  required string name = 1;
  // required int32 num_output = 2;
  required string type = 3;
  // repeated ParamProto param  = 4;
  // repeated string out_edge = 5;
  // repeated string in_edge = 6;
  optional string data_source = 7;
  optional float drop_prob = 8 [default=0.0];

  // for DataLayer to process image data
  optional int32 cropsize =9;
  optional bool mirror = 10;
}

message NetProto {
  repeated LayerProto layer = 3;
  repeated EdgeProto edge  = 4;
}

// stochastic gradient
message SGDProto {
  required float base_learning_rate = 1;
  optional float base_momentum = 2 [default = 0];
  optional float base_weight_decay = 3 [default = 0];
  // the *_x field can be used for multiple purposes, e.g., final_*
  optional float momentum_x = 4;
  // for SGDProto::kStep, this field is the gamma used in caffe
  optional float learning_rate_x = 5;
  optional float weight_decay_x = 6;
  optional int32 learning_rate_change_steps = 7;
  optional int32 momentum_change_steps = 8;
  optional int32 weight_decay_change_steps = 9;

  enum ChangeProto {
    kFixed = 0;
    kInverse_t= 1;
    kExponential = 2;
    kLinear = 3;
    kStep = 4;
  }

  optional ChangeProto learning_rate_change = 10 [default = kInverse_t];
  optional ChangeProto weight_decay_change = 11 [default = kFixed];
  optional ChangeProto momentum_change = 12 [default = kFixed];

  optional int32 total_steps = 13;
  // batchsize is the num of instances processed per step
  optional int32 train_batchsize = 14;
  optional int32 validation_batchsize = 15;
  optional int32 test_batchsize = 16;
}


message PerformanceProto {
  optional float precision = 1;
  optional float recall = 2;
  optional float map = 3;
  optional float precision50 = 4;
}

message TrainerProto {
  // optimizer, may support lbfgs later
  optional SGDProto sgd = 1;

  // start the checkpoint operation after this num steps
  optional int32 checkpoint_after_steps = 2 [default = 0];
  // frequency of checkpoint
  optional int32 checkpoint_every_steps = 3 [default = 0];
  // path prefix for the checkpoint file
  optional string checkpoint_prefix  = 4 [default = "tmp/checkpoint"];

  // the time of checkpoint
  optional int32 checkpoint_step = 5 [default = 0];
  // start display after this num steps
  optional int32 display_after_steps = 6 [default = 0];
  // frequency of display
  optional int32 display_every_steps = 7 [default = 0];
  // path prefix for the display file
  optional string display_prefix = 8 [default = "tmp/display"];

// the time of validation
  optional int32 validate_step = 9 [default = 0];
  // start validation after this num steps
  optional int32 validate_after_steps = 10 [default = 0];
  // frequency of validation
  optional int32 validate_every_steps = 11 [default = 0];


  repeated DataSourceProto train_data = 12;
  repeated DataSourceProto validation_data = 13;
  repeated DataSourceProto test_data = 14;

  //optional PerformanceProto train_perf = 11;
  //optional PerformanceProto validation_perf = 12;
  //optional PerformanceProto test_perf = 13;
  optional string perf_prefix = 15 [default = "tmp/performance"];

  enum Algorithm {
    kBackPropagation = 1;
    kContrastiveDivergence = 2;
  }
  optional Algorithm alg= 16 [default = kBackPropagation];
  optional bool do_train= 17 [default = true];
  optional bool do_test= 18 [default = false];
}

message ModelProto {
  // model name
  optional string name = 1;
  required NetProto net = 2;
  required TrainerProto trainer = 3;
}

message float_vector_message {
  repeated float myfloat = 1;
}
