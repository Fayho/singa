// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cluster.proto

#ifndef PROTOBUF_cluster_2eproto__INCLUDED
#define PROTOBUF_cluster_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace singa {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cluster_2eproto();
void protobuf_AssignDesc_cluster_2eproto();
void protobuf_ShutdownFile_cluster_2eproto();

class Cluster;

// ===================================================================

class Cluster : public ::google::protobuf::Message {
 public:
  Cluster();
  virtual ~Cluster();

  Cluster(const Cluster& from);

  inline Cluster& operator=(const Cluster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cluster& default_instance();

  void Swap(Cluster* other);

  // implements Message ----------------------------------------------

  Cluster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Cluster& from);
  void MergeFrom(const Cluster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 server_start = 1 [default = 0];
  inline bool has_server_start() const;
  inline void clear_server_start();
  static const int kServerStartFieldNumber = 1;
  inline ::google::protobuf::int32 server_start() const;
  inline void set_server_start(::google::protobuf::int32 value);

  // optional int32 server_end = 2 [default = 1];
  inline bool has_server_end() const;
  inline void clear_server_end();
  static const int kServerEndFieldNumber = 2;
  inline ::google::protobuf::int32 server_end() const;
  inline void set_server_end(::google::protobuf::int32 value);

  // optional int32 worker_start = 3;
  inline bool has_worker_start() const;
  inline void clear_worker_start();
  static const int kWorkerStartFieldNumber = 3;
  inline ::google::protobuf::int32 worker_start() const;
  inline void set_worker_start(::google::protobuf::int32 value);

  // optional int32 worker_end = 4;
  inline bool has_worker_end() const;
  inline void clear_worker_end();
  static const int kWorkerEndFieldNumber = 4;
  inline ::google::protobuf::int32 worker_end() const;
  inline void set_worker_end(::google::protobuf::int32 value);

  // optional int32 group_size = 5 [default = 1];
  inline bool has_group_size() const;
  inline void clear_group_size();
  static const int kGroupSizeFieldNumber = 5;
  inline ::google::protobuf::int32 group_size() const;
  inline void set_group_size(::google::protobuf::int32 value);

  // required string data_folder = 6;
  inline bool has_data_folder() const;
  inline void clear_data_folder();
  static const int kDataFolderFieldNumber = 6;
  inline const ::std::string& data_folder() const;
  inline void set_data_folder(const ::std::string& value);
  inline void set_data_folder(const char* value);
  inline void set_data_folder(const char* value, size_t size);
  inline ::std::string* mutable_data_folder();
  inline ::std::string* release_data_folder();
  inline void set_allocated_data_folder(::std::string* data_folder);

  // optional bool synchronous = 7 [default = false];
  inline bool has_synchronous() const;
  inline void clear_synchronous();
  static const int kSynchronousFieldNumber = 7;
  inline bool synchronous() const;
  inline void set_synchronous(bool value);

  // @@protoc_insertion_point(class_scope:singa.Cluster)
 private:
  inline void set_has_server_start();
  inline void clear_has_server_start();
  inline void set_has_server_end();
  inline void clear_has_server_end();
  inline void set_has_worker_start();
  inline void clear_has_worker_start();
  inline void set_has_worker_end();
  inline void clear_has_worker_end();
  inline void set_has_group_size();
  inline void clear_has_group_size();
  inline void set_has_data_folder();
  inline void clear_has_data_folder();
  inline void set_has_synchronous();
  inline void clear_has_synchronous();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 server_start_;
  ::google::protobuf::int32 server_end_;
  ::google::protobuf::int32 worker_start_;
  ::google::protobuf::int32 worker_end_;
  ::std::string* data_folder_;
  ::google::protobuf::int32 group_size_;
  bool synchronous_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cluster_2eproto();
  friend void protobuf_AssignDesc_cluster_2eproto();
  friend void protobuf_ShutdownFile_cluster_2eproto();

  void InitAsDefaultInstance();
  static Cluster* default_instance_;
};
// ===================================================================


// ===================================================================

// Cluster

// optional int32 server_start = 1 [default = 0];
inline bool Cluster::has_server_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Cluster::set_has_server_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Cluster::clear_has_server_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Cluster::clear_server_start() {
  server_start_ = 0;
  clear_has_server_start();
}
inline ::google::protobuf::int32 Cluster::server_start() const {
  return server_start_;
}
inline void Cluster::set_server_start(::google::protobuf::int32 value) {
  set_has_server_start();
  server_start_ = value;
}

// optional int32 server_end = 2 [default = 1];
inline bool Cluster::has_server_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Cluster::set_has_server_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Cluster::clear_has_server_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Cluster::clear_server_end() {
  server_end_ = 1;
  clear_has_server_end();
}
inline ::google::protobuf::int32 Cluster::server_end() const {
  return server_end_;
}
inline void Cluster::set_server_end(::google::protobuf::int32 value) {
  set_has_server_end();
  server_end_ = value;
}

// optional int32 worker_start = 3;
inline bool Cluster::has_worker_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Cluster::set_has_worker_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Cluster::clear_has_worker_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Cluster::clear_worker_start() {
  worker_start_ = 0;
  clear_has_worker_start();
}
inline ::google::protobuf::int32 Cluster::worker_start() const {
  return worker_start_;
}
inline void Cluster::set_worker_start(::google::protobuf::int32 value) {
  set_has_worker_start();
  worker_start_ = value;
}

// optional int32 worker_end = 4;
inline bool Cluster::has_worker_end() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Cluster::set_has_worker_end() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Cluster::clear_has_worker_end() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Cluster::clear_worker_end() {
  worker_end_ = 0;
  clear_has_worker_end();
}
inline ::google::protobuf::int32 Cluster::worker_end() const {
  return worker_end_;
}
inline void Cluster::set_worker_end(::google::protobuf::int32 value) {
  set_has_worker_end();
  worker_end_ = value;
}

// optional int32 group_size = 5 [default = 1];
inline bool Cluster::has_group_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Cluster::set_has_group_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Cluster::clear_has_group_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Cluster::clear_group_size() {
  group_size_ = 1;
  clear_has_group_size();
}
inline ::google::protobuf::int32 Cluster::group_size() const {
  return group_size_;
}
inline void Cluster::set_group_size(::google::protobuf::int32 value) {
  set_has_group_size();
  group_size_ = value;
}

// required string data_folder = 6;
inline bool Cluster::has_data_folder() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Cluster::set_has_data_folder() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Cluster::clear_has_data_folder() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Cluster::clear_data_folder() {
  if (data_folder_ != &::google::protobuf::internal::kEmptyString) {
    data_folder_->clear();
  }
  clear_has_data_folder();
}
inline const ::std::string& Cluster::data_folder() const {
  return *data_folder_;
}
inline void Cluster::set_data_folder(const ::std::string& value) {
  set_has_data_folder();
  if (data_folder_ == &::google::protobuf::internal::kEmptyString) {
    data_folder_ = new ::std::string;
  }
  data_folder_->assign(value);
}
inline void Cluster::set_data_folder(const char* value) {
  set_has_data_folder();
  if (data_folder_ == &::google::protobuf::internal::kEmptyString) {
    data_folder_ = new ::std::string;
  }
  data_folder_->assign(value);
}
inline void Cluster::set_data_folder(const char* value, size_t size) {
  set_has_data_folder();
  if (data_folder_ == &::google::protobuf::internal::kEmptyString) {
    data_folder_ = new ::std::string;
  }
  data_folder_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Cluster::mutable_data_folder() {
  set_has_data_folder();
  if (data_folder_ == &::google::protobuf::internal::kEmptyString) {
    data_folder_ = new ::std::string;
  }
  return data_folder_;
}
inline ::std::string* Cluster::release_data_folder() {
  clear_has_data_folder();
  if (data_folder_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_folder_;
    data_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Cluster::set_allocated_data_folder(::std::string* data_folder) {
  if (data_folder_ != &::google::protobuf::internal::kEmptyString) {
    delete data_folder_;
  }
  if (data_folder) {
    set_has_data_folder();
    data_folder_ = data_folder;
  } else {
    clear_has_data_folder();
    data_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool synchronous = 7 [default = false];
inline bool Cluster::has_synchronous() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Cluster::set_has_synchronous() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Cluster::clear_has_synchronous() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Cluster::clear_synchronous() {
  synchronous_ = false;
  clear_has_synchronous();
}
inline bool Cluster::synchronous() const {
  return synchronous_;
}
inline void Cluster::set_synchronous(bool value) {
  set_has_synchronous();
  synchronous_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace singa

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cluster_2eproto__INCLUDED
