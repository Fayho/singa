name: "LeNet"
net {
layer{
  name: "image"
  type: "ImageInputLayer"
  data_param {
    scale:0.00390625
  }
}

layer{
  name: "label"
  type: "LabelLayer"
}

layer{
  name: "conv1"
  type: "ConvolutionLayer"
  src_layer: "input"
  convolution_param{
    num_output: 20
     kernelsize: 5
     stride: 1
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanIn
    learning_rate_multiplier:2
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 1
    learning_rate_multiplier:1
  }
}

layer{
  name: "pool1"
  type: "PoolingLayer"
  src_layer: "conv1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer{
  name: "conv2"
  type: "CovolutionLayer"
  src_layer: "pool1"
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanIn
    learning_rate_multiplier:2
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 1
    learning_rate_multiplier:1
  }
}

layer{
  name: "pool2"
  type: "PoolingLayer"
  src_layer: "conv2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer{
  name: "fc1"
  type: "InnerProductLayer"
  src_layer:"pool2"
  inner_product_param{
    num_output: 500
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanIn
    learning_rate_multiplier:2
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 1
    learning_rate_multiplier:1
  }
}

layer{
  name: "relu1"
  type: "ReLULayer"
  src_layer:"fc1"
}
layer{
  name: "fc2"
  type: "InnerProductLayer"
  src_layer:"relu1"
  inner_product_param{
    num_output: 10
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanIn
    learning_rate_multiplier:2
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 1
    learning_rate_multiplier:1
  }
}

layer{
  name: "output"
  type: "SoftmaxLossLayer"
  src_layer: "fc2"
  src_layer: "label"
}
}

solver{
  train_folder: "mnist/train"
  test_folder: "mnist/test"
  batchsize: 50
  train_steps: 10000
  test_steps:200
  display_every_steps:100
  sgd{
    learning_rate: 0.01
    momentum: 0.9
    weight_decay: 0.0005
    learning_rate_change: "kInverse"
    gamma: 0.0001
    power: 0.75
  }
}
